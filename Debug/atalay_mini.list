
atalay_mini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aae4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  0800abf8  0800abf8  0001abf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae48  0800ae48  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800ae48  0800ae48  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ae48  0800ae48  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae48  0800ae48  0001ae48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae4c  0800ae4c  0001ae4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800ae50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bcc  20000078  0800aec8  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001c44  0800aec8  00021c44  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e267  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a8f  00000000  00000000  0003e308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d8  00000000  00000000  00041d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001678  00000000  00000000  00043570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5ab  00000000  00000000  00044be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000196b7  00000000  00000000  0005f193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098f16  00000000  00000000  0007884a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00111760  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007158  00000000  00000000  001117b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800abdc 	.word	0x0800abdc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800abdc 	.word	0x0800abdc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <mpu9250ReadReg>:
	
  HAL_I2C_Master_Transmit(&hi2c1, chipAddr, data, 2, 100);
  return 1;
}

int mpu9250ReadReg( uint8_t regAddr, uint8_t *regVal , uint16_t count) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af02      	add	r7, sp, #8
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	80bb      	strh	r3, [r7, #4]
  HAL_I2C_Master_Transmit(&hi2c1, chipAddr, &regAddr, 1, 100);
 8000ac8:	1dfa      	adds	r2, r7, #7
 8000aca:	2364      	movs	r3, #100	; 0x64
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	2301      	movs	r3, #1
 8000ad0:	21d0      	movs	r1, #208	; 0xd0
 8000ad2:	4808      	ldr	r0, [pc, #32]	; (8000af4 <mpu9250ReadReg+0x3c>)
 8000ad4:	f002 fd42 	bl	800355c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, chipAddr, regVal, count, 100);
 8000ad8:	88bb      	ldrh	r3, [r7, #4]
 8000ada:	2264      	movs	r2, #100	; 0x64
 8000adc:	9200      	str	r2, [sp, #0]
 8000ade:	683a      	ldr	r2, [r7, #0]
 8000ae0:	21d0      	movs	r1, #208	; 0xd0
 8000ae2:	4804      	ldr	r0, [pc, #16]	; (8000af4 <mpu9250ReadReg+0x3c>)
 8000ae4:	f002 fe38 	bl	8003758 <HAL_I2C_Master_Receive>
  return 1;
 8000ae8:	2301      	movs	r3, #1
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200019cc 	.word	0x200019cc

08000af8 <readRegisters>:

int readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	603a      	str	r2, [r7, #0]
 8000b02:	71fb      	strb	r3, [r7, #7]
 8000b04:	460b      	mov	r3, r1
 8000b06:	71bb      	strb	r3, [r7, #6]
  
	  mpu9250ReadReg( subAddress,  dest , count);
 8000b08:	79bb      	ldrb	r3, [r7, #6]
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	6839      	ldr	r1, [r7, #0]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ffd1 	bl	8000ab8 <mpu9250ReadReg>
   
      return 1;
 8000b16:	2301      	movs	r3, #1
    }
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <mpuReadSensor>:
  // successful init, return 1
  return 1;
}


int mpuReadSensor(struct mpuSensorData *data) {
 8000b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
 //  grab the data from the MPU9250
  if (readRegisters(ACCEL_OUT, 21, _buffer) < 0) {
 8000b2a:	233b      	movs	r3, #59	; 0x3b
 8000b2c:	4a72      	ldr	r2, [pc, #456]	; (8000cf8 <mpuReadSensor+0x1d8>)
 8000b2e:	2115      	movs	r1, #21
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ffe1 	bl	8000af8 <readRegisters>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	da02      	bge.n	8000b42 <mpuReadSensor+0x22>
    return -1;
 8000b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b40:	e0cc      	b.n	8000cdc <mpuReadSensor+0x1bc>
  }
	
  // combine into 16 bit values
	data->ax = (((int16_t)_buffer[0]) << 8)  | _buffer[1];  
 8000b42:	4b6d      	ldr	r3, [pc, #436]	; (8000cf8 <mpuReadSensor+0x1d8>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	021b      	lsls	r3, r3, #8
 8000b48:	b21a      	sxth	r2, r3
 8000b4a:	4b6b      	ldr	r3, [pc, #428]	; (8000cf8 <mpuReadSensor+0x1d8>)
 8000b4c:	785b      	ldrb	r3, [r3, #1]
 8000b4e:	b21b      	sxth	r3, r3
 8000b50:	4313      	orrs	r3, r2
 8000b52:	b21a      	sxth	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	801a      	strh	r2, [r3, #0]
  data->ay = (((int16_t)_buffer[2]) << 8)  | _buffer[3];
 8000b58:	4b67      	ldr	r3, [pc, #412]	; (8000cf8 <mpuReadSensor+0x1d8>)
 8000b5a:	789b      	ldrb	r3, [r3, #2]
 8000b5c:	021b      	lsls	r3, r3, #8
 8000b5e:	b21a      	sxth	r2, r3
 8000b60:	4b65      	ldr	r3, [pc, #404]	; (8000cf8 <mpuReadSensor+0x1d8>)
 8000b62:	78db      	ldrb	r3, [r3, #3]
 8000b64:	b21b      	sxth	r3, r3
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b21a      	sxth	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	805a      	strh	r2, [r3, #2]
  data->az = (((int16_t)_buffer[4]) << 8)  | _buffer[5];
 8000b6e:	4b62      	ldr	r3, [pc, #392]	; (8000cf8 <mpuReadSensor+0x1d8>)
 8000b70:	791b      	ldrb	r3, [r3, #4]
 8000b72:	021b      	lsls	r3, r3, #8
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	4b60      	ldr	r3, [pc, #384]	; (8000cf8 <mpuReadSensor+0x1d8>)
 8000b78:	795b      	ldrb	r3, [r3, #5]
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b21a      	sxth	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	809a      	strh	r2, [r3, #4]
  data->t =  (((int16_t)_buffer[6]) << 8)  | _buffer[7];
 8000b84:	4b5c      	ldr	r3, [pc, #368]	; (8000cf8 <mpuReadSensor+0x1d8>)
 8000b86:	799b      	ldrb	r3, [r3, #6]
 8000b88:	021b      	lsls	r3, r3, #8
 8000b8a:	b21a      	sxth	r2, r3
 8000b8c:	4b5a      	ldr	r3, [pc, #360]	; (8000cf8 <mpuReadSensor+0x1d8>)
 8000b8e:	79db      	ldrb	r3, [r3, #7]
 8000b90:	b21b      	sxth	r3, r3
 8000b92:	4313      	orrs	r3, r2
 8000b94:	b21a      	sxth	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	825a      	strh	r2, [r3, #18]
  data->gx = (((int16_t)_buffer[8]) << 8)  | _buffer[9];
 8000b9a:	4b57      	ldr	r3, [pc, #348]	; (8000cf8 <mpuReadSensor+0x1d8>)
 8000b9c:	7a1b      	ldrb	r3, [r3, #8]
 8000b9e:	021b      	lsls	r3, r3, #8
 8000ba0:	b21a      	sxth	r2, r3
 8000ba2:	4b55      	ldr	r3, [pc, #340]	; (8000cf8 <mpuReadSensor+0x1d8>)
 8000ba4:	7a5b      	ldrb	r3, [r3, #9]
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	b21a      	sxth	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	80da      	strh	r2, [r3, #6]
  data->gy = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8000bb0:	4b51      	ldr	r3, [pc, #324]	; (8000cf8 <mpuReadSensor+0x1d8>)
 8000bb2:	7a9b      	ldrb	r3, [r3, #10]
 8000bb4:	021b      	lsls	r3, r3, #8
 8000bb6:	b21a      	sxth	r2, r3
 8000bb8:	4b4f      	ldr	r3, [pc, #316]	; (8000cf8 <mpuReadSensor+0x1d8>)
 8000bba:	7adb      	ldrb	r3, [r3, #11]
 8000bbc:	b21b      	sxth	r3, r3
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	b21a      	sxth	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	811a      	strh	r2, [r3, #8]
  data->gz = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 8000bc6:	4b4c      	ldr	r3, [pc, #304]	; (8000cf8 <mpuReadSensor+0x1d8>)
 8000bc8:	7b1b      	ldrb	r3, [r3, #12]
 8000bca:	021b      	lsls	r3, r3, #8
 8000bcc:	b21a      	sxth	r2, r3
 8000bce:	4b4a      	ldr	r3, [pc, #296]	; (8000cf8 <mpuReadSensor+0x1d8>)
 8000bd0:	7b5b      	ldrb	r3, [r3, #13]
 8000bd2:	b21b      	sxth	r3, r3
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	b21a      	sxth	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	815a      	strh	r2, [r3, #10]
  data->hx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 8000bdc:	4b46      	ldr	r3, [pc, #280]	; (8000cf8 <mpuReadSensor+0x1d8>)
 8000bde:	7bdb      	ldrb	r3, [r3, #15]
 8000be0:	021b      	lsls	r3, r3, #8
 8000be2:	b21a      	sxth	r2, r3
 8000be4:	4b44      	ldr	r3, [pc, #272]	; (8000cf8 <mpuReadSensor+0x1d8>)
 8000be6:	7b9b      	ldrb	r3, [r3, #14]
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	4313      	orrs	r3, r2
 8000bec:	b21a      	sxth	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	819a      	strh	r2, [r3, #12]
  data->hy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 8000bf2:	4b41      	ldr	r3, [pc, #260]	; (8000cf8 <mpuReadSensor+0x1d8>)
 8000bf4:	7c5b      	ldrb	r3, [r3, #17]
 8000bf6:	021b      	lsls	r3, r3, #8
 8000bf8:	b21a      	sxth	r2, r3
 8000bfa:	4b3f      	ldr	r3, [pc, #252]	; (8000cf8 <mpuReadSensor+0x1d8>)
 8000bfc:	7c1b      	ldrb	r3, [r3, #16]
 8000bfe:	b21b      	sxth	r3, r3
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b21a      	sxth	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	81da      	strh	r2, [r3, #14]
  data->hz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 8000c08:	4b3b      	ldr	r3, [pc, #236]	; (8000cf8 <mpuReadSensor+0x1d8>)
 8000c0a:	7cdb      	ldrb	r3, [r3, #19]
 8000c0c:	021b      	lsls	r3, r3, #8
 8000c0e:	b21a      	sxth	r2, r3
 8000c10:	4b39      	ldr	r3, [pc, #228]	; (8000cf8 <mpuReadSensor+0x1d8>)
 8000c12:	7c9b      	ldrb	r3, [r3, #18]
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	4313      	orrs	r3, r2
 8000c18:	b21a      	sxth	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	821a      	strh	r2, [r3, #16]
	data->roll=((atan2(data->ay,data->az)*180)/M_PI)*-1;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fbe5 	bl	80003f4 <__aeabi_i2d>
 8000c2a:	4682      	mov	sl, r0
 8000c2c:	468b      	mov	fp, r1
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fbdd 	bl	80003f4 <__aeabi_i2d>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	4650      	mov	r0, sl
 8000c40:	4659      	mov	r1, fp
 8000c42:	f008 fdd9 	bl	80097f8 <atan2>
 8000c46:	f04f 0200 	mov.w	r2, #0
 8000c4a:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <mpuReadSensor+0x1dc>)
 8000c4c:	f7ff fc3c 	bl	80004c8 <__aeabi_dmul>
 8000c50:	4602      	mov	r2, r0
 8000c52:	460b      	mov	r3, r1
 8000c54:	4610      	mov	r0, r2
 8000c56:	4619      	mov	r1, r3
 8000c58:	a323      	add	r3, pc, #140	; (adr r3, 8000ce8 <mpuReadSensor+0x1c8>)
 8000c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c5e:	f7ff fd5d 	bl	800071c <__aeabi_ddiv>
 8000c62:	4602      	mov	r2, r0
 8000c64:	460b      	mov	r3, r1
 8000c66:	4690      	mov	r8, r2
 8000c68:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8000c6c:	4640      	mov	r0, r8
 8000c6e:	4649      	mov	r1, r9
 8000c70:	f7ff feda 	bl	8000a28 <__aeabi_d2iz>
 8000c74:	4603      	mov	r3, r0
 8000c76:	b21a      	sxth	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	829a      	strh	r2, [r3, #20]

	data->pitch=((atan2(data->ax,data->az)*180)/3.14)*-1;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fbb6 	bl	80003f4 <__aeabi_i2d>
 8000c88:	4680      	mov	r8, r0
 8000c8a:	4689      	mov	r9, r1
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fbae 	bl	80003f4 <__aeabi_i2d>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	4649      	mov	r1, r9
 8000ca0:	f008 fdaa 	bl	80097f8 <atan2>
 8000ca4:	f04f 0200 	mov.w	r2, #0
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <mpuReadSensor+0x1dc>)
 8000caa:	f7ff fc0d 	bl	80004c8 <__aeabi_dmul>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	4610      	mov	r0, r2
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	a30e      	add	r3, pc, #56	; (adr r3, 8000cf0 <mpuReadSensor+0x1d0>)
 8000cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cbc:	f7ff fd2e 	bl	800071c <__aeabi_ddiv>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	4614      	mov	r4, r2
 8000cc6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000cca:	4620      	mov	r0, r4
 8000ccc:	4629      	mov	r1, r5
 8000cce:	f7ff feab 	bl	8000a28 <__aeabi_d2iz>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	b21a      	sxth	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	82da      	strh	r2, [r3, #22]
  return 1;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000ce6:	bf00      	nop
 8000ce8:	54442d18 	.word	0x54442d18
 8000cec:	400921fb 	.word	0x400921fb
 8000cf0:	51eb851f 	.word	0x51eb851f
 8000cf4:	40091eb8 	.word	0x40091eb8
 8000cf8:	20001a28 	.word	0x20001a28
 8000cfc:	40668000 	.word	0x40668000

08000d00 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8000d08:	2305      	movs	r3, #5
 8000d0a:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f001 f9d5 	bl	80020c0 <null_ptr_check>
 8000d16:	4603      	mov	r3, r0
 8000d18:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8000d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d133      	bne.n	8000d8a <bme280_init+0x8a>
		while (try_count) {
 8000d22:	e028      	b.n	8000d76 <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000d24:	f107 010d 	add.w	r1, r7, #13
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	20d0      	movs	r0, #208	; 0xd0
 8000d2e:	f000 f832 	bl	8000d96 <bme280_get_regs>
 8000d32:	4603      	mov	r3, r0
 8000d34:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d114      	bne.n	8000d68 <bme280_init+0x68>
 8000d3e:	7b7b      	ldrb	r3, [r7, #13]
 8000d40:	2b60      	cmp	r3, #96	; 0x60
 8000d42:	d111      	bne.n	8000d68 <bme280_init+0x68>
				dev->chip_id = chip_id;
 8000d44:	7b7a      	ldrb	r2, [r7, #13]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 f976 	bl	800103c <bme280_soft_reset>
 8000d50:	4603      	mov	r3, r0
 8000d52:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8000d54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d110      	bne.n	8000d7e <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f001 f829 	bl	8001db4 <get_calib_data>
 8000d62:	4603      	mov	r3, r0
 8000d64:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8000d66:	e00a      	b.n	8000d7e <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4798      	blx	r3
			--try_count;
 8000d70:	7bbb      	ldrb	r3, [r7, #14]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8000d76:	7bbb      	ldrb	r3, [r7, #14]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d1d3      	bne.n	8000d24 <bme280_init+0x24>
 8000d7c:	e000      	b.n	8000d80 <bme280_init+0x80>
				break;
 8000d7e:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8000d80:	7bbb      	ldrb	r3, [r7, #14]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d101      	bne.n	8000d8a <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8000d86:	23fe      	movs	r3, #254	; 0xfe
 8000d88:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8000d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8000d96:	b590      	push	{r4, r7, lr}
 8000d98:	b087      	sub	sp, #28
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	4603      	mov	r3, r0
 8000da2:	73fb      	strb	r3, [r7, #15]
 8000da4:	4613      	mov	r3, r2
 8000da6:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f001 f989 	bl	80020c0 <null_ptr_check>
 8000dae:	4603      	mov	r3, r0
 8000db0:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8000db2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d117      	bne.n	8000dea <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	789b      	ldrb	r3, [r3, #2]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d003      	beq.n	8000dca <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dc8:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685c      	ldr	r4, [r3, #4]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	7858      	ldrb	r0, [r3, #1]
 8000dd2:	89bb      	ldrh	r3, [r7, #12]
 8000dd4:	7bf9      	ldrb	r1, [r7, #15]
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	47a0      	blx	r4
 8000dda:	4603      	mov	r3, r0
 8000ddc:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8000dde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8000de6:	23fc      	movs	r3, #252	; 0xfc
 8000de8:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8000dea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	371c      	adds	r7, #28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd90      	pop	{r4, r7, pc}

08000df6 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8000df6:	b590      	push	{r4, r7, lr}
 8000df8:	b08d      	sub	sp, #52	; 0x34
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	60f8      	str	r0, [r7, #12]
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	603b      	str	r3, [r7, #0]
 8000e02:	4613      	mov	r3, r2
 8000e04:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2b0a      	cmp	r3, #10
 8000e0a:	d901      	bls.n	8000e10 <bme280_set_regs+0x1a>
		len = 10;
 8000e0c:	230a      	movs	r3, #10
 8000e0e:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000e10:	6838      	ldr	r0, [r7, #0]
 8000e12:	f001 f955 	bl	80020c0 <null_ptr_check>
 8000e16:	4603      	mov	r3, r0
 8000e18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8000e1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d154      	bne.n	8000ece <bme280_set_regs+0xd8>
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d051      	beq.n	8000ece <bme280_set_regs+0xd8>
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d04e      	beq.n	8000ece <bme280_set_regs+0xd8>
		if (len != 0) {
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d047      	beq.n	8000ec6 <bme280_set_regs+0xd0>
			temp_buff[0] = reg_data[0];
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	789b      	ldrb	r3, [r3, #2]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d01a      	beq.n	8000e7a <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000e4a:	e011      	b.n	8000e70 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8000e4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	4413      	add	r3, r2
 8000e54:	781a      	ldrb	r2, [r3, #0]
 8000e56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000e5a:	68f9      	ldr	r1, [r7, #12]
 8000e5c:	440b      	add	r3, r1
 8000e5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000e66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000e70:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d3e8      	bcc.n	8000e4c <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d90b      	bls.n	8000e98 <bme280_set_regs+0xa2>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	f107 0114 	add.w	r1, r7, #20
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f000 ffd8 	bl	8001e3e <interleave_reg_addr>
				temp_len = len * 2;
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000e96:	e001      	b.n	8000e9c <bme280_set_regs+0xa6>
			} else {
				temp_len = len;
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	689c      	ldr	r4, [r3, #8]
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	7858      	ldrb	r0, [r3, #1]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	7819      	ldrb	r1, [r3, #0]
 8000ea8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000eaa:	f107 0214 	add.w	r2, r7, #20
 8000eae:	47a0      	blx	r4
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 8000eb6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d00b      	beq.n	8000ed6 <bme280_set_regs+0xe0>
				rslt = BME280_E_COMM_FAIL;
 8000ebe:	23fc      	movs	r3, #252	; 0xfc
 8000ec0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8000ec4:	e007      	b.n	8000ed6 <bme280_set_regs+0xe0>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8000ec6:	23fd      	movs	r3, #253	; 0xfd
 8000ec8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8000ecc:	e003      	b.n	8000ed6 <bme280_set_regs+0xe0>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8000ece:	23ff      	movs	r3, #255	; 0xff
 8000ed0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000ed4:	e000      	b.n	8000ed8 <bme280_set_regs+0xe2>
		if (len != 0) {
 8000ed6:	bf00      	nop
	}


	return rslt;
 8000ed8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3734      	adds	r7, #52	; 0x34
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd90      	pop	{r4, r7, pc}

08000ee4 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000ef0:	6838      	ldr	r0, [r7, #0]
 8000ef2:	f001 f8e5 	bl	80020c0 <null_ptr_check>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d13f      	bne.n	8000f82 <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8000f02:	f107 030e 	add.w	r3, r7, #14
 8000f06:	6839      	ldr	r1, [r7, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 f874 	bl	8000ff6 <bme280_get_sensor_mode>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8000f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d107      	bne.n	8000f2a <bme280_set_sensor_settings+0x46>
 8000f1a:	7bbb      	ldrb	r3, [r7, #14]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d004      	beq.n	8000f2a <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8000f20:	6838      	ldr	r0, [r7, #0]
 8000f22:	f000 fb42 	bl	80015aa <put_device_to_sleep>
 8000f26:	4603      	mov	r3, r0
 8000f28:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d127      	bne.n	8000f82 <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	4619      	mov	r1, r3
 8000f36:	2007      	movs	r0, #7
 8000f38:	f001 f8a7 	bl	800208a <are_settings_changed>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d009      	beq.n	8000f56 <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 f983 	bl	8001258 <set_osr_settings>
 8000f52:	4603      	mov	r3, r0
 8000f54:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8000f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d111      	bne.n	8000f82 <bme280_set_sensor_settings+0x9e>
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	4619      	mov	r1, r3
 8000f62:	2018      	movs	r0, #24
 8000f64:	f001 f891 	bl	800208a <are_settings_changed>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d009      	beq.n	8000f82 <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 fa0a 	bl	8001392 <set_filter_standby_settings>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8000f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b084      	sub	sp, #16
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	6039      	str	r1, [r7, #0]
 8000f98:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000f9a:	6838      	ldr	r0, [r7, #0]
 8000f9c:	f001 f890 	bl	80020c0 <null_ptr_check>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8000fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d11e      	bne.n	8000fea <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8000fac:	f107 030e 	add.w	r3, r7, #14
 8000fb0:	6839      	ldr	r1, [r7, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f81f 	bl	8000ff6 <bme280_get_sensor_mode>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8000fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d107      	bne.n	8000fd4 <bme280_set_sensor_mode+0x46>
 8000fc4:	7bbb      	ldrb	r3, [r7, #14]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d004      	beq.n	8000fd4 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 8000fca:	6838      	ldr	r0, [r7, #0]
 8000fcc:	f000 faed 	bl	80015aa <put_device_to_sleep>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8000fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d106      	bne.n	8000fea <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	6839      	ldr	r1, [r7, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 faaf 	bl	8001544 <write_power_mode>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8000fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001000:	6838      	ldr	r0, [r7, #0]
 8001002:	f001 f85d 	bl	80020c0 <null_ptr_check>
 8001006:	4603      	mov	r3, r0
 8001008:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 800100a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10e      	bne.n	8001030 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	2201      	movs	r2, #1
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	20f4      	movs	r0, #244	; 0xf4
 800101a:	f7ff febc 	bl	8000d96 <bme280_get_regs>
 800101e:	4603      	mov	r3, r0
 8001020:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	b2da      	uxtb	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8001030:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8001044:	23e0      	movs	r3, #224	; 0xe0
 8001046:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8001048:	23b6      	movs	r3, #182	; 0xb6
 800104a:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f001 f837 	bl	80020c0 <null_ptr_check>
 8001052:	4603      	mov	r3, r0
 8001054:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10d      	bne.n	800107a <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800105e:	f107 010d 	add.w	r1, r7, #13
 8001062:	f107 000e 	add.w	r0, r7, #14
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2201      	movs	r2, #1
 800106a:	f7ff fec4 	bl	8000df6 <bme280_set_regs>
 800106e:	4603      	mov	r3, r0
 8001070:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	2002      	movs	r0, #2
 8001078:	4798      	blx	r3
	}

	return rslt;
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b08a      	sub	sp, #40	; 0x28
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f001 f809 	bl	80020c0 <null_ptr_check>
 80010ae:	4603      	mov	r3, r0
 80010b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 80010b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d124      	bne.n	8001106 <bme280_get_sensor_data+0x80>
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d021      	beq.n	8001106 <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 80010c2:	f107 011c 	add.w	r1, r7, #28
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2208      	movs	r2, #8
 80010ca:	20f7      	movs	r0, #247	; 0xf7
 80010cc:	f7ff fe63 	bl	8000d96 <bme280_get_regs>
 80010d0:	4603      	mov	r3, r0
 80010d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 80010d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d116      	bne.n	800110c <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 80010de:	f107 0210 	add.w	r2, r7, #16
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 f815 	bl	8001118 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3310      	adds	r3, #16
 80010f2:	f107 0110 	add.w	r1, r7, #16
 80010f6:	7bf8      	ldrb	r0, [r7, #15]
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	f000 f852 	bl	80011a2 <bme280_compensate_data>
 80010fe:	4603      	mov	r3, r0
 8001100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8001104:	e002      	b.n	800110c <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001106:	23ff      	movs	r3, #255	; 0xff
 8001108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 800110c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001110:	4618      	mov	r0, r3
 8001112:	3728      	adds	r7, #40	; 0x28
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8001118:	b480      	push	{r7}
 800111a:	b087      	sub	sp, #28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	031b      	lsls	r3, r3, #12
 8001128:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3301      	adds	r3, #1
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	011b      	lsls	r3, r3, #4
 8001132:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3302      	adds	r3, #2
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	091b      	lsrs	r3, r3, #4
 800113c:	b2db      	uxtb	r3, r3
 800113e:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	431a      	orrs	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	431a      	orrs	r2, r3
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3303      	adds	r3, #3
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	031b      	lsls	r3, r3, #12
 8001156:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3304      	adds	r3, #4
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	011b      	lsls	r3, r3, #4
 8001160:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3305      	adds	r3, #5
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	091b      	lsrs	r3, r3, #4
 800116a:	b2db      	uxtb	r3, r3
 800116c:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	431a      	orrs	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	431a      	orrs	r2, r3
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3306      	adds	r3, #6
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	021b      	lsls	r3, r3, #8
 8001184:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3307      	adds	r3, #7
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	431a      	orrs	r2, r3
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	609a      	str	r2, [r3, #8]
}
 8001198:	bf00      	nop
 800119a:	371c      	adds	r7, #28
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b086      	sub	sp, #24
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	4603      	mov	r3, r0
 80011b0:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d045      	beq.n	8001248 <bme280_compensate_data+0xa6>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d042      	beq.n	8001248 <bme280_compensate_data+0xa6>
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d03f      	beq.n	8001248 <bme280_compensate_data+0xa6>
		/* Initialize to zero */
		comp_data->temperature = 0;
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	e9c1 2302 	strd	r2, r3, [r1, #8]
		comp_data->pressure = 0;
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	f04f 0300 	mov.w	r3, #0
 80011e0:	e9c1 2300 	strd	r2, r3, [r1]
		comp_data->humidity = 0;
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	f04f 0300 	mov.w	r3, #0
 80011ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d008      	beq.n	800120e <bme280_compensate_data+0x6c>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80011fc:	6839      	ldr	r1, [r7, #0]
 80011fe:	68b8      	ldr	r0, [r7, #8]
 8001200:	f000 fa20 	bl	8001644 <compensate_temperature>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}
		if (sensor_comp & BME280_PRESS) {
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	2b00      	cmp	r3, #0
 8001216:	d008      	beq.n	800122a <bme280_compensate_data+0x88>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8001218:	6839      	ldr	r1, [r7, #0]
 800121a:	68b8      	ldr	r0, [r7, #8]
 800121c:	f000 fae0 	bl	80017e0 <compensate_pressure>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (sensor_comp & BME280_HUM) {
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00b      	beq.n	800124c <bme280_compensate_data+0xaa>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8001234:	6839      	ldr	r1, [r7, #0]
 8001236:	68b8      	ldr	r0, [r7, #8]
 8001238:	f000 fca0 	bl	8001b7c <compensate_humidity>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	e9c1 2304 	strd	r2, r3, [r1, #16]
		if (sensor_comp & BME280_HUM) {
 8001246:	e001      	b.n	800124c <bme280_compensate_data+0xaa>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001248:	23ff      	movs	r3, #255	; 0xff
 800124a:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800124c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8001266:	2301      	movs	r3, #1
 8001268:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	2b00      	cmp	r3, #0
 8001272:	d005      	beq.n	8001280 <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	68b8      	ldr	r0, [r7, #8]
 8001278:	f000 f815 	bl	80012a6 <set_osr_humidity_settings>
 800127c:	4603      	mov	r3, r0
 800127e:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d007      	beq.n	800129a <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	68b9      	ldr	r1, [r7, #8]
 8001290:	4618      	mov	r0, r3
 8001292:	f000 f842 	bl	800131a <set_osr_press_temp_settings>
 8001296:	4603      	mov	r3, r0
 8001298:	75fb      	strb	r3, [r7, #23]

	return rslt;
 800129a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b084      	sub	sp, #16
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80012b0:	23f2      	movs	r3, #242	; 0xf2
 80012b2:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	789b      	ldrb	r3, [r3, #2]
 80012b8:	f003 0307 	and.w	r3, r3, #7
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80012c0:	f107 010e 	add.w	r1, r7, #14
 80012c4:	f107 000c 	add.w	r0, r7, #12
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f7ff fd93 	bl	8000df6 <bme280_set_regs>
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 80012d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d118      	bne.n	800130e <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 80012dc:	23f4      	movs	r3, #244	; 0xf4
 80012de:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80012e0:	7b38      	ldrb	r0, [r7, #12]
 80012e2:	f107 010d 	add.w	r1, r7, #13
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f7ff fd54 	bl	8000d96 <bme280_get_regs>
 80012ee:	4603      	mov	r3, r0
 80012f0:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 80012f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d109      	bne.n	800130e <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80012fa:	f107 010d 	add.w	r1, r7, #13
 80012fe:	f107 000c 	add.w	r0, r7, #12
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	2201      	movs	r2, #1
 8001306:	f7ff fd76 	bl	8000df6 <bme280_set_regs>
 800130a:	4603      	mov	r3, r0
 800130c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800130e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8001328:	23f4      	movs	r3, #244	; 0xf4
 800132a:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800132c:	7db8      	ldrb	r0, [r7, #22]
 800132e:	f107 0115 	add.w	r1, r7, #21
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2201      	movs	r2, #1
 8001336:	f7ff fd2e 	bl	8000d96 <bme280_get_regs>
 800133a:	4603      	mov	r3, r0
 800133c:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 800133e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d11f      	bne.n	8001386 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b00      	cmp	r3, #0
 800134e:	d005      	beq.n	800135c <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 8001350:	f107 0315 	add.w	r3, r7, #21
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f88c 	bl	8001474 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d005      	beq.n	8001372 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 8001366:	f107 0315 	add.w	r3, r7, #21
 800136a:	68b9      	ldr	r1, [r7, #8]
 800136c:	4618      	mov	r0, r3
 800136e:	f000 f89d 	bl	80014ac <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001372:	f107 0115 	add.w	r1, r7, #21
 8001376:	f107 0016 	add.w	r0, r7, #22
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f7ff fd3a 	bl	8000df6 <bme280_set_regs>
 8001382:	4603      	mov	r3, r0
 8001384:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001386:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 80013a0:	23f5      	movs	r3, #245	; 0xf5
 80013a2:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80013a4:	7db8      	ldrb	r0, [r7, #22]
 80013a6:	f107 0115 	add.w	r1, r7, #21
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f7ff fcf2 	bl	8000d96 <bme280_get_regs>
 80013b2:	4603      	mov	r3, r0
 80013b4:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 80013b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d11f      	bne.n	80013fe <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	f003 0308 	and.w	r3, r3, #8
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d005      	beq.n	80013d4 <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 80013c8:	f107 0315 	add.w	r3, r7, #21
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 f81b 	bl	800140a <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 80013de:	f107 0315 	add.w	r3, r7, #21
 80013e2:	68b9      	ldr	r1, [r7, #8]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 f82c 	bl	8001442 <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80013ea:	f107 0115 	add.w	r1, r7, #21
 80013ee:	f107 0016 	add.w	r0, r7, #22
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f7ff fcfe 	bl	8000df6 <bme280_set_regs>
 80013fa:	4603      	mov	r3, r0
 80013fc:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80013fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b25b      	sxtb	r3, r3
 800141a:	f023 031c 	bic.w	r3, r3, #28
 800141e:	b25a      	sxtb	r2, r3
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	78db      	ldrb	r3, [r3, #3]
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	b25b      	sxtb	r3, r3
 8001428:	f003 031c 	and.w	r3, r3, #28
 800142c:	b25b      	sxtb	r3, r3
 800142e:	4313      	orrs	r3, r2
 8001430:	b25b      	sxtb	r3, r3
 8001432:	b2da      	uxtb	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	701a      	strb	r2, [r3, #0]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr

08001442 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	b25b      	sxtb	r3, r3
 8001452:	f003 031f 	and.w	r3, r3, #31
 8001456:	b25a      	sxtb	r2, r3
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	791b      	ldrb	r3, [r3, #4]
 800145c:	015b      	lsls	r3, r3, #5
 800145e:	b25b      	sxtb	r3, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	b25b      	sxtb	r3, r3
 8001464:	b2da      	uxtb	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	701a      	strb	r2, [r3, #0]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	b25b      	sxtb	r3, r3
 8001484:	f023 031c 	bic.w	r3, r3, #28
 8001488:	b25a      	sxtb	r2, r3
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	b25b      	sxtb	r3, r3
 8001492:	f003 031c 	and.w	r3, r3, #28
 8001496:	b25b      	sxtb	r3, r3
 8001498:	4313      	orrs	r3, r2
 800149a:	b25b      	sxtb	r3, r3
 800149c:	b2da      	uxtb	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	701a      	strb	r2, [r3, #0]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b25b      	sxtb	r3, r3
 80014bc:	f003 031f 	and.w	r3, r3, #31
 80014c0:	b25a      	sxtb	r2, r3
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	785b      	ldrb	r3, [r3, #1]
 80014c6:	015b      	lsls	r3, r3, #5
 80014c8:	b25b      	sxtb	r3, r3
 80014ca:	4313      	orrs	r3, r2
 80014cc:	b25b      	sxtb	r3, r3
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	701a      	strb	r2, [r3, #0]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr

080014de <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3302      	adds	r3, #2
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	109b      	asrs	r3, r3, #2
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	b2da      	uxtb	r2, r3
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3302      	adds	r3, #2
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	095b      	lsrs	r3, r3, #5
 8001512:	b2da      	uxtb	r2, r3
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3303      	adds	r3, #3
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	109b      	asrs	r3, r3, #2
 8001520:	b2db      	uxtb	r3, r3
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	b2da      	uxtb	r2, r3
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3303      	adds	r3, #3
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	b2da      	uxtb	r2, r3
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	711a      	strb	r2, [r3, #4]
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8001550:	23f4      	movs	r3, #244	; 0xf4
 8001552:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8001554:	7bb8      	ldrb	r0, [r7, #14]
 8001556:	f107 010d 	add.w	r1, r7, #13
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	2201      	movs	r2, #1
 800155e:	f7ff fc1a 	bl	8000d96 <bme280_get_regs>
 8001562:	4603      	mov	r3, r0
 8001564:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 8001566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d117      	bne.n	800159e <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 800156e:	7b7b      	ldrb	r3, [r7, #13]
 8001570:	b25b      	sxtb	r3, r3
 8001572:	f023 0303 	bic.w	r3, r3, #3
 8001576:	b25a      	sxtb	r2, r3
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	b25b      	sxtb	r3, r3
 8001582:	4313      	orrs	r3, r2
 8001584:	b25b      	sxtb	r3, r3
 8001586:	b2db      	uxtb	r3, r3
 8001588:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 800158a:	f107 010d 	add.w	r1, r7, #13
 800158e:	f107 000e 	add.w	r0, r7, #14
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	2201      	movs	r2, #1
 8001596:	f7ff fc2e 	bl	8000df6 <bme280_set_regs>
 800159a:	4603      	mov	r3, r0
 800159c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800159e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80015b2:	f107 0110 	add.w	r1, r7, #16
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2204      	movs	r2, #4
 80015ba:	20f2      	movs	r0, #242	; 0xf2
 80015bc:	f7ff fbeb 	bl	8000d96 <bme280_get_regs>
 80015c0:	4603      	mov	r3, r0
 80015c2:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 80015c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d118      	bne.n	80015fe <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 80015cc:	f107 0208 	add.w	r2, r7, #8
 80015d0:	f107 0310 	add.w	r3, r7, #16
 80015d4:	4611      	mov	r1, r2
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff ff81 	bl	80014de <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fd2d 	bl	800103c <bme280_soft_reset>
 80015e2:	4603      	mov	r3, r0
 80015e4:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 80015e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d107      	bne.n	80015fe <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 80015ee:	f107 0308 	add.w	r3, r7, #8
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 f808 	bl	800160a <reload_device_settings>
 80015fa:	4603      	mov	r3, r0
 80015fc:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80015fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b084      	sub	sp, #16
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	201f      	movs	r0, #31
 800161a:	f7ff fe1d 	bl	8001258 <set_osr_settings>
 800161e:	4603      	mov	r3, r0
 8001620:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 8001622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d106      	bne.n	8001638 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	201f      	movs	r0, #31
 8001630:	f7ff feaf 	bl	8001392 <set_filter_standby_settings>
 8001634:	4603      	mov	r3, r0
 8001636:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8001638:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 8001644:	b5b0      	push	{r4, r5, r7, lr}
 8001646:	b08c      	sub	sp, #48	; 0x30
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double temperature;
	double temperature_min = -40;
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	4b5d      	ldr	r3, [pc, #372]	; (80017c8 <compensate_temperature+0x184>)
 8001654:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temperature_max = 85;
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	4b5b      	ldr	r3, [pc, #364]	; (80017cc <compensate_temperature+0x188>)
 800165e:	e9c7 2306 	strd	r2, r3, [r7, #24]

	var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe feb4 	bl	80003d4 <__aeabi_ui2d>
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	4b57      	ldr	r3, [pc, #348]	; (80017d0 <compensate_temperature+0x18c>)
 8001672:	f7ff f853 	bl	800071c <__aeabi_ddiv>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4614      	mov	r4, r2
 800167c:	461d      	mov	r5, r3
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe fea6 	bl	80003d4 <__aeabi_ui2d>
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	4b51      	ldr	r3, [pc, #324]	; (80017d4 <compensate_temperature+0x190>)
 800168e:	f7ff f845 	bl	800071c <__aeabi_ddiv>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4620      	mov	r0, r4
 8001698:	4629      	mov	r1, r5
 800169a:	f7fe fd5d 	bl	8000158 <__aeabi_dsub>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var1 = var1 * ((double)calib_data->dig_T2);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe fea1 	bl	80003f4 <__aeabi_i2d>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016ba:	f7fe ff05 	bl	80004c8 <__aeabi_dmul>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe fe82 	bl	80003d4 <__aeabi_ui2d>
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80016d8:	f7ff f820 	bl	800071c <__aeabi_ddiv>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4614      	mov	r4, r2
 80016e2:	461d      	mov	r5, r3
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe fe73 	bl	80003d4 <__aeabi_ui2d>
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	4b39      	ldr	r3, [pc, #228]	; (80017d8 <compensate_temperature+0x194>)
 80016f4:	f7ff f812 	bl	800071c <__aeabi_ddiv>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4620      	mov	r0, r4
 80016fe:	4629      	mov	r1, r5
 8001700:	f7fe fd2a 	bl	8000158 <__aeabi_dsub>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 800170c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001710:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001714:	f7fe fed8 	bl	80004c8 <__aeabi_dmul>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4614      	mov	r4, r2
 800171e:	461d      	mov	r5, r3
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe fe64 	bl	80003f4 <__aeabi_i2d>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4620      	mov	r0, r4
 8001732:	4629      	mov	r1, r5
 8001734:	f7fe fec8 	bl	80004c8 <__aeabi_dmul>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	calib_data->t_fine = (int32_t)(var1 + var2);
 8001740:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001744:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001748:	f7fe fd08 	bl	800015c <__adddf3>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4610      	mov	r0, r2
 8001752:	4619      	mov	r1, r3
 8001754:	f7ff f968 	bl	8000a28 <__aeabi_d2iz>
 8001758:	4602      	mov	r2, r0
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (var1 + var2) / 5120.0;
 800175e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001762:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001766:	f7fe fcf9 	bl	800015c <__adddf3>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	4b19      	ldr	r3, [pc, #100]	; (80017dc <compensate_temperature+0x198>)
 8001778:	f7fe ffd0 	bl	800071c <__aeabi_ddiv>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (temperature < temperature_min)
 8001784:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001788:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800178c:	f7ff f90e 	bl	80009ac <__aeabi_dcmplt>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d004      	beq.n	80017a0 <compensate_temperature+0x15c>
		temperature = temperature_min;
 8001796:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800179a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800179e:	e00c      	b.n	80017ba <compensate_temperature+0x176>
	else if (temperature > temperature_max)
 80017a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017a4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017a8:	f7ff f91e 	bl	80009e8 <__aeabi_dcmpgt>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <compensate_temperature+0x176>
		temperature = temperature_max;
 80017b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017b6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return temperature;
 80017ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	3730      	adds	r7, #48	; 0x30
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bdb0      	pop	{r4, r5, r7, pc}
 80017c8:	c0440000 	.word	0xc0440000
 80017cc:	40554000 	.word	0x40554000
 80017d0:	40d00000 	.word	0x40d00000
 80017d4:	40900000 	.word	0x40900000
 80017d8:	40c00000 	.word	0x40c00000
 80017dc:	40b40000 	.word	0x40b40000

080017e0 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 80017e0:	b5b0      	push	{r4, r5, r7, lr}
 80017e2:	b08e      	sub	sp, #56	; 0x38
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double var3;
	double pressure;
	double pressure_min = 30000.0;
 80017ea:	a3c7      	add	r3, pc, #796	; (adr r3, 8001b08 <compensate_pressure+0x328>)
 80017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double pressure_max = 110000.0;
 80017f4:	a3c6      	add	r3, pc, #792	; (adr r3, 8001b10 <compensate_pressure+0x330>)
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	e9c7 2308 	strd	r2, r3, [r7, #32]

	var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fdf6 	bl	80003f4 <__aeabi_i2d>
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001810:	f7fe ff84 	bl	800071c <__aeabi_ddiv>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	4bbf      	ldr	r3, [pc, #764]	; (8001b20 <compensate_pressure+0x340>)
 8001822:	f7fe fc99 	bl	8000158 <__aeabi_dsub>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 800182e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001832:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001836:	f7fe fe47 	bl	80004c8 <__aeabi_dmul>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4614      	mov	r4, r2
 8001840:	461d      	mov	r5, r3
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fdd3 	bl	80003f4 <__aeabi_i2d>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4620      	mov	r0, r4
 8001854:	4629      	mov	r1, r5
 8001856:	f7fe fe37 	bl	80004c8 <__aeabi_dmul>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	4baf      	ldr	r3, [pc, #700]	; (8001b24 <compensate_pressure+0x344>)
 8001868:	f7fe ff58 	bl	800071c <__aeabi_ddiv>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fdba 	bl	80003f4 <__aeabi_i2d>
 8001880:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001884:	f7fe fe20 	bl	80004c8 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	f7fe fc62 	bl	800015c <__adddf3>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018a0:	f7fe fc5c 	bl	800015c <__adddf3>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	4b9d      	ldr	r3, [pc, #628]	; (8001b28 <compensate_pressure+0x348>)
 80018b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018b6:	f7fe ff31 	bl	800071c <__aeabi_ddiv>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4614      	mov	r4, r2
 80018c0:	461d      	mov	r5, r3
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fd93 	bl	80003f4 <__aeabi_i2d>
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	4b96      	ldr	r3, [pc, #600]	; (8001b2c <compensate_pressure+0x34c>)
 80018d4:	f7fe fdf8 	bl	80004c8 <__aeabi_dmul>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4620      	mov	r0, r4
 80018de:	4629      	mov	r1, r5
 80018e0:	f7fe fc3c 	bl	800015c <__adddf3>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fd7e 	bl	80003f4 <__aeabi_i2d>
 80018f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018fc:	f7fe fde4 	bl	80004c8 <__aeabi_dmul>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800190c:	f7fe fddc 	bl	80004c8 <__aeabi_dmul>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	4b84      	ldr	r3, [pc, #528]	; (8001b30 <compensate_pressure+0x350>)
 800191e:	f7fe fefd 	bl	800071c <__aeabi_ddiv>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fd5f 	bl	80003f4 <__aeabi_i2d>
 8001936:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800193a:	f7fe fdc5 	bl	80004c8 <__aeabi_dmul>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800194a:	f7fe fc07 	bl	800015c <__adddf3>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4610      	mov	r0, r2
 8001954:	4619      	mov	r1, r3
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	4b75      	ldr	r3, [pc, #468]	; (8001b30 <compensate_pressure+0x350>)
 800195c:	f7fe fede 	bl	800071c <__aeabi_ddiv>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	4b6d      	ldr	r3, [pc, #436]	; (8001b24 <compensate_pressure+0x344>)
 800196e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001972:	f7fe fed3 	bl	800071c <__aeabi_ddiv>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4610      	mov	r0, r2
 800197c:	4619      	mov	r1, r3
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	4b6c      	ldr	r3, [pc, #432]	; (8001b34 <compensate_pressure+0x354>)
 8001984:	f7fe fbea 	bl	800015c <__adddf3>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4614      	mov	r4, r2
 800198e:	461d      	mov	r5, r3
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	88db      	ldrh	r3, [r3, #6]
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fd1d 	bl	80003d4 <__aeabi_ui2d>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4620      	mov	r0, r4
 80019a0:	4629      	mov	r1, r5
 80019a2:	f7fe fd91 	bl	80004c8 <__aeabi_dmul>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* avoid exception caused by division by zero */
	if (var1) {
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019ba:	f7fe ffed 	bl	8000998 <__aeabi_dcmpeq>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f040 80cf 	bne.w	8001b64 <compensate_pressure+0x384>
		pressure = 1048576.0 - (double) uncomp_data->pressure;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fd02 	bl	80003d4 <__aeabi_ui2d>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	f04f 0000 	mov.w	r0, #0
 80019d8:	4957      	ldr	r1, [pc, #348]	; (8001b38 <compensate_pressure+0x358>)
 80019da:	f7fe fbbd 	bl	8000158 <__aeabi_dsub>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	4b54      	ldr	r3, [pc, #336]	; (8001b3c <compensate_pressure+0x35c>)
 80019ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019f0:	f7fe fe94 	bl	800071c <__aeabi_ddiv>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80019fc:	f7fe fbac 	bl	8000158 <__aeabi_dsub>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	a343      	add	r3, pc, #268	; (adr r3, 8001b18 <compensate_pressure+0x338>)
 8001a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0e:	f7fe fd5b 	bl	80004c8 <__aeabi_dmul>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a1e:	f7fe fe7d 	bl	800071c <__aeabi_ddiv>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fcdf 	bl	80003f4 <__aeabi_i2d>
 8001a36:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001a3a:	f7fe fd45 	bl	80004c8 <__aeabi_dmul>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001a4a:	f7fe fd3d 	bl	80004c8 <__aeabi_dmul>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	4b39      	ldr	r3, [pc, #228]	; (8001b40 <compensate_pressure+0x360>)
 8001a5c:	f7fe fe5e 	bl	800071c <__aeabi_ddiv>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	e9c7 2306 	strd	r2, r3, [r7, #24]
		var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fcc0 	bl	80003f4 <__aeabi_i2d>
 8001a74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001a78:	f7fe fd26 	bl	80004c8 <__aeabi_dmul>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4610      	mov	r0, r2
 8001a82:	4619      	mov	r1, r3
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <compensate_pressure+0x344>)
 8001a8a:	f7fe fe47 	bl	800071c <__aeabi_ddiv>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	e9c7 2304 	strd	r2, r3, [r7, #16]
		pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 8001a96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a9e:	f7fe fb5d 	bl	800015c <__adddf3>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4614      	mov	r4, r2
 8001aa8:	461d      	mov	r5, r3
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fc9f 	bl	80003f4 <__aeabi_i2d>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4620      	mov	r0, r4
 8001abc:	4629      	mov	r1, r5
 8001abe:	f7fe fb4d 	bl	800015c <__adddf3>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <compensate_pressure+0x364>)
 8001ad0:	f7fe fe24 	bl	800071c <__aeabi_ddiv>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001adc:	f7fe fb3e 	bl	800015c <__adddf3>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		if (pressure < pressure_min)
 8001ae8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001aec:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001af0:	f7fe ff5c 	bl	80009ac <__aeabi_dcmplt>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d026      	beq.n	8001b48 <compensate_pressure+0x368>
			pressure = pressure_min;
 8001afa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001afe:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001b02:	e033      	b.n	8001b6c <compensate_pressure+0x38c>
 8001b04:	f3af 8000 	nop.w
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	40dd4c00 	.word	0x40dd4c00
 8001b10:	00000000 	.word	0x00000000
 8001b14:	40fadb00 	.word	0x40fadb00
 8001b18:	00000000 	.word	0x00000000
 8001b1c:	40b86a00 	.word	0x40b86a00
 8001b20:	40ef4000 	.word	0x40ef4000
 8001b24:	40e00000 	.word	0x40e00000
 8001b28:	40100000 	.word	0x40100000
 8001b2c:	40f00000 	.word	0x40f00000
 8001b30:	41200000 	.word	0x41200000
 8001b34:	3ff00000 	.word	0x3ff00000
 8001b38:	41300000 	.word	0x41300000
 8001b3c:	40b00000 	.word	0x40b00000
 8001b40:	41e00000 	.word	0x41e00000
 8001b44:	40300000 	.word	0x40300000
		else if (pressure > pressure_max)
 8001b48:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b4c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b50:	f7fe ff4a 	bl	80009e8 <__aeabi_dcmpgt>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d008      	beq.n	8001b6c <compensate_pressure+0x38c>
			pressure = pressure_max;
 8001b5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001b62:	e003      	b.n	8001b6c <compensate_pressure+0x38c>
	} else { /* Invalid case */
		pressure = pressure_min;
 8001b64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b68:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	return pressure;
 8001b6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
}
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	3738      	adds	r7, #56	; 0x38
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bdb0      	pop	{r4, r5, r7, pc}
 8001b7a:	bf00      	nop

08001b7c <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001b7c:	b5b0      	push	{r4, r5, r7, lr}
 8001b7e:	b094      	sub	sp, #80	; 0x50
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
	double humidity;
	double humidity_min = 0.0;
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double humidity_max = 100.0;
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	4b7f      	ldr	r3, [pc, #508]	; (8001d94 <compensate_humidity+0x218>)
 8001b98:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double var3;
	double var4;
	double var5;
	double var6;

	var1 = ((double)calib_data->t_fine) - 76800.0;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fc27 	bl	80003f4 <__aeabi_i2d>
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	4b7b      	ldr	r3, [pc, #492]	; (8001d98 <compensate_humidity+0x21c>)
 8001bac:	f7fe fad4 	bl	8000158 <__aeabi_dsub>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fc18 	bl	80003f4 <__aeabi_i2d>
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	4b74      	ldr	r3, [pc, #464]	; (8001d9c <compensate_humidity+0x220>)
 8001bca:	f7fe fc7d 	bl	80004c8 <__aeabi_dmul>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4614      	mov	r4, r2
 8001bd4:	461d      	mov	r5, r3
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fc09 	bl	80003f4 <__aeabi_i2d>
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	4b6e      	ldr	r3, [pc, #440]	; (8001da0 <compensate_humidity+0x224>)
 8001be8:	f7fe fd98 	bl	800071c <__aeabi_ddiv>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001bf8:	f7fe fc66 	bl	80004c8 <__aeabi_dmul>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4620      	mov	r0, r4
 8001c02:	4629      	mov	r1, r5
 8001c04:	f7fe faaa 	bl	800015c <__adddf3>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = uncomp_data->humidity - var2;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fbdd 	bl	80003d4 <__aeabi_ui2d>
 8001c1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c1e:	f7fe fa9b 	bl	8000158 <__aeabi_dsub>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var4 = ((double)calib_data->dig_H2) / 65536.0;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fbdf 	bl	80003f4 <__aeabi_i2d>
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	4b5a      	ldr	r3, [pc, #360]	; (8001da4 <compensate_humidity+0x228>)
 8001c3c:	f7fe fd6e 	bl	800071c <__aeabi_ddiv>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	7f1b      	ldrb	r3, [r3, #28]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe fbc1 	bl	80003d4 <__aeabi_ui2d>
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	4b54      	ldr	r3, [pc, #336]	; (8001da8 <compensate_humidity+0x22c>)
 8001c58:	f7fe fd60 	bl	800071c <__aeabi_ddiv>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4610      	mov	r0, r2
 8001c62:	4619      	mov	r1, r3
 8001c64:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c68:	f7fe fc2e 	bl	80004c8 <__aeabi_dmul>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	4b4c      	ldr	r3, [pc, #304]	; (8001dac <compensate_humidity+0x230>)
 8001c7a:	f7fe fa6f 	bl	800015c <__adddf3>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fbb1 	bl	80003f4 <__aeabi_i2d>
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	4b44      	ldr	r3, [pc, #272]	; (8001da8 <compensate_humidity+0x22c>)
 8001c98:	f7fe fd40 	bl	800071c <__aeabi_ddiv>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ca8:	f7fe fc0e 	bl	80004c8 <__aeabi_dmul>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cb8:	f7fe fc06 	bl	80004c8 <__aeabi_dmul>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	4b38      	ldr	r3, [pc, #224]	; (8001dac <compensate_humidity+0x230>)
 8001cca:	f7fe fa47 	bl	800015c <__adddf3>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var6 = var3 * var4 * (var5 * var6);
 8001cd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cda:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cde:	f7fe fbf3 	bl	80004c8 <__aeabi_dmul>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4614      	mov	r4, r2
 8001ce8:	461d      	mov	r5, r3
 8001cea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cf2:	f7fe fbe9 	bl	80004c8 <__aeabi_dmul>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	4629      	mov	r1, r5
 8001cfe:	f7fe fbe3 	bl	80004c8 <__aeabi_dmul>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	e9c7 2302 	strd	r2, r3, [r7, #8]
	humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	7e1b      	ldrb	r3, [r3, #24]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fb60 	bl	80003d4 <__aeabi_ui2d>
 8001d14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d18:	f7fe fbd6 	bl	80004c8 <__aeabi_dmul>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <compensate_humidity+0x234>)
 8001d2a:	f7fe fcf7 	bl	800071c <__aeabi_ddiv>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	f04f 0000 	mov.w	r0, #0
 8001d36:	491d      	ldr	r1, [pc, #116]	; (8001dac <compensate_humidity+0x230>)
 8001d38:	f7fe fa0e 	bl	8000158 <__aeabi_dsub>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d44:	f7fe fbc0 	bl	80004c8 <__aeabi_dmul>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (humidity > humidity_max)
 8001d50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d54:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001d58:	f7fe fe46 	bl	80009e8 <__aeabi_dcmpgt>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d004      	beq.n	8001d6c <compensate_humidity+0x1f0>
		humidity = humidity_max;
 8001d62:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d66:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001d6a:	e00c      	b.n	8001d86 <compensate_humidity+0x20a>
	else if (humidity < humidity_min)
 8001d6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d70:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001d74:	f7fe fe1a 	bl	80009ac <__aeabi_dcmplt>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <compensate_humidity+0x20a>
		humidity = humidity_min;
 8001d7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d82:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	return humidity;
 8001d86:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
}
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	3750      	adds	r7, #80	; 0x50
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bdb0      	pop	{r4, r5, r7, pc}
 8001d94:	40590000 	.word	0x40590000
 8001d98:	40f2c000 	.word	0x40f2c000
 8001d9c:	40500000 	.word	0x40500000
 8001da0:	40d00000 	.word	0x40d00000
 8001da4:	40f00000 	.word	0x40f00000
 8001da8:	41900000 	.word	0x41900000
 8001dac:	3ff00000 	.word	0x3ff00000
 8001db0:	41200000 	.word	0x41200000

08001db4 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	; 0x28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8001dbc:	2388      	movs	r3, #136	; 0x88
 8001dbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	f107 0310 	add.w	r3, r7, #16
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
 8001dd4:	611a      	str	r2, [r3, #16]
 8001dd6:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8001dd8:	f107 010c 	add.w	r1, r7, #12
 8001ddc:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	221a      	movs	r2, #26
 8001de4:	f7fe ffd7 	bl	8000d96 <bme280_get_regs>
 8001de8:	4603      	mov	r3, r0
 8001dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 8001dee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d11d      	bne.n	8001e32 <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 8001df6:	f107 030c 	add.w	r3, r7, #12
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 f849 	bl	8001e94 <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8001e02:	23e1      	movs	r3, #225	; 0xe1
 8001e04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8001e08:	f107 010c 	add.w	r1, r7, #12
 8001e0c:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2207      	movs	r2, #7
 8001e14:	f7fe ffbf 	bl	8000d96 <bme280_get_regs>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8001e1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d105      	bne.n	8001e32 <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 f8df 	bl	8001ff0 <parse_humidity_calib_data>
		}
	}

	return rslt;
 8001e32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3728      	adds	r7, #40	; 0x28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b087      	sub	sp, #28
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
 8001e4a:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	75fb      	strb	r3, [r7, #23]
 8001e50:	e016      	b.n	8001e80 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 8001e52:	7dfb      	ldrb	r3, [r7, #23]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	441a      	add	r2, r3
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	68b9      	ldr	r1, [r7, #8]
 8001e60:	440b      	add	r3, r1
 8001e62:	7812      	ldrb	r2, [r2, #0]
 8001e64:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 8001e66:	7dfb      	ldrb	r3, [r7, #23]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	441a      	add	r2, r3
 8001e6c:	7dfb      	ldrb	r3, [r7, #23]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4619      	mov	r1, r3
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	440b      	add	r3, r1
 8001e76:	7812      	ldrb	r2, [r2, #0]
 8001e78:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 8001e7a:	7dfb      	ldrb	r3, [r7, #23]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	75fb      	strb	r3, [r7, #23]
 8001e80:	7dfa      	ldrb	r2, [r7, #23]
 8001e82:	78fb      	ldrb	r3, [r7, #3]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d3e4      	bcc.n	8001e52 <interleave_reg_addr+0x14>
	}
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	371c      	adds	r7, #28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	3310      	adds	r3, #16
 8001ea2:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	b21a      	sxth	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	b21b      	sxth	r3, r3
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	b21b      	sxth	r3, r3
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3303      	adds	r3, #3
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	021b      	lsls	r3, r3, #8
 8001ec6:	b21a      	sxth	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3302      	adds	r3, #2
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	b21b      	sxth	r3, r3
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	b21a      	sxth	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3305      	adds	r3, #5
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	b21a      	sxth	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	b21b      	sxth	r3, r3
 8001eea:	4313      	orrs	r3, r2
 8001eec:	b21a      	sxth	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3307      	adds	r3, #7
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	021b      	lsls	r3, r3, #8
 8001efa:	b21a      	sxth	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3306      	adds	r3, #6
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	b21b      	sxth	r3, r3
 8001f04:	4313      	orrs	r3, r2
 8001f06:	b21b      	sxth	r3, r3
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3309      	adds	r3, #9
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	021b      	lsls	r3, r3, #8
 8001f16:	b21a      	sxth	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3308      	adds	r3, #8
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	b21b      	sxth	r3, r3
 8001f20:	4313      	orrs	r3, r2
 8001f22:	b21a      	sxth	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	330b      	adds	r3, #11
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	021b      	lsls	r3, r3, #8
 8001f30:	b21a      	sxth	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	330a      	adds	r3, #10
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	b21b      	sxth	r3, r3
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	b21a      	sxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	330d      	adds	r3, #13
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	021b      	lsls	r3, r3, #8
 8001f4a:	b21a      	sxth	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	330c      	adds	r3, #12
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	b21b      	sxth	r3, r3
 8001f54:	4313      	orrs	r3, r2
 8001f56:	b21a      	sxth	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	330f      	adds	r3, #15
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	021b      	lsls	r3, r3, #8
 8001f64:	b21a      	sxth	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	330e      	adds	r3, #14
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	b21b      	sxth	r3, r3
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	b21a      	sxth	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3311      	adds	r3, #17
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	b21a      	sxth	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3310      	adds	r3, #16
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	b21b      	sxth	r3, r3
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	b21a      	sxth	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3313      	adds	r3, #19
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	021b      	lsls	r3, r3, #8
 8001f98:	b21a      	sxth	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3312      	adds	r3, #18
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	b21a      	sxth	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3315      	adds	r3, #21
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	b21a      	sxth	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3314      	adds	r3, #20
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	b21b      	sxth	r3, r3
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	b21a      	sxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3317      	adds	r3, #23
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	021b      	lsls	r3, r3, #8
 8001fcc:	b21a      	sxth	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3316      	adds	r3, #22
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	b21a      	sxth	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	7e5a      	ldrb	r2, [r3, #25]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	761a      	strb	r2, [r3, #24]

}
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	3310      	adds	r3, #16
 8001ffe:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3301      	adds	r3, #1
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	b21a      	sxth	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	b21b      	sxth	r3, r3
 8002010:	4313      	orrs	r3, r2
 8002012:	b21a      	sxth	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	789a      	ldrb	r2, [r3, #2]
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3303      	adds	r3, #3
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	b25b      	sxtb	r3, r3
 8002028:	b29b      	uxth	r3, r3
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	b29b      	uxth	r3, r3
 800202e:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3304      	adds	r3, #4
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	b21b      	sxth	r3, r3
 8002038:	f003 030f 	and.w	r3, r3, #15
 800203c:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 800203e:	8a7a      	ldrh	r2, [r7, #18]
 8002040:	8a3b      	ldrh	r3, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	b21a      	sxth	r2, r3
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3305      	adds	r3, #5
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	b25b      	sxtb	r3, r3
 8002052:	b29b      	uxth	r3, r3
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	b29b      	uxth	r3, r3
 8002058:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3304      	adds	r3, #4
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	b2db      	uxtb	r3, r3
 8002064:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8002066:	89fa      	ldrh	r2, [r7, #14]
 8002068:	89bb      	ldrh	r3, [r7, #12]
 800206a:	4313      	orrs	r3, r2
 800206c:	b21a      	sxth	r2, r3
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3306      	adds	r3, #6
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	b25a      	sxtb	r2, r3
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8002080:	bf00      	nop
 8002082:	371c      	adds	r7, #28
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr

0800208a <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 800208a:	b480      	push	{r7}
 800208c:	b085      	sub	sp, #20
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	460a      	mov	r2, r1
 8002094:	71fb      	strb	r3, [r7, #7]
 8002096:	4613      	mov	r3, r2
 8002098:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 800209a:	2300      	movs	r3, #0
 800209c:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 800209e:	79fa      	ldrb	r2, [r7, #7]
 80020a0:	79bb      	ldrb	r3, [r7, #6]
 80020a2:	4013      	ands	r3, r2
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 80020aa:	2301      	movs	r3, #1
 80020ac:	73fb      	strb	r3, [r7, #15]
 80020ae:	e001      	b.n	80020b4 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00b      	beq.n	80020e6 <null_ptr_check+0x26>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <null_ptr_check+0x26>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <null_ptr_check+0x26>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d102      	bne.n	80020ec <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 80020e6:	23ff      	movs	r3, #255	; 0xff
 80020e8:	73fb      	strb	r3, [r7, #15]
 80020ea:	e001      	b.n	80020f0 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 80020ec:	2300      	movs	r3, #0
 80020ee:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80020f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr
	...

08002100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002104:	f000 fe14 	bl	8002d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002108:	f000 f848 	bl	800219c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800210c:	f000 f91e 	bl	800234c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002110:	f000 f88a 	bl	8002228 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002114:	f000 f8b6 	bl	8002284 <MX_I2C2_Init>
  MX_SPI2_Init();
 8002118:	f000 f8e2 	bl	80022e0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800211c:	2200      	movs	r2, #0
 800211e:	2101      	movs	r1, #1
 8002120:	4814      	ldr	r0, [pc, #80]	; (8002174 <main+0x74>)
 8002122:	f001 f8bf 	bl	80032a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8002126:	2200      	movs	r2, #0
 8002128:	2102      	movs	r1, #2
 800212a:	4812      	ldr	r0, [pc, #72]	; (8002174 <main+0x74>)
 800212c:	f001 f8ba 	bl	80032a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);  /* USER CODE END 2 */
 8002130:	2200      	movs	r2, #0
 8002132:	2104      	movs	r1, #4
 8002134:	480f      	ldr	r0, [pc, #60]	; (8002174 <main+0x74>)
 8002136:	f001 f8b5 	bl	80032a4 <HAL_GPIO_WritePin>

  /* Init scheduler */
  osKernelInitialize();
 800213a:	f003 fe73 	bl	8005e24 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Pressure_Unit */
  Pressure_UnitHandle = osThreadNew(Pressure_Unit_Start, NULL, &Pressure_Unit_attributes);
 800213e:	4a0e      	ldr	r2, [pc, #56]	; (8002178 <main+0x78>)
 8002140:	2100      	movs	r1, #0
 8002142:	480e      	ldr	r0, [pc, #56]	; (800217c <main+0x7c>)
 8002144:	f003 fed4 	bl	8005ef0 <osThreadNew>
 8002148:	4603      	mov	r3, r0
 800214a:	4a0d      	ldr	r2, [pc, #52]	; (8002180 <main+0x80>)
 800214c:	6013      	str	r3, [r2, #0]

  /* creation of Inertial_Unit */
  Inertial_UnitHandle = osThreadNew(Inertial_Unit_Start, NULL, &Inertial_Unit_attributes);
 800214e:	4a0d      	ldr	r2, [pc, #52]	; (8002184 <main+0x84>)
 8002150:	2100      	movs	r1, #0
 8002152:	480d      	ldr	r0, [pc, #52]	; (8002188 <main+0x88>)
 8002154:	f003 fecc 	bl	8005ef0 <osThreadNew>
 8002158:	4603      	mov	r3, r0
 800215a:	4a0c      	ldr	r2, [pc, #48]	; (800218c <main+0x8c>)
 800215c:	6013      	str	r3, [r2, #0]

  /* creation of Decision_Log */
  Decision_LogHandle = osThreadNew(Decision_and_Logger, NULL, &Decision_Log_attributes);
 800215e:	4a0c      	ldr	r2, [pc, #48]	; (8002190 <main+0x90>)
 8002160:	2100      	movs	r1, #0
 8002162:	480c      	ldr	r0, [pc, #48]	; (8002194 <main+0x94>)
 8002164:	f003 fec4 	bl	8005ef0 <osThreadNew>
 8002168:	4603      	mov	r3, r0
 800216a:	4a0b      	ldr	r2, [pc, #44]	; (8002198 <main+0x98>)
 800216c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800216e:	f003 fe8b 	bl	8005e88 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002172:	e7fe      	b.n	8002172 <main+0x72>
 8002174:	40010800 	.word	0x40010800
 8002178:	0800ac78 	.word	0x0800ac78
 800217c:	08002641 	.word	0x08002641
 8002180:	20001a60 	.word	0x20001a60
 8002184:	0800ac9c 	.word	0x0800ac9c
 8002188:	080026c9 	.word	0x080026c9
 800218c:	20001ba0 	.word	0x20001ba0
 8002190:	0800acc0 	.word	0x0800acc0
 8002194:	08002791 	.word	0x08002791
 8002198:	20001ba4 	.word	0x20001ba4

0800219c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b090      	sub	sp, #64	; 0x40
 80021a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021a2:	f107 0318 	add.w	r3, r7, #24
 80021a6:	2228      	movs	r2, #40	; 0x28
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f006 fb46 	bl	800883c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	60da      	str	r2, [r3, #12]
 80021bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021be:	2301      	movs	r3, #1
 80021c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80021c8:	2300      	movs	r3, #0
 80021ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021cc:	2301      	movs	r3, #1
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021d0:	2302      	movs	r3, #2
 80021d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80021de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021e0:	f107 0318 	add.w	r3, r7, #24
 80021e4:	4618      	mov	r0, r3
 80021e6:	f002 fd23 	bl	8004c30 <HAL_RCC_OscConfig>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80021f0:	f000 fb72 	bl	80028d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021f4:	230f      	movs	r3, #15
 80021f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021f8:	2302      	movs	r3, #2
 80021fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002204:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	2102      	movs	r1, #2
 800220e:	4618      	mov	r0, r3
 8002210:	f002 ff8e 	bl	8005130 <HAL_RCC_ClockConfig>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800221a:	f000 fb5d 	bl	80028d8 <Error_Handler>
  }
}
 800221e:	bf00      	nop
 8002220:	3740      	adds	r7, #64	; 0x40
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800222c:	4b12      	ldr	r3, [pc, #72]	; (8002278 <MX_I2C1_Init+0x50>)
 800222e:	4a13      	ldr	r2, [pc, #76]	; (800227c <MX_I2C1_Init+0x54>)
 8002230:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <MX_I2C1_Init+0x50>)
 8002234:	4a12      	ldr	r2, [pc, #72]	; (8002280 <MX_I2C1_Init+0x58>)
 8002236:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002238:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <MX_I2C1_Init+0x50>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <MX_I2C1_Init+0x50>)
 8002240:	2200      	movs	r2, #0
 8002242:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <MX_I2C1_Init+0x50>)
 8002246:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800224a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800224c:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <MX_I2C1_Init+0x50>)
 800224e:	2200      	movs	r2, #0
 8002250:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <MX_I2C1_Init+0x50>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002258:	4b07      	ldr	r3, [pc, #28]	; (8002278 <MX_I2C1_Init+0x50>)
 800225a:	2200      	movs	r2, #0
 800225c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <MX_I2C1_Init+0x50>)
 8002260:	2200      	movs	r2, #0
 8002262:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002264:	4804      	ldr	r0, [pc, #16]	; (8002278 <MX_I2C1_Init+0x50>)
 8002266:	f001 f835 	bl	80032d4 <HAL_I2C_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002270:	f000 fb32 	bl	80028d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}
 8002278:	200019cc 	.word	0x200019cc
 800227c:	40005400 	.word	0x40005400
 8002280:	000186a0 	.word	0x000186a0

08002284 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <MX_I2C2_Init+0x50>)
 800228a:	4a13      	ldr	r2, [pc, #76]	; (80022d8 <MX_I2C2_Init+0x54>)
 800228c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800228e:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <MX_I2C2_Init+0x50>)
 8002290:	4a12      	ldr	r2, [pc, #72]	; (80022dc <MX_I2C2_Init+0x58>)
 8002292:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002294:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <MX_I2C2_Init+0x50>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800229a:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <MX_I2C2_Init+0x50>)
 800229c:	2200      	movs	r2, #0
 800229e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <MX_I2C2_Init+0x50>)
 80022a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022a6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022a8:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <MX_I2C2_Init+0x50>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <MX_I2C2_Init+0x50>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022b4:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <MX_I2C2_Init+0x50>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <MX_I2C2_Init+0x50>)
 80022bc:	2200      	movs	r2, #0
 80022be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80022c0:	4804      	ldr	r0, [pc, #16]	; (80022d4 <MX_I2C2_Init+0x50>)
 80022c2:	f001 f807 	bl	80032d4 <HAL_I2C_Init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80022cc:	f000 fb04 	bl	80028d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20001ae8 	.word	0x20001ae8
 80022d8:	40005800 	.word	0x40005800
 80022dc:	00061a80 	.word	0x00061a80

080022e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80022e4:	4b17      	ldr	r3, [pc, #92]	; (8002344 <MX_SPI2_Init+0x64>)
 80022e6:	4a18      	ldr	r2, [pc, #96]	; (8002348 <MX_SPI2_Init+0x68>)
 80022e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80022ea:	4b16      	ldr	r3, [pc, #88]	; (8002344 <MX_SPI2_Init+0x64>)
 80022ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80022f2:	4b14      	ldr	r3, [pc, #80]	; (8002344 <MX_SPI2_Init+0x64>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <MX_SPI2_Init+0x64>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <MX_SPI2_Init+0x64>)
 8002300:	2200      	movs	r2, #0
 8002302:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <MX_SPI2_Init+0x64>)
 8002306:	2200      	movs	r2, #0
 8002308:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800230a:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <MX_SPI2_Init+0x64>)
 800230c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002310:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002312:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <MX_SPI2_Init+0x64>)
 8002314:	2218      	movs	r2, #24
 8002316:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002318:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <MX_SPI2_Init+0x64>)
 800231a:	2200      	movs	r2, #0
 800231c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800231e:	4b09      	ldr	r3, [pc, #36]	; (8002344 <MX_SPI2_Init+0x64>)
 8002320:	2200      	movs	r2, #0
 8002322:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002324:	4b07      	ldr	r3, [pc, #28]	; (8002344 <MX_SPI2_Init+0x64>)
 8002326:	2200      	movs	r2, #0
 8002328:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <MX_SPI2_Init+0x64>)
 800232c:	220a      	movs	r2, #10
 800232e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002330:	4804      	ldr	r0, [pc, #16]	; (8002344 <MX_SPI2_Init+0x64>)
 8002332:	f003 f8c7 	bl	80054c4 <HAL_SPI_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800233c:	f000 facc 	bl	80028d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20001a64 	.word	0x20001a64
 8002348:	40003800 	.word	0x40003800

0800234c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002352:	f107 0310 	add.w	r3, r7, #16
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002360:	4b23      	ldr	r3, [pc, #140]	; (80023f0 <MX_GPIO_Init+0xa4>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	4a22      	ldr	r2, [pc, #136]	; (80023f0 <MX_GPIO_Init+0xa4>)
 8002366:	f043 0310 	orr.w	r3, r3, #16
 800236a:	6193      	str	r3, [r2, #24]
 800236c:	4b20      	ldr	r3, [pc, #128]	; (80023f0 <MX_GPIO_Init+0xa4>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0310 	and.w	r3, r3, #16
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002378:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <MX_GPIO_Init+0xa4>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	4a1c      	ldr	r2, [pc, #112]	; (80023f0 <MX_GPIO_Init+0xa4>)
 800237e:	f043 0320 	orr.w	r3, r3, #32
 8002382:	6193      	str	r3, [r2, #24]
 8002384:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <MX_GPIO_Init+0xa4>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f003 0320 	and.w	r3, r3, #32
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002390:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <MX_GPIO_Init+0xa4>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	4a16      	ldr	r2, [pc, #88]	; (80023f0 <MX_GPIO_Init+0xa4>)
 8002396:	f043 0304 	orr.w	r3, r3, #4
 800239a:	6193      	str	r3, [r2, #24]
 800239c:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <MX_GPIO_Init+0xa4>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <MX_GPIO_Init+0xa4>)
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	4a10      	ldr	r2, [pc, #64]	; (80023f0 <MX_GPIO_Init+0xa4>)
 80023ae:	f043 0308 	orr.w	r3, r3, #8
 80023b2:	6193      	str	r3, [r2, #24]
 80023b4:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <MX_GPIO_Init+0xa4>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80023c0:	2200      	movs	r2, #0
 80023c2:	2107      	movs	r1, #7
 80023c4:	480b      	ldr	r0, [pc, #44]	; (80023f4 <MX_GPIO_Init+0xa8>)
 80023c6:	f000 ff6d 	bl	80032a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80023ca:	2307      	movs	r3, #7
 80023cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ce:	2301      	movs	r3, #1
 80023d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2302      	movs	r3, #2
 80023d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023da:	f107 0310 	add.w	r3, r7, #16
 80023de:	4619      	mov	r1, r3
 80023e0:	4804      	ldr	r0, [pc, #16]	; (80023f4 <MX_GPIO_Init+0xa8>)
 80023e2:	f000 fddb 	bl	8002f9c <HAL_GPIO_Init>

}
 80023e6:	bf00      	nop
 80023e8:	3720      	adds	r7, #32
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40010800 	.word	0x40010800

080023f8 <my_print_readings>:
/* USER CODE BEGIN 4 */



void my_print_readings(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
int8_t rslt = BME280_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	71fb      	strb	r3, [r7, #7]
bme280.dev_id = BME280_I2C_ADDR_SEC;
 8002402:	4b12      	ldr	r3, [pc, #72]	; (800244c <my_print_readings+0x54>)
 8002404:	2277      	movs	r2, #119	; 0x77
 8002406:	705a      	strb	r2, [r3, #1]
bme280.intf = BME280_I2C_INTF;
 8002408:	4b10      	ldr	r3, [pc, #64]	; (800244c <my_print_readings+0x54>)
 800240a:	2201      	movs	r2, #1
 800240c:	709a      	strb	r2, [r3, #2]
bme280.read = (void *)user_i2c_read;
 800240e:	4b0f      	ldr	r3, [pc, #60]	; (800244c <my_print_readings+0x54>)
 8002410:	4a0f      	ldr	r2, [pc, #60]	; (8002450 <my_print_readings+0x58>)
 8002412:	605a      	str	r2, [r3, #4]
bme280.write = (void *)user_i2c_write;
 8002414:	4b0d      	ldr	r3, [pc, #52]	; (800244c <my_print_readings+0x54>)
 8002416:	4a0f      	ldr	r2, [pc, #60]	; (8002454 <my_print_readings+0x5c>)
 8002418:	609a      	str	r2, [r3, #8]
bme280.delay_ms = (void *)user_delay_ms;
 800241a:	4b0c      	ldr	r3, [pc, #48]	; (800244c <my_print_readings+0x54>)
 800241c:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <my_print_readings+0x60>)
 800241e:	60da      	str	r2, [r3, #12]
rslt = bme280_init(&bme280);
 8002420:	480a      	ldr	r0, [pc, #40]	; (800244c <my_print_readings+0x54>)
 8002422:	f7fe fc6d 	bl	8000d00 <bme280_init>
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
printf("init result %d\r\n", rslt);
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	4619      	mov	r1, r3
 8002430:	480a      	ldr	r0, [pc, #40]	; (800245c <my_print_readings+0x64>)
 8002432:	f006 fa0b 	bl	800884c <iprintf>

printf("starting readings.\r\n");
 8002436:	480a      	ldr	r0, [pc, #40]	; (8002460 <my_print_readings+0x68>)
 8002438:	f006 fa8e 	bl	8008958 <puts>
stream_sensor_data_forced_mode(&bme280);
 800243c:	4803      	ldr	r0, [pc, #12]	; (800244c <my_print_readings+0x54>)
 800243e:	f000 f81b 	bl	8002478 <stream_sensor_data_forced_mode>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20001b50 	.word	0x20001b50
 8002450:	080025e5 	.word	0x080025e5
 8002454:	08002589 	.word	0x08002589
 8002458:	08002571 	.word	0x08002571
 800245c:	0800ac28 	.word	0x0800ac28
 8002460:	0800ac3c 	.word	0x0800ac3c

08002464 <print_sensor_data>:


void print_sensor_data(struct bme280_data *comp_data)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  #ifdef BME280_FLOAT_ENABLE

  #else

  #endif
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr
	...

08002478 <stream_sensor_data_forced_mode>:

int8_t stream_sensor_data_forced_mode(struct bme280_dev *dev)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
int8_t rslt;
uint8_t settings_sel;


dev->settings.osr_h = BME280_OVERSAMPLING_2X;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
dev->settings.osr_p = BME280_OVERSAMPLING_4X;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2203      	movs	r2, #3
 800248c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
dev->settings.osr_t = BME280_OVERSAMPLING_4X;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2203      	movs	r2, #3
 8002494:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
dev->settings.filter = BME280_FILTER_COEFF_2;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

settings_sel = BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL;
 80024a0:	230f      	movs	r3, #15
 80024a2:	73fb      	strb	r3, [r7, #15]

rslt = bme280_set_sensor_settings(settings_sel, dev);
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe fd1b 	bl	8000ee4 <bme280_set_sensor_settings>
 80024ae:	4603      	mov	r3, r0
 80024b0:	73bb      	strb	r3, [r7, #14]


/* Continuously stream sensor data */

  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, dev);
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	2001      	movs	r0, #1
 80024b6:	f7fe fd6a 	bl	8000f8e <bme280_set_sensor_mode>
 80024ba:	4603      	mov	r3, r0
 80024bc:	73bb      	strb	r3, [r7, #14]
  /* Wait for the measurement to complete and print data @25Hz */
  dev->delay_ms(30);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	201e      	movs	r0, #30
 80024c4:	4798      	blx	r3
  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, dev);
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	4925      	ldr	r1, [pc, #148]	; (8002560 <stream_sensor_data_forced_mode+0xe8>)
 80024ca:	2007      	movs	r0, #7
 80024cc:	f7fe fddb 	bl	8001086 <bme280_get_sensor_data>
 80024d0:	4603      	mov	r3, r0
 80024d2:	73bb      	strb	r3, [r7, #14]
  print_sensor_data(&comp_data);
 80024d4:	4822      	ldr	r0, [pc, #136]	; (8002560 <stream_sensor_data_forced_mode+0xe8>)
 80024d6:	f7ff ffc5 	bl	8002464 <print_sensor_data>
  pressure = comp_data.pressure;
 80024da:	4b21      	ldr	r3, [pc, #132]	; (8002560 <stream_sensor_data_forced_mode+0xe8>)
 80024dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e0:	4920      	ldr	r1, [pc, #128]	; (8002564 <stream_sensor_data_forced_mode+0xec>)
 80024e2:	e9c1 2300 	strd	r2, r3, [r1]
  altitude = (44330*(1-(pow((pressure/(float)atmPress), 0.19029495718))));
 80024e6:	4b1f      	ldr	r3, [pc, #124]	; (8002564 <stream_sensor_data_forced_mode+0xec>)
 80024e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024ec:	a316      	add	r3, pc, #88	; (adr r3, 8002548 <stream_sensor_data_forced_mode+0xd0>)
 80024ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f2:	f7fe f913 	bl	800071c <__aeabi_ddiv>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4610      	mov	r0, r2
 80024fc:	4619      	mov	r1, r3
 80024fe:	a314      	add	r3, pc, #80	; (adr r3, 8002550 <stream_sensor_data_forced_mode+0xd8>)
 8002500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002504:	f007 f97a 	bl	80097fc <pow>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	f04f 0000 	mov.w	r0, #0
 8002510:	4915      	ldr	r1, [pc, #84]	; (8002568 <stream_sensor_data_forced_mode+0xf0>)
 8002512:	f7fd fe21 	bl	8000158 <__aeabi_dsub>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4610      	mov	r0, r2
 800251c:	4619      	mov	r1, r3
 800251e:	a30e      	add	r3, pc, #56	; (adr r3, 8002558 <stream_sensor_data_forced_mode+0xe0>)
 8002520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002524:	f7fd ffd0 	bl	80004c8 <__aeabi_dmul>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	490f      	ldr	r1, [pc, #60]	; (800256c <stream_sensor_data_forced_mode+0xf4>)
 800252e:	e9c1 2300 	strd	r2, r3, [r1]
  dev->delay_ms(30);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	201e      	movs	r0, #30
 8002538:	4798      	blx	r3
  return rslt;
 800253a:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	00000000 	.word	0x00000000
 800254c:	40f8bcd0 	.word	0x40f8bcd0
 8002550:	ccd745e4 	.word	0xccd745e4
 8002554:	3fc85b95 	.word	0x3fc85b95
 8002558:	00000000 	.word	0x00000000
 800255c:	40e5a540 	.word	0x40e5a540
 8002560:	20001ac8 	.word	0x20001ac8
 8002564:	20001b40 	.word	0x20001b40
 8002568:	3ff00000 	.word	0x3ff00000
 800256c:	20001b90 	.word	0x20001b90

08002570 <user_delay_ms>:

return rslt;
}

void user_delay_ms(uint32_t ms)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
HAL_Delay(ms);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 fc0b 	bl	8002d94 <HAL_Delay>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <user_i2c_write>:

int8_t user_i2c_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t cnt)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af04      	add	r7, sp, #16
 800258e:	603a      	str	r2, [r7, #0]
 8002590:	461a      	mov	r2, r3
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
 8002596:	460b      	mov	r3, r1
 8002598:	71bb      	strb	r3, [r7, #6]
 800259a:	4613      	mov	r3, r2
 800259c:	717b      	strb	r3, [r7, #5]
HAL_StatusTypeDef status = HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	73fb      	strb	r3, [r7, #15]

status = HAL_I2C_Mem_Write(&hi2c2, dev_addr<<1, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, cnt, 0xffff);
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	b299      	uxth	r1, r3
 80025aa:	79bb      	ldrb	r3, [r7, #6]
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	797b      	ldrb	r3, [r7, #5]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80025b6:	9002      	str	r0, [sp, #8]
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2301      	movs	r3, #1
 80025c0:	4807      	ldr	r0, [pc, #28]	; (80025e0 <user_i2c_write+0x58>)
 80025c2:	f001 fb29 	bl	8003c18 <HAL_I2C_Mem_Write>
 80025c6:	4603      	mov	r3, r0
 80025c8:	73fb      	strb	r3, [r7, #15]

if (status == HAL_OK)
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <user_i2c_write+0x4c>
  return(0);
 80025d0:	2300      	movs	r3, #0
 80025d2:	e001      	b.n	80025d8 <user_i2c_write+0x50>
else
  return(-1);
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20001ae8 	.word	0x20001ae8

080025e4 <user_i2c_read>:

int8_t user_i2c_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t cnt)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af04      	add	r7, sp, #16
 80025ea:	603a      	str	r2, [r7, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	4603      	mov	r3, r0
 80025f0:	71fb      	strb	r3, [r7, #7]
 80025f2:	460b      	mov	r3, r1
 80025f4:	71bb      	strb	r3, [r7, #6]
 80025f6:	4613      	mov	r3, r2
 80025f8:	717b      	strb	r3, [r7, #5]
HAL_StatusTypeDef status = HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	73fb      	strb	r3, [r7, #15]

status = HAL_I2C_Mem_Read(&hi2c2, dev_addr<<1, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, cnt, 0xffff);
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	b29b      	uxth	r3, r3
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	b299      	uxth	r1, r3
 8002606:	79bb      	ldrb	r3, [r7, #6]
 8002608:	b29a      	uxth	r2, r3
 800260a:	797b      	ldrb	r3, [r7, #5]
 800260c:	b29b      	uxth	r3, r3
 800260e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002612:	9002      	str	r0, [sp, #8]
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	2301      	movs	r3, #1
 800261c:	4807      	ldr	r0, [pc, #28]	; (800263c <user_i2c_read+0x58>)
 800261e:	f001 fbf5 	bl	8003e0c <HAL_I2C_Mem_Read>
 8002622:	4603      	mov	r3, r0
 8002624:	73fb      	strb	r3, [r7, #15]

if (status == HAL_OK)
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <user_i2c_read+0x4c>
  return(0);
 800262c:	2300      	movs	r3, #0
 800262e:	e001      	b.n	8002634 <user_i2c_read+0x50>
else
  return(-1);
 8002630:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20001ae8 	.word	0x20001ae8

08002640 <Pressure_Unit_Start>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Pressure_Unit_Start */
void Pressure_Unit_Start(void *argument)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  my_print_readings();
 8002648:	f7ff fed6 	bl	80023f8 <my_print_readings>
  ref_altitude = altitude;
 800264c:	4b17      	ldr	r3, [pc, #92]	; (80026ac <Pressure_Unit_Start+0x6c>)
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	4917      	ldr	r1, [pc, #92]	; (80026b0 <Pressure_Unit_Start+0x70>)
 8002654:	e9c1 2300 	strd	r2, r3, [r1]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	my_print_readings();
 8002658:	f7ff fece 	bl	80023f8 <my_print_readings>
	related_altitude = altitude - ref_altitude;
 800265c:	4b13      	ldr	r3, [pc, #76]	; (80026ac <Pressure_Unit_Start+0x6c>)
 800265e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002662:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <Pressure_Unit_Start+0x70>)
 8002664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002668:	f7fd fd76 	bl	8000158 <__aeabi_dsub>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4910      	ldr	r1, [pc, #64]	; (80026b4 <Pressure_Unit_Start+0x74>)
 8002672:	e9c1 2300 	strd	r2, r3, [r1]
	sendaltitude = related_altitude/4;
 8002676:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <Pressure_Unit_Start+0x74>)
 8002678:	e9d3 0100 	ldrd	r0, r1, [r3]
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <Pressure_Unit_Start+0x78>)
 8002682:	f7fe f84b 	bl	800071c <__aeabi_ddiv>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4610      	mov	r0, r2
 800268c:	4619      	mov	r1, r3
 800268e:	f7fe f9f3 	bl	8000a78 <__aeabi_d2uiz>
 8002692:	4603      	mov	r3, r0
 8002694:	b2da      	uxtb	r2, r3
 8002696:	4b09      	ldr	r3, [pc, #36]	; (80026bc <Pressure_Unit_Start+0x7c>)
 8002698:	701a      	strb	r2, [r3, #0]
	sendbuff[1] = sendaltitude;
 800269a:	4b08      	ldr	r3, [pc, #32]	; (80026bc <Pressure_Unit_Start+0x7c>)
 800269c:	781a      	ldrb	r2, [r3, #0]
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <Pressure_Unit_Start+0x80>)
 80026a0:	705a      	strb	r2, [r3, #1]
    osDelay(1);
 80026a2:	2001      	movs	r0, #1
 80026a4:	f003 fcce 	bl	8006044 <osDelay>
	my_print_readings();
 80026a8:	e7d6      	b.n	8002658 <Pressure_Unit_Start+0x18>
 80026aa:	bf00      	nop
 80026ac:	20001b90 	.word	0x20001b90
 80026b0:	20001ac0 	.word	0x20001ac0
 80026b4:	20001b98 	.word	0x20001b98
 80026b8:	40100000 	.word	0x40100000
 80026bc:	20000094 	.word	0x20000094
 80026c0:	200000a4 	.word	0x200000a4
 80026c4:	00000000 	.word	0x00000000

080026c8 <Inertial_Unit_Start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Inertial_Unit_Start */
void Inertial_Unit_Start(void *argument)
{
 80026c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026cc:	b0a8      	sub	sp, #160	; 0xa0
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
	struct DPL Data;
	uint8_t buffer[24];
	}Packet;
  for(;;)
  {
    mpuReadSensor(&sensorData);
 80026d2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fa22 	bl	8000b20 <mpuReadSensor>
    Packet.Data.Data=sensorData;
 80026dc:	f107 040c 	add.w	r4, r7, #12
 80026e0:	f107 0588 	add.w	r5, r7, #136	; 0x88
 80026e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80026ec:	e884 0003 	stmia.w	r4, {r0, r1}
	ay=sensorData.ay;
 80026f0:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fd fe7d 	bl	80003f4 <__aeabi_i2d>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	491e      	ldr	r1, [pc, #120]	; (8002778 <Inertial_Unit_Start+0xb0>)
 8002700:	e9c1 2300 	strd	r2, r3, [r1]
	temp_send_y_axis_acc = ay/1683.5699797160243407707910750507;
 8002704:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <Inertial_Unit_Start+0xb0>)
 8002706:	e9d3 0100 	ldrd	r0, r1, [r3]
 800270a:	a319      	add	r3, pc, #100	; (adr r3, 8002770 <Inertial_Unit_Start+0xa8>)
 800270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002710:	f7fe f804 	bl	800071c <__aeabi_ddiv>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4918      	ldr	r1, [pc, #96]	; (800277c <Inertial_Unit_Start+0xb4>)
 800271a:	e9c1 2300 	strd	r2, r3, [r1]
	if(ay < -1)
 800271e:	4b16      	ldr	r3, [pc, #88]	; (8002778 <Inertial_Unit_Start+0xb0>)
 8002720:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	4b15      	ldr	r3, [pc, #84]	; (8002780 <Inertial_Unit_Start+0xb8>)
 800272a:	f7fe f93f 	bl	80009ac <__aeabi_dcmplt>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d008      	beq.n	8002746 <Inertial_Unit_Start+0x7e>
	{
	temp_send_y_axis_acc = (temp_send_y_axis_acc) * (-1);
 8002734:	4b11      	ldr	r3, [pc, #68]	; (800277c <Inertial_Unit_Start+0xb4>)
 8002736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273a:	4690      	mov	r8, r2
 800273c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002740:	4b0e      	ldr	r3, [pc, #56]	; (800277c <Inertial_Unit_Start+0xb4>)
 8002742:	e9c3 8900 	strd	r8, r9, [r3]
	}
	send_y_axis = temp_send_y_axis_acc;
 8002746:	4b0d      	ldr	r3, [pc, #52]	; (800277c <Inertial_Unit_Start+0xb4>)
 8002748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274c:	4610      	mov	r0, r2
 800274e:	4619      	mov	r1, r3
 8002750:	f7fe f992 	bl	8000a78 <__aeabi_d2uiz>
 8002754:	4603      	mov	r3, r0
 8002756:	b2da      	uxtb	r2, r3
 8002758:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <Inertial_Unit_Start+0xbc>)
 800275a:	701a      	strb	r2, [r3, #0]
	sendbuff[0] = send_y_axis;
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <Inertial_Unit_Start+0xbc>)
 800275e:	781a      	ldrb	r2, [r3, #0]
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <Inertial_Unit_Start+0xc0>)
 8002762:	701a      	strb	r2, [r3, #0]
	osDelay(1);
 8002764:	2001      	movs	r0, #1
 8002766:	f003 fc6d 	bl	8006044 <osDelay>
    mpuReadSensor(&sensorData);
 800276a:	e7b2      	b.n	80026d2 <Inertial_Unit_Start+0xa>
 800276c:	f3af 8000 	nop.w
 8002770:	a8c33ed5 	.word	0xa8c33ed5
 8002774:	409a4e47 	.word	0x409a4e47
 8002778:	200000a8 	.word	0x200000a8
 800277c:	20000098 	.word	0x20000098
 8002780:	bff00000 	.word	0xbff00000
 8002784:	200000a0 	.word	0x200000a0
 8002788:	200000a4 	.word	0x200000a4
 800278c:	00000000 	.word	0x00000000

08002790 <Decision_and_Logger>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Decision_and_Logger */
void Decision_and_Logger(void *argument)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	sendbuff[2] = breakout;
 8002798:	4b3d      	ldr	r3, [pc, #244]	; (8002890 <Decision_and_Logger+0x100>)
 800279a:	781a      	ldrb	r2, [r3, #0]
 800279c:	4b3d      	ldr	r3, [pc, #244]	; (8002894 <Decision_and_Logger+0x104>)
 800279e:	709a      	strb	r2, [r3, #2]

  /* USER CODE BEGIN Decision_and_Logger */
  /* Infinite loop */
  for(;;)
  {
	  if(ay != 0)
 80027a0:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <Decision_and_Logger+0x108>)
 80027a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	f7fe f8f3 	bl	8000998 <__aeabi_dcmpeq>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d104      	bne.n	80027c2 <Decision_and_Logger+0x32>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80027b8:	2201      	movs	r2, #1
 80027ba:	2104      	movs	r1, #4
 80027bc:	4837      	ldr	r0, [pc, #220]	; (800289c <Decision_and_Logger+0x10c>)
 80027be:	f000 fd71 	bl	80032a4 <HAL_GPIO_WritePin>
	  }

	  if(related_altitude>500)
 80027c2:	4b37      	ldr	r3, [pc, #220]	; (80028a0 <Decision_and_Logger+0x110>)
 80027c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	4b35      	ldr	r3, [pc, #212]	; (80028a4 <Decision_and_Logger+0x114>)
 80027ce:	f7fe f90b 	bl	80009e8 <__aeabi_dcmpgt>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00c      	beq.n	80027f2 <Decision_and_Logger+0x62>
	  {
		  HAL_Delay(3000);
 80027d8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80027dc:	f000 fada 	bl	8002d94 <HAL_Delay>
		  breakout = 1;
 80027e0:	4b2b      	ldr	r3, [pc, #172]	; (8002890 <Decision_and_Logger+0x100>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80027e6:	2201      	movs	r2, #1
 80027e8:	2101      	movs	r1, #1
 80027ea:	482c      	ldr	r0, [pc, #176]	; (800289c <Decision_and_Logger+0x10c>)
 80027ec:	f000 fd5a 	bl	80032a4 <HAL_GPIO_WritePin>
 80027f0:	e004      	b.n	80027fc <Decision_and_Logger+0x6c>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80027f2:	2200      	movs	r2, #0
 80027f4:	2101      	movs	r1, #1
 80027f6:	4829      	ldr	r0, [pc, #164]	; (800289c <Decision_and_Logger+0x10c>)
 80027f8:	f000 fd54 	bl	80032a4 <HAL_GPIO_WritePin>
	  }

	  if(related_altitude<500 && related_altitude != 0 && altitude != 44330)
 80027fc:	4b28      	ldr	r3, [pc, #160]	; (80028a0 <Decision_and_Logger+0x110>)
 80027fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <Decision_and_Logger+0x114>)
 8002808:	f7fe f8d0 	bl	80009ac <__aeabi_dcmplt>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d01c      	beq.n	800284c <Decision_and_Logger+0xbc>
 8002812:	4b23      	ldr	r3, [pc, #140]	; (80028a0 <Decision_and_Logger+0x110>)
 8002814:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	f7fe f8ba 	bl	8000998 <__aeabi_dcmpeq>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d110      	bne.n	800284c <Decision_and_Logger+0xbc>
 800282a:	4b1f      	ldr	r3, [pc, #124]	; (80028a8 <Decision_and_Logger+0x118>)
 800282c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002830:	a315      	add	r3, pc, #84	; (adr r3, 8002888 <Decision_and_Logger+0xf8>)
 8002832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002836:	f7fe f8af 	bl	8000998 <__aeabi_dcmpeq>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d105      	bne.n	800284c <Decision_and_Logger+0xbc>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8002840:	2201      	movs	r2, #1
 8002842:	2102      	movs	r1, #2
 8002844:	4815      	ldr	r0, [pc, #84]	; (800289c <Decision_and_Logger+0x10c>)
 8002846:	f000 fd2d 	bl	80032a4 <HAL_GPIO_WritePin>
 800284a:	e004      	b.n	8002856 <Decision_and_Logger+0xc6>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800284c:	2200      	movs	r2, #0
 800284e:	2102      	movs	r1, #2
 8002850:	4812      	ldr	r0, [pc, #72]	; (800289c <Decision_and_Logger+0x10c>)
 8002852:	f000 fd27 	bl	80032a4 <HAL_GPIO_WritePin>
	  }


	  HAL_SPI_Transmit(&hspi2, sendbuff, sizeof(sendbuff), 100);
 8002856:	2364      	movs	r3, #100	; 0x64
 8002858:	2203      	movs	r2, #3
 800285a:	490e      	ldr	r1, [pc, #56]	; (8002894 <Decision_and_Logger+0x104>)
 800285c:	4813      	ldr	r0, [pc, #76]	; (80028ac <Decision_and_Logger+0x11c>)
 800285e:	f002 feb5 	bl	80055cc <HAL_SPI_Transmit>

	  if(HAL_SPI_Transmit(&hspi2, sendbuff, sizeof(sendbuff), 100)==HAL_OK)
 8002862:	2364      	movs	r3, #100	; 0x64
 8002864:	2203      	movs	r2, #3
 8002866:	490b      	ldr	r1, [pc, #44]	; (8002894 <Decision_and_Logger+0x104>)
 8002868:	4810      	ldr	r0, [pc, #64]	; (80028ac <Decision_and_Logger+0x11c>)
 800286a:	f002 feaf 	bl	80055cc <HAL_SPI_Transmit>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d102      	bne.n	800287a <Decision_and_Logger+0xea>
	  {
		  spi_flag = 1;
 8002874:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <Decision_and_Logger+0x120>)
 8002876:	2201      	movs	r2, #1
 8002878:	701a      	strb	r2, [r3, #0]
	  }
    osDelay(1);
 800287a:	2001      	movs	r0, #1
 800287c:	f003 fbe2 	bl	8006044 <osDelay>
	  if(ay != 0)
 8002880:	e78e      	b.n	80027a0 <Decision_and_Logger+0x10>
 8002882:	bf00      	nop
 8002884:	f3af 8000 	nop.w
 8002888:	00000000 	.word	0x00000000
 800288c:	40e5a540 	.word	0x40e5a540
 8002890:	200000a7 	.word	0x200000a7
 8002894:	200000a4 	.word	0x200000a4
 8002898:	200000a8 	.word	0x200000a8
 800289c:	40010800 	.word	0x40010800
 80028a0:	20001b98 	.word	0x20001b98
 80028a4:	407f4000 	.word	0x407f4000
 80028a8:	20001b90 	.word	0x20001b90
 80028ac:	20001a64 	.word	0x20001a64
 80028b0:	20000095 	.word	0x20000095

080028b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a04      	ldr	r2, [pc, #16]	; (80028d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d101      	bne.n	80028ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80028c6:	f000 fa49 	bl	8002d5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40012c00 	.word	0x40012c00

080028d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028dc:	b672      	cpsid	i
}
 80028de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028e0:	e7fe      	b.n	80028e0 <Error_Handler+0x8>
	...

080028e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80028ea:	4b18      	ldr	r3, [pc, #96]	; (800294c <HAL_MspInit+0x68>)
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	4a17      	ldr	r2, [pc, #92]	; (800294c <HAL_MspInit+0x68>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	6193      	str	r3, [r2, #24]
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <HAL_MspInit+0x68>)
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_MspInit+0x68>)
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	4a11      	ldr	r2, [pc, #68]	; (800294c <HAL_MspInit+0x68>)
 8002908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290c:	61d3      	str	r3, [r2, #28]
 800290e:	4b0f      	ldr	r3, [pc, #60]	; (800294c <HAL_MspInit+0x68>)
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800291a:	2200      	movs	r2, #0
 800291c:	210f      	movs	r1, #15
 800291e:	f06f 0001 	mvn.w	r0, #1
 8002922:	f000 fb10 	bl	8002f46 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <HAL_MspInit+0x6c>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	4a04      	ldr	r2, [pc, #16]	; (8002950 <HAL_MspInit+0x6c>)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000
 8002950:	40010000 	.word	0x40010000

08002954 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08a      	sub	sp, #40	; 0x28
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 0318 	add.w	r3, r7, #24
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a2b      	ldr	r2, [pc, #172]	; (8002a1c <HAL_I2C_MspInit+0xc8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d124      	bne.n	80029be <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002974:	4b2a      	ldr	r3, [pc, #168]	; (8002a20 <HAL_I2C_MspInit+0xcc>)
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	4a29      	ldr	r2, [pc, #164]	; (8002a20 <HAL_I2C_MspInit+0xcc>)
 800297a:	f043 0308 	orr.w	r3, r3, #8
 800297e:	6193      	str	r3, [r2, #24]
 8002980:	4b27      	ldr	r3, [pc, #156]	; (8002a20 <HAL_I2C_MspInit+0xcc>)
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800298c:	23c0      	movs	r3, #192	; 0xc0
 800298e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002990:	2312      	movs	r3, #18
 8002992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002994:	2303      	movs	r3, #3
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002998:	f107 0318 	add.w	r3, r7, #24
 800299c:	4619      	mov	r1, r3
 800299e:	4821      	ldr	r0, [pc, #132]	; (8002a24 <HAL_I2C_MspInit+0xd0>)
 80029a0:	f000 fafc 	bl	8002f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029a4:	4b1e      	ldr	r3, [pc, #120]	; (8002a20 <HAL_I2C_MspInit+0xcc>)
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	4a1d      	ldr	r2, [pc, #116]	; (8002a20 <HAL_I2C_MspInit+0xcc>)
 80029aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029ae:	61d3      	str	r3, [r2, #28]
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <HAL_I2C_MspInit+0xcc>)
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80029bc:	e029      	b.n	8002a12 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a19      	ldr	r2, [pc, #100]	; (8002a28 <HAL_I2C_MspInit+0xd4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d124      	bne.n	8002a12 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c8:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <HAL_I2C_MspInit+0xcc>)
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	4a14      	ldr	r2, [pc, #80]	; (8002a20 <HAL_I2C_MspInit+0xcc>)
 80029ce:	f043 0308 	orr.w	r3, r3, #8
 80029d2:	6193      	str	r3, [r2, #24]
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <HAL_I2C_MspInit+0xcc>)
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80029e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029e6:	2312      	movs	r3, #18
 80029e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ea:	2303      	movs	r3, #3
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ee:	f107 0318 	add.w	r3, r7, #24
 80029f2:	4619      	mov	r1, r3
 80029f4:	480b      	ldr	r0, [pc, #44]	; (8002a24 <HAL_I2C_MspInit+0xd0>)
 80029f6:	f000 fad1 	bl	8002f9c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <HAL_I2C_MspInit+0xcc>)
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	4a08      	ldr	r2, [pc, #32]	; (8002a20 <HAL_I2C_MspInit+0xcc>)
 8002a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a04:	61d3      	str	r3, [r2, #28]
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <HAL_I2C_MspInit+0xcc>)
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	68bb      	ldr	r3, [r7, #8]
}
 8002a12:	bf00      	nop
 8002a14:	3728      	adds	r7, #40	; 0x28
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40005400 	.word	0x40005400
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40010c00 	.word	0x40010c00
 8002a28:	40005800 	.word	0x40005800

08002a2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a34:	f107 0310 	add.w	r3, r7, #16
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a16      	ldr	r2, [pc, #88]	; (8002aa0 <HAL_SPI_MspInit+0x74>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d124      	bne.n	8002a96 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a4c:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <HAL_SPI_MspInit+0x78>)
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	4a14      	ldr	r2, [pc, #80]	; (8002aa4 <HAL_SPI_MspInit+0x78>)
 8002a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a56:	61d3      	str	r3, [r2, #28]
 8002a58:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <HAL_SPI_MspInit+0x78>)
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a64:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <HAL_SPI_MspInit+0x78>)
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	4a0e      	ldr	r2, [pc, #56]	; (8002aa4 <HAL_SPI_MspInit+0x78>)
 8002a6a:	f043 0308 	orr.w	r3, r3, #8
 8002a6e:	6193      	str	r3, [r2, #24]
 8002a70:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <HAL_SPI_MspInit+0x78>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002a7c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002a80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a82:	2302      	movs	r3, #2
 8002a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a86:	2303      	movs	r3, #3
 8002a88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a8a:	f107 0310 	add.w	r3, r7, #16
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4805      	ldr	r0, [pc, #20]	; (8002aa8 <HAL_SPI_MspInit+0x7c>)
 8002a92:	f000 fa83 	bl	8002f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002a96:	bf00      	nop
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40003800 	.word	0x40003800
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40010c00 	.word	0x40010c00

08002aac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08c      	sub	sp, #48	; 0x30
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8002abc:	2200      	movs	r2, #0
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	2019      	movs	r0, #25
 8002ac2:	f000 fa40 	bl	8002f46 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002ac6:	2019      	movs	r0, #25
 8002ac8:	f000 fa59 	bl	8002f7e <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002acc:	4b1e      	ldr	r3, [pc, #120]	; (8002b48 <HAL_InitTick+0x9c>)
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	4a1d      	ldr	r2, [pc, #116]	; (8002b48 <HAL_InitTick+0x9c>)
 8002ad2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ad6:	6193      	str	r3, [r2, #24]
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <HAL_InitTick+0x9c>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ae4:	f107 0210 	add.w	r2, r7, #16
 8002ae8:	f107 0314 	add.w	r3, r7, #20
 8002aec:	4611      	mov	r1, r2
 8002aee:	4618      	mov	r0, r3
 8002af0:	f002 fc9a 	bl	8005428 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002af4:	f002 fc84 	bl	8005400 <HAL_RCC_GetPCLK2Freq>
 8002af8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afc:	4a13      	ldr	r2, [pc, #76]	; (8002b4c <HAL_InitTick+0xa0>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	0c9b      	lsrs	r3, r3, #18
 8002b04:	3b01      	subs	r3, #1
 8002b06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002b08:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <HAL_InitTick+0xa4>)
 8002b0a:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <HAL_InitTick+0xa8>)
 8002b0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002b0e:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <HAL_InitTick+0xa4>)
 8002b10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b14:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002b16:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <HAL_InitTick+0xa4>)
 8002b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <HAL_InitTick+0xa4>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b22:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_InitTick+0xa4>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002b28:	4809      	ldr	r0, [pc, #36]	; (8002b50 <HAL_InitTick+0xa4>)
 8002b2a:	f002 ff31 	bl	8005990 <HAL_TIM_Base_Init>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d104      	bne.n	8002b3e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002b34:	4806      	ldr	r0, [pc, #24]	; (8002b50 <HAL_InitTick+0xa4>)
 8002b36:	f002 ff83 	bl	8005a40 <HAL_TIM_Base_Start_IT>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	e000      	b.n	8002b40 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3730      	adds	r7, #48	; 0x30
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	431bde83 	.word	0x431bde83
 8002b50:	20001ba8 	.word	0x20001ba8
 8002b54:	40012c00 	.word	0x40012c00

08002b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b5c:	e7fe      	b.n	8002b5c <NMI_Handler+0x4>

08002b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b62:	e7fe      	b.n	8002b62 <HardFault_Handler+0x4>

08002b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b68:	e7fe      	b.n	8002b68 <MemManage_Handler+0x4>

08002b6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b6e:	e7fe      	b.n	8002b6e <BusFault_Handler+0x4>

08002b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b74:	e7fe      	b.n	8002b74 <UsageFault_Handler+0x4>

08002b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b76:	b480      	push	{r7}
 8002b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr
	...

08002b84 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b88:	4802      	ldr	r0, [pc, #8]	; (8002b94 <TIM1_UP_IRQHandler+0x10>)
 8002b8a:	f002 ffab 	bl	8005ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20001ba8 	.word	0x20001ba8

08002b98 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	e00a      	b.n	8002bc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002baa:	f3af 8000 	nop.w
 8002bae:	4601      	mov	r1, r0
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	60ba      	str	r2, [r7, #8]
 8002bb6:	b2ca      	uxtb	r2, r1
 8002bb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	dbf0      	blt.n	8002baa <_read+0x12>
	}

return len;
 8002bc8:	687b      	ldr	r3, [r7, #4]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b086      	sub	sp, #24
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	e009      	b.n	8002bf8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	60ba      	str	r2, [r7, #8]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	dbf1      	blt.n	8002be4 <_write+0x12>
	}
	return len;
 8002c00:	687b      	ldr	r3, [r7, #4]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <_close>:

int _close(int file)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
	return -1;
 8002c12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c30:	605a      	str	r2, [r3, #4]
	return 0;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr

08002c3e <_isatty>:

int _isatty(int file)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
	return 1;
 8002c46:	2301      	movs	r3, #1
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr

08002c52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b085      	sub	sp, #20
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
	return 0;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr
	...

08002c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c74:	4a14      	ldr	r2, [pc, #80]	; (8002cc8 <_sbrk+0x5c>)
 8002c76:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <_sbrk+0x60>)
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c80:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <_sbrk+0x64>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d102      	bne.n	8002c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c88:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <_sbrk+0x64>)
 8002c8a:	4a12      	ldr	r2, [pc, #72]	; (8002cd4 <_sbrk+0x68>)
 8002c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c8e:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <_sbrk+0x64>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4413      	add	r3, r2
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d207      	bcs.n	8002cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c9c:	f005 fd96 	bl	80087cc <__errno>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	220c      	movs	r2, #12
 8002ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8002caa:	e009      	b.n	8002cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cac:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <_sbrk+0x64>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cb2:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <_sbrk+0x64>)
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	4a05      	ldr	r2, [pc, #20]	; (8002cd0 <_sbrk+0x64>)
 8002cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20005000 	.word	0x20005000
 8002ccc:	00000400 	.word	0x00000400
 8002cd0:	200000b0 	.word	0x200000b0
 8002cd4:	20001c48 	.word	0x20001c48

08002cd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002ce4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002ce6:	e003      	b.n	8002cf0 <LoopCopyDataInit>

08002ce8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002cea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002cec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002cee:	3104      	adds	r1, #4

08002cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002cf0:	480a      	ldr	r0, [pc, #40]	; (8002d1c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002cf4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002cf6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002cf8:	d3f6      	bcc.n	8002ce8 <CopyDataInit>
  ldr r2, =_sbss
 8002cfa:	4a0a      	ldr	r2, [pc, #40]	; (8002d24 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002cfc:	e002      	b.n	8002d04 <LoopFillZerobss>

08002cfe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002cfe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002d00:	f842 3b04 	str.w	r3, [r2], #4

08002d04 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002d04:	4b08      	ldr	r3, [pc, #32]	; (8002d28 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002d06:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002d08:	d3f9      	bcc.n	8002cfe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d0a:	f7ff ffe5 	bl	8002cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d0e:	f005 fd63 	bl	80087d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d12:	f7ff f9f5 	bl	8002100 <main>
  bx lr
 8002d16:	4770      	bx	lr
  ldr r3, =_sidata
 8002d18:	0800ae50 	.word	0x0800ae50
  ldr r0, =_sdata
 8002d1c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002d20:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8002d24:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8002d28:	20001c44 	.word	0x20001c44

08002d2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d2c:	e7fe      	b.n	8002d2c <ADC1_2_IRQHandler>
	...

08002d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d34:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <HAL_Init+0x28>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a07      	ldr	r2, [pc, #28]	; (8002d58 <HAL_Init+0x28>)
 8002d3a:	f043 0310 	orr.w	r3, r3, #16
 8002d3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d40:	2003      	movs	r0, #3
 8002d42:	f000 f8f5 	bl	8002f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d46:	2000      	movs	r0, #0
 8002d48:	f7ff feb0 	bl	8002aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d4c:	f7ff fdca 	bl	80028e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40022000 	.word	0x40022000

08002d5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d60:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_IncTick+0x1c>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <HAL_IncTick+0x20>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	4a03      	ldr	r2, [pc, #12]	; (8002d7c <HAL_IncTick+0x20>)
 8002d6e:	6013      	str	r3, [r2, #0]
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr
 8002d78:	20000008 	.word	0x20000008
 8002d7c:	20001bf0 	.word	0x20001bf0

08002d80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return uwTick;
 8002d84:	4b02      	ldr	r3, [pc, #8]	; (8002d90 <HAL_GetTick+0x10>)
 8002d86:	681b      	ldr	r3, [r3, #0]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr
 8002d90:	20001bf0 	.word	0x20001bf0

08002d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d9c:	f7ff fff0 	bl	8002d80 <HAL_GetTick>
 8002da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dac:	d005      	beq.n	8002dba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dae:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <HAL_Delay+0x44>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4413      	add	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dba:	bf00      	nop
 8002dbc:	f7ff ffe0 	bl	8002d80 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d8f7      	bhi.n	8002dbc <HAL_Delay+0x28>
  {
  }
}
 8002dcc:	bf00      	nop
 8002dce:	bf00      	nop
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000008 	.word	0x20000008

08002ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dec:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <__NVIC_SetPriorityGrouping+0x44>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002df8:	4013      	ands	r3, r2
 8002dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e0e:	4a04      	ldr	r2, [pc, #16]	; (8002e20 <__NVIC_SetPriorityGrouping+0x44>)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	60d3      	str	r3, [r2, #12]
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e28:	4b04      	ldr	r3, [pc, #16]	; (8002e3c <__NVIC_GetPriorityGrouping+0x18>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	0a1b      	lsrs	r3, r3, #8
 8002e2e:	f003 0307 	and.w	r3, r3, #7
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	db0b      	blt.n	8002e6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	f003 021f 	and.w	r2, r3, #31
 8002e58:	4906      	ldr	r1, [pc, #24]	; (8002e74 <__NVIC_EnableIRQ+0x34>)
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	095b      	lsrs	r3, r3, #5
 8002e60:	2001      	movs	r0, #1
 8002e62:	fa00 f202 	lsl.w	r2, r0, r2
 8002e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr
 8002e74:	e000e100 	.word	0xe000e100

08002e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	6039      	str	r1, [r7, #0]
 8002e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	db0a      	blt.n	8002ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	490c      	ldr	r1, [pc, #48]	; (8002ec4 <__NVIC_SetPriority+0x4c>)
 8002e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e96:	0112      	lsls	r2, r2, #4
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ea0:	e00a      	b.n	8002eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	4908      	ldr	r1, [pc, #32]	; (8002ec8 <__NVIC_SetPriority+0x50>)
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	3b04      	subs	r3, #4
 8002eb0:	0112      	lsls	r2, r2, #4
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	761a      	strb	r2, [r3, #24]
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	e000e100 	.word	0xe000e100
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b089      	sub	sp, #36	; 0x24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f1c3 0307 	rsb	r3, r3, #7
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	bf28      	it	cs
 8002eea:	2304      	movcs	r3, #4
 8002eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	2b06      	cmp	r3, #6
 8002ef4:	d902      	bls.n	8002efc <NVIC_EncodePriority+0x30>
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3b03      	subs	r3, #3
 8002efa:	e000      	b.n	8002efe <NVIC_EncodePriority+0x32>
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f00:	f04f 32ff 	mov.w	r2, #4294967295
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43da      	mvns	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	401a      	ands	r2, r3
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f14:	f04f 31ff 	mov.w	r1, #4294967295
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1e:	43d9      	mvns	r1, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f24:	4313      	orrs	r3, r2
         );
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3724      	adds	r7, #36	; 0x24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff ff4f 	bl	8002ddc <__NVIC_SetPriorityGrouping>
}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b086      	sub	sp, #24
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	607a      	str	r2, [r7, #4]
 8002f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f58:	f7ff ff64 	bl	8002e24 <__NVIC_GetPriorityGrouping>
 8002f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	6978      	ldr	r0, [r7, #20]
 8002f64:	f7ff ffb2 	bl	8002ecc <NVIC_EncodePriority>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f6e:	4611      	mov	r1, r2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff ff81 	bl	8002e78 <__NVIC_SetPriority>
}
 8002f76:	bf00      	nop
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	4603      	mov	r3, r0
 8002f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ff57 	bl	8002e40 <__NVIC_EnableIRQ>
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b08b      	sub	sp, #44	; 0x2c
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002faa:	2300      	movs	r3, #0
 8002fac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fae:	e169      	b.n	8003284 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	f040 8158 	bne.w	800327e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	4a9a      	ldr	r2, [pc, #616]	; (800323c <HAL_GPIO_Init+0x2a0>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d05e      	beq.n	8003096 <HAL_GPIO_Init+0xfa>
 8002fd8:	4a98      	ldr	r2, [pc, #608]	; (800323c <HAL_GPIO_Init+0x2a0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d875      	bhi.n	80030ca <HAL_GPIO_Init+0x12e>
 8002fde:	4a98      	ldr	r2, [pc, #608]	; (8003240 <HAL_GPIO_Init+0x2a4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d058      	beq.n	8003096 <HAL_GPIO_Init+0xfa>
 8002fe4:	4a96      	ldr	r2, [pc, #600]	; (8003240 <HAL_GPIO_Init+0x2a4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d86f      	bhi.n	80030ca <HAL_GPIO_Init+0x12e>
 8002fea:	4a96      	ldr	r2, [pc, #600]	; (8003244 <HAL_GPIO_Init+0x2a8>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d052      	beq.n	8003096 <HAL_GPIO_Init+0xfa>
 8002ff0:	4a94      	ldr	r2, [pc, #592]	; (8003244 <HAL_GPIO_Init+0x2a8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d869      	bhi.n	80030ca <HAL_GPIO_Init+0x12e>
 8002ff6:	4a94      	ldr	r2, [pc, #592]	; (8003248 <HAL_GPIO_Init+0x2ac>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d04c      	beq.n	8003096 <HAL_GPIO_Init+0xfa>
 8002ffc:	4a92      	ldr	r2, [pc, #584]	; (8003248 <HAL_GPIO_Init+0x2ac>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d863      	bhi.n	80030ca <HAL_GPIO_Init+0x12e>
 8003002:	4a92      	ldr	r2, [pc, #584]	; (800324c <HAL_GPIO_Init+0x2b0>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d046      	beq.n	8003096 <HAL_GPIO_Init+0xfa>
 8003008:	4a90      	ldr	r2, [pc, #576]	; (800324c <HAL_GPIO_Init+0x2b0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d85d      	bhi.n	80030ca <HAL_GPIO_Init+0x12e>
 800300e:	2b12      	cmp	r3, #18
 8003010:	d82a      	bhi.n	8003068 <HAL_GPIO_Init+0xcc>
 8003012:	2b12      	cmp	r3, #18
 8003014:	d859      	bhi.n	80030ca <HAL_GPIO_Init+0x12e>
 8003016:	a201      	add	r2, pc, #4	; (adr r2, 800301c <HAL_GPIO_Init+0x80>)
 8003018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301c:	08003097 	.word	0x08003097
 8003020:	08003071 	.word	0x08003071
 8003024:	08003083 	.word	0x08003083
 8003028:	080030c5 	.word	0x080030c5
 800302c:	080030cb 	.word	0x080030cb
 8003030:	080030cb 	.word	0x080030cb
 8003034:	080030cb 	.word	0x080030cb
 8003038:	080030cb 	.word	0x080030cb
 800303c:	080030cb 	.word	0x080030cb
 8003040:	080030cb 	.word	0x080030cb
 8003044:	080030cb 	.word	0x080030cb
 8003048:	080030cb 	.word	0x080030cb
 800304c:	080030cb 	.word	0x080030cb
 8003050:	080030cb 	.word	0x080030cb
 8003054:	080030cb 	.word	0x080030cb
 8003058:	080030cb 	.word	0x080030cb
 800305c:	080030cb 	.word	0x080030cb
 8003060:	08003079 	.word	0x08003079
 8003064:	0800308d 	.word	0x0800308d
 8003068:	4a79      	ldr	r2, [pc, #484]	; (8003250 <HAL_GPIO_Init+0x2b4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d013      	beq.n	8003096 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800306e:	e02c      	b.n	80030ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	623b      	str	r3, [r7, #32]
          break;
 8003076:	e029      	b.n	80030cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	3304      	adds	r3, #4
 800307e:	623b      	str	r3, [r7, #32]
          break;
 8003080:	e024      	b.n	80030cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	3308      	adds	r3, #8
 8003088:	623b      	str	r3, [r7, #32]
          break;
 800308a:	e01f      	b.n	80030cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	330c      	adds	r3, #12
 8003092:	623b      	str	r3, [r7, #32]
          break;
 8003094:	e01a      	b.n	80030cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d102      	bne.n	80030a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800309e:	2304      	movs	r3, #4
 80030a0:	623b      	str	r3, [r7, #32]
          break;
 80030a2:	e013      	b.n	80030cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d105      	bne.n	80030b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030ac:	2308      	movs	r3, #8
 80030ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	611a      	str	r2, [r3, #16]
          break;
 80030b6:	e009      	b.n	80030cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030b8:	2308      	movs	r3, #8
 80030ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69fa      	ldr	r2, [r7, #28]
 80030c0:	615a      	str	r2, [r3, #20]
          break;
 80030c2:	e003      	b.n	80030cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030c4:	2300      	movs	r3, #0
 80030c6:	623b      	str	r3, [r7, #32]
          break;
 80030c8:	e000      	b.n	80030cc <HAL_GPIO_Init+0x130>
          break;
 80030ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	2bff      	cmp	r3, #255	; 0xff
 80030d0:	d801      	bhi.n	80030d6 <HAL_GPIO_Init+0x13a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	e001      	b.n	80030da <HAL_GPIO_Init+0x13e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3304      	adds	r3, #4
 80030da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	2bff      	cmp	r3, #255	; 0xff
 80030e0:	d802      	bhi.n	80030e8 <HAL_GPIO_Init+0x14c>
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	e002      	b.n	80030ee <HAL_GPIO_Init+0x152>
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	3b08      	subs	r3, #8
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	210f      	movs	r1, #15
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	fa01 f303 	lsl.w	r3, r1, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	401a      	ands	r2, r3
 8003100:	6a39      	ldr	r1, [r7, #32]
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	fa01 f303 	lsl.w	r3, r1, r3
 8003108:	431a      	orrs	r2, r3
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 80b1 	beq.w	800327e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800311c:	4b4d      	ldr	r3, [pc, #308]	; (8003254 <HAL_GPIO_Init+0x2b8>)
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	4a4c      	ldr	r2, [pc, #304]	; (8003254 <HAL_GPIO_Init+0x2b8>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	6193      	str	r3, [r2, #24]
 8003128:	4b4a      	ldr	r3, [pc, #296]	; (8003254 <HAL_GPIO_Init+0x2b8>)
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003134:	4a48      	ldr	r2, [pc, #288]	; (8003258 <HAL_GPIO_Init+0x2bc>)
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	089b      	lsrs	r3, r3, #2
 800313a:	3302      	adds	r3, #2
 800313c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003140:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	f003 0303 	and.w	r3, r3, #3
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	220f      	movs	r2, #15
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4013      	ands	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a40      	ldr	r2, [pc, #256]	; (800325c <HAL_GPIO_Init+0x2c0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d013      	beq.n	8003188 <HAL_GPIO_Init+0x1ec>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a3f      	ldr	r2, [pc, #252]	; (8003260 <HAL_GPIO_Init+0x2c4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d00d      	beq.n	8003184 <HAL_GPIO_Init+0x1e8>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a3e      	ldr	r2, [pc, #248]	; (8003264 <HAL_GPIO_Init+0x2c8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d007      	beq.n	8003180 <HAL_GPIO_Init+0x1e4>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a3d      	ldr	r2, [pc, #244]	; (8003268 <HAL_GPIO_Init+0x2cc>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d101      	bne.n	800317c <HAL_GPIO_Init+0x1e0>
 8003178:	2303      	movs	r3, #3
 800317a:	e006      	b.n	800318a <HAL_GPIO_Init+0x1ee>
 800317c:	2304      	movs	r3, #4
 800317e:	e004      	b.n	800318a <HAL_GPIO_Init+0x1ee>
 8003180:	2302      	movs	r3, #2
 8003182:	e002      	b.n	800318a <HAL_GPIO_Init+0x1ee>
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <HAL_GPIO_Init+0x1ee>
 8003188:	2300      	movs	r3, #0
 800318a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800318c:	f002 0203 	and.w	r2, r2, #3
 8003190:	0092      	lsls	r2, r2, #2
 8003192:	4093      	lsls	r3, r2
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800319a:	492f      	ldr	r1, [pc, #188]	; (8003258 <HAL_GPIO_Init+0x2bc>)
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	089b      	lsrs	r3, r3, #2
 80031a0:	3302      	adds	r3, #2
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d006      	beq.n	80031c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031b4:	4b2d      	ldr	r3, [pc, #180]	; (800326c <HAL_GPIO_Init+0x2d0>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	492c      	ldr	r1, [pc, #176]	; (800326c <HAL_GPIO_Init+0x2d0>)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	4313      	orrs	r3, r2
 80031be:	600b      	str	r3, [r1, #0]
 80031c0:	e006      	b.n	80031d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031c2:	4b2a      	ldr	r3, [pc, #168]	; (800326c <HAL_GPIO_Init+0x2d0>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	4928      	ldr	r1, [pc, #160]	; (800326c <HAL_GPIO_Init+0x2d0>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d006      	beq.n	80031ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031dc:	4b23      	ldr	r3, [pc, #140]	; (800326c <HAL_GPIO_Init+0x2d0>)
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	4922      	ldr	r1, [pc, #136]	; (800326c <HAL_GPIO_Init+0x2d0>)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	604b      	str	r3, [r1, #4]
 80031e8:	e006      	b.n	80031f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031ea:	4b20      	ldr	r3, [pc, #128]	; (800326c <HAL_GPIO_Init+0x2d0>)
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	43db      	mvns	r3, r3
 80031f2:	491e      	ldr	r1, [pc, #120]	; (800326c <HAL_GPIO_Init+0x2d0>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d006      	beq.n	8003212 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003204:	4b19      	ldr	r3, [pc, #100]	; (800326c <HAL_GPIO_Init+0x2d0>)
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	4918      	ldr	r1, [pc, #96]	; (800326c <HAL_GPIO_Init+0x2d0>)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	4313      	orrs	r3, r2
 800320e:	608b      	str	r3, [r1, #8]
 8003210:	e006      	b.n	8003220 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003212:	4b16      	ldr	r3, [pc, #88]	; (800326c <HAL_GPIO_Init+0x2d0>)
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	43db      	mvns	r3, r3
 800321a:	4914      	ldr	r1, [pc, #80]	; (800326c <HAL_GPIO_Init+0x2d0>)
 800321c:	4013      	ands	r3, r2
 800321e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d021      	beq.n	8003270 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800322c:	4b0f      	ldr	r3, [pc, #60]	; (800326c <HAL_GPIO_Init+0x2d0>)
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	490e      	ldr	r1, [pc, #56]	; (800326c <HAL_GPIO_Init+0x2d0>)
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	4313      	orrs	r3, r2
 8003236:	60cb      	str	r3, [r1, #12]
 8003238:	e021      	b.n	800327e <HAL_GPIO_Init+0x2e2>
 800323a:	bf00      	nop
 800323c:	10320000 	.word	0x10320000
 8003240:	10310000 	.word	0x10310000
 8003244:	10220000 	.word	0x10220000
 8003248:	10210000 	.word	0x10210000
 800324c:	10120000 	.word	0x10120000
 8003250:	10110000 	.word	0x10110000
 8003254:	40021000 	.word	0x40021000
 8003258:	40010000 	.word	0x40010000
 800325c:	40010800 	.word	0x40010800
 8003260:	40010c00 	.word	0x40010c00
 8003264:	40011000 	.word	0x40011000
 8003268:	40011400 	.word	0x40011400
 800326c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <HAL_GPIO_Init+0x304>)
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	43db      	mvns	r3, r3
 8003278:	4909      	ldr	r1, [pc, #36]	; (80032a0 <HAL_GPIO_Init+0x304>)
 800327a:	4013      	ands	r3, r2
 800327c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	3301      	adds	r3, #1
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	fa22 f303 	lsr.w	r3, r2, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	f47f ae8e 	bne.w	8002fb0 <HAL_GPIO_Init+0x14>
  }
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	372c      	adds	r7, #44	; 0x2c
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr
 80032a0:	40010400 	.word	0x40010400

080032a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	807b      	strh	r3, [r7, #2]
 80032b0:	4613      	mov	r3, r2
 80032b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032b4:	787b      	ldrb	r3, [r7, #1]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ba:	887a      	ldrh	r2, [r7, #2]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032c0:	e003      	b.n	80032ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032c2:	887b      	ldrh	r3, [r7, #2]
 80032c4:	041a      	lsls	r2, r3, #16
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	611a      	str	r2, [r3, #16]
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e12b      	b.n	800353e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d106      	bne.n	8003300 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7ff fb2a 	bl	8002954 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2224      	movs	r2, #36	; 0x24
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0201 	bic.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003326:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003336:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003338:	f002 f84e 	bl	80053d8 <HAL_RCC_GetPCLK1Freq>
 800333c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	4a81      	ldr	r2, [pc, #516]	; (8003548 <HAL_I2C_Init+0x274>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d807      	bhi.n	8003358 <HAL_I2C_Init+0x84>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4a80      	ldr	r2, [pc, #512]	; (800354c <HAL_I2C_Init+0x278>)
 800334c:	4293      	cmp	r3, r2
 800334e:	bf94      	ite	ls
 8003350:	2301      	movls	r3, #1
 8003352:	2300      	movhi	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	e006      	b.n	8003366 <HAL_I2C_Init+0x92>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4a7d      	ldr	r2, [pc, #500]	; (8003550 <HAL_I2C_Init+0x27c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	bf94      	ite	ls
 8003360:	2301      	movls	r3, #1
 8003362:	2300      	movhi	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e0e7      	b.n	800353e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4a78      	ldr	r2, [pc, #480]	; (8003554 <HAL_I2C_Init+0x280>)
 8003372:	fba2 2303 	umull	r2, r3, r2, r3
 8003376:	0c9b      	lsrs	r3, r3, #18
 8003378:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	430a      	orrs	r2, r1
 800338c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	4a6a      	ldr	r2, [pc, #424]	; (8003548 <HAL_I2C_Init+0x274>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d802      	bhi.n	80033a8 <HAL_I2C_Init+0xd4>
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	3301      	adds	r3, #1
 80033a6:	e009      	b.n	80033bc <HAL_I2C_Init+0xe8>
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033ae:	fb02 f303 	mul.w	r3, r2, r3
 80033b2:	4a69      	ldr	r2, [pc, #420]	; (8003558 <HAL_I2C_Init+0x284>)
 80033b4:	fba2 2303 	umull	r2, r3, r2, r3
 80033b8:	099b      	lsrs	r3, r3, #6
 80033ba:	3301      	adds	r3, #1
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	430b      	orrs	r3, r1
 80033c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	495c      	ldr	r1, [pc, #368]	; (8003548 <HAL_I2C_Init+0x274>)
 80033d8:	428b      	cmp	r3, r1
 80033da:	d819      	bhi.n	8003410 <HAL_I2C_Init+0x13c>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	1e59      	subs	r1, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80033ea:	1c59      	adds	r1, r3, #1
 80033ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033f0:	400b      	ands	r3, r1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <HAL_I2C_Init+0x138>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	1e59      	subs	r1, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	fbb1 f3f3 	udiv	r3, r1, r3
 8003404:	3301      	adds	r3, #1
 8003406:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800340a:	e051      	b.n	80034b0 <HAL_I2C_Init+0x1dc>
 800340c:	2304      	movs	r3, #4
 800340e:	e04f      	b.n	80034b0 <HAL_I2C_Init+0x1dc>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d111      	bne.n	800343c <HAL_I2C_Init+0x168>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1e58      	subs	r0, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6859      	ldr	r1, [r3, #4]
 8003420:	460b      	mov	r3, r1
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	440b      	add	r3, r1
 8003426:	fbb0 f3f3 	udiv	r3, r0, r3
 800342a:	3301      	adds	r3, #1
 800342c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003430:	2b00      	cmp	r3, #0
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	e012      	b.n	8003462 <HAL_I2C_Init+0x18e>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	1e58      	subs	r0, r3, #1
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6859      	ldr	r1, [r3, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	0099      	lsls	r1, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003452:	3301      	adds	r3, #1
 8003454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003458:	2b00      	cmp	r3, #0
 800345a:	bf0c      	ite	eq
 800345c:	2301      	moveq	r3, #1
 800345e:	2300      	movne	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <HAL_I2C_Init+0x196>
 8003466:	2301      	movs	r3, #1
 8003468:	e022      	b.n	80034b0 <HAL_I2C_Init+0x1dc>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10e      	bne.n	8003490 <HAL_I2C_Init+0x1bc>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	1e58      	subs	r0, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6859      	ldr	r1, [r3, #4]
 800347a:	460b      	mov	r3, r1
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	440b      	add	r3, r1
 8003480:	fbb0 f3f3 	udiv	r3, r0, r3
 8003484:	3301      	adds	r3, #1
 8003486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800348e:	e00f      	b.n	80034b0 <HAL_I2C_Init+0x1dc>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1e58      	subs	r0, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6859      	ldr	r1, [r3, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	0099      	lsls	r1, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034a6:	3301      	adds	r3, #1
 80034a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	6809      	ldr	r1, [r1, #0]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69da      	ldr	r2, [r3, #28]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6911      	ldr	r1, [r2, #16]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	68d2      	ldr	r2, [r2, #12]
 80034ea:	4311      	orrs	r1, r2
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6812      	ldr	r2, [r2, #0]
 80034f0:	430b      	orrs	r3, r1
 80034f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695a      	ldr	r2, [r3, #20]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2220      	movs	r2, #32
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	000186a0 	.word	0x000186a0
 800354c:	001e847f 	.word	0x001e847f
 8003550:	003d08ff 	.word	0x003d08ff
 8003554:	431bde83 	.word	0x431bde83
 8003558:	10624dd3 	.word	0x10624dd3

0800355c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af02      	add	r7, sp, #8
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	461a      	mov	r2, r3
 8003568:	460b      	mov	r3, r1
 800356a:	817b      	strh	r3, [r7, #10]
 800356c:	4613      	mov	r3, r2
 800356e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003570:	f7ff fc06 	bl	8002d80 <HAL_GetTick>
 8003574:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b20      	cmp	r3, #32
 8003580:	f040 80e0 	bne.w	8003744 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	2319      	movs	r3, #25
 800358a:	2201      	movs	r2, #1
 800358c:	4970      	ldr	r1, [pc, #448]	; (8003750 <HAL_I2C_Master_Transmit+0x1f4>)
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f001 f972 	bl	8004878 <I2C_WaitOnFlagUntilTimeout>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800359a:	2302      	movs	r3, #2
 800359c:	e0d3      	b.n	8003746 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_I2C_Master_Transmit+0x50>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e0cc      	b.n	8003746 <HAL_I2C_Master_Transmit+0x1ea>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d007      	beq.n	80035d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 0201 	orr.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2221      	movs	r2, #33	; 0x21
 80035e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2210      	movs	r2, #16
 80035ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	893a      	ldrh	r2, [r7, #8]
 8003602:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4a50      	ldr	r2, [pc, #320]	; (8003754 <HAL_I2C_Master_Transmit+0x1f8>)
 8003612:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003614:	8979      	ldrh	r1, [r7, #10]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	6a3a      	ldr	r2, [r7, #32]
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 fe5e 	bl	80042dc <I2C_MasterRequestWrite>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e08d      	b.n	8003746 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362a:	2300      	movs	r3, #0
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003640:	e066      	b.n	8003710 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	6a39      	ldr	r1, [r7, #32]
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f001 f9ec 	bl	8004a24 <I2C_WaitOnTXEFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00d      	beq.n	800366e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	2b04      	cmp	r3, #4
 8003658:	d107      	bne.n	800366a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003668:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e06b      	b.n	8003746 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	781a      	ldrb	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d11b      	bne.n	80036e4 <HAL_I2C_Master_Transmit+0x188>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d017      	beq.n	80036e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	781a      	ldrb	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	6a39      	ldr	r1, [r7, #32]
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f001 f9dc 	bl	8004aa6 <I2C_WaitOnBTFFlagUntilTimeout>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00d      	beq.n	8003710 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d107      	bne.n	800370c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800370a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e01a      	b.n	8003746 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003714:	2b00      	cmp	r3, #0
 8003716:	d194      	bne.n	8003642 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003726:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	e000      	b.n	8003746 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003744:	2302      	movs	r3, #2
  }
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	00100002 	.word	0x00100002
 8003754:	ffff0000 	.word	0xffff0000

08003758 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08c      	sub	sp, #48	; 0x30
 800375c:	af02      	add	r7, sp, #8
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	461a      	mov	r2, r3
 8003764:	460b      	mov	r3, r1
 8003766:	817b      	strh	r3, [r7, #10]
 8003768:	4613      	mov	r3, r2
 800376a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003770:	f7ff fb06 	bl	8002d80 <HAL_GetTick>
 8003774:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b20      	cmp	r3, #32
 8003780:	f040 823f 	bne.w	8003c02 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	2319      	movs	r3, #25
 800378a:	2201      	movs	r2, #1
 800378c:	497f      	ldr	r1, [pc, #508]	; (800398c <HAL_I2C_Master_Receive+0x234>)
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f001 f872 	bl	8004878 <I2C_WaitOnFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800379a:	2302      	movs	r3, #2
 800379c:	e232      	b.n	8003c04 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_I2C_Master_Receive+0x54>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e22b      	b.n	8003c04 <HAL_I2C_Master_Receive+0x4ac>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d007      	beq.n	80037d2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f042 0201 	orr.w	r2, r2, #1
 80037d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2222      	movs	r2, #34	; 0x22
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2210      	movs	r2, #16
 80037ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	893a      	ldrh	r2, [r7, #8]
 8003802:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003808:	b29a      	uxth	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4a5f      	ldr	r2, [pc, #380]	; (8003990 <HAL_I2C_Master_Receive+0x238>)
 8003812:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003814:	8979      	ldrh	r1, [r7, #10]
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 fde0 	bl	80043e0 <I2C_MasterRequestRead>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e1ec      	b.n	8003c04 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382e:	2b00      	cmp	r3, #0
 8003830:	d113      	bne.n	800385a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	61fb      	str	r3, [r7, #28]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	e1c0      	b.n	8003bdc <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385e:	2b01      	cmp	r3, #1
 8003860:	d11e      	bne.n	80038a0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003870:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003872:	b672      	cpsid	i
}
 8003874:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003876:	2300      	movs	r3, #0
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	61bb      	str	r3, [r7, #24]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	61bb      	str	r3, [r7, #24]
 800388a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800389a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800389c:	b662      	cpsie	i
}
 800389e:	e035      	b.n	800390c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d11e      	bne.n	80038e6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038b8:	b672      	cpsid	i
}
 80038ba:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038bc:	2300      	movs	r3, #0
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038e2:	b662      	cpsie	i
}
 80038e4:	e012      	b.n	800390c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f6:	2300      	movs	r3, #0
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	613b      	str	r3, [r7, #16]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800390c:	e166      	b.n	8003bdc <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003912:	2b03      	cmp	r3, #3
 8003914:	f200 811f 	bhi.w	8003b56 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391c:	2b01      	cmp	r3, #1
 800391e:	d123      	bne.n	8003968 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003922:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f001 f8ff 	bl	8004b28 <I2C_WaitOnRXNEFlagUntilTimeout>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e167      	b.n	8003c04 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691a      	ldr	r2, [r3, #16]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395c:	b29b      	uxth	r3, r3
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003966:	e139      	b.n	8003bdc <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396c:	2b02      	cmp	r3, #2
 800396e:	d152      	bne.n	8003a16 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003976:	2200      	movs	r2, #0
 8003978:	4906      	ldr	r1, [pc, #24]	; (8003994 <HAL_I2C_Master_Receive+0x23c>)
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 ff7c 	bl	8004878 <I2C_WaitOnFlagUntilTimeout>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d008      	beq.n	8003998 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e13c      	b.n	8003c04 <HAL_I2C_Master_Receive+0x4ac>
 800398a:	bf00      	nop
 800398c:	00100002 	.word	0x00100002
 8003990:	ffff0000 	.word	0xffff0000
 8003994:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003998:	b672      	cpsid	i
}
 800399a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b29a      	uxth	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80039de:	b662      	cpsie	i
}
 80039e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a14:	e0e2      	b.n	8003bdc <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	497b      	ldr	r1, [pc, #492]	; (8003c0c <HAL_I2C_Master_Receive+0x4b4>)
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 ff29 	bl	8004878 <I2C_WaitOnFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0e9      	b.n	8003c04 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a40:	b672      	cpsid	i
}
 8003a42:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a76:	4b66      	ldr	r3, [pc, #408]	; (8003c10 <HAL_I2C_Master_Receive+0x4b8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	08db      	lsrs	r3, r3, #3
 8003a7c:	4a65      	ldr	r2, [pc, #404]	; (8003c14 <HAL_I2C_Master_Receive+0x4bc>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	0a1a      	lsrs	r2, r3, #8
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	00da      	lsls	r2, r3, #3
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d118      	bne.n	8003ace <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	f043 0220 	orr.w	r2, r3, #32
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003abe:	b662      	cpsie	i
}
 8003ac0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e09a      	b.n	8003c04 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d1d9      	bne.n	8003a90 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691a      	ldr	r2, [r3, #16]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b1e:	b662      	cpsie	i
}
 8003b20:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	1c5a      	adds	r2, r3, #1
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b54:	e042      	b.n	8003bdc <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 ffe4 	bl	8004b28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e04c      	b.n	8003c04 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d118      	bne.n	8003bdc <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f47f ae94 	bne.w	800390e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e000      	b.n	8003c04 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8003c02:	2302      	movs	r3, #2
  }
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3728      	adds	r7, #40	; 0x28
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	00010004 	.word	0x00010004
 8003c10:	20000000 	.word	0x20000000
 8003c14:	14f8b589 	.word	0x14f8b589

08003c18 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b088      	sub	sp, #32
 8003c1c:	af02      	add	r7, sp, #8
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	4608      	mov	r0, r1
 8003c22:	4611      	mov	r1, r2
 8003c24:	461a      	mov	r2, r3
 8003c26:	4603      	mov	r3, r0
 8003c28:	817b      	strh	r3, [r7, #10]
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	813b      	strh	r3, [r7, #8]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c32:	f7ff f8a5 	bl	8002d80 <HAL_GetTick>
 8003c36:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b20      	cmp	r3, #32
 8003c42:	f040 80d9 	bne.w	8003df8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	2319      	movs	r3, #25
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	496d      	ldr	r1, [pc, #436]	; (8003e04 <HAL_I2C_Mem_Write+0x1ec>)
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 fe11 	bl	8004878 <I2C_WaitOnFlagUntilTimeout>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e0cc      	b.n	8003dfa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_I2C_Mem_Write+0x56>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e0c5      	b.n	8003dfa <HAL_I2C_Mem_Write+0x1e2>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d007      	beq.n	8003c94 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ca2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2221      	movs	r2, #33	; 0x21
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2240      	movs	r2, #64	; 0x40
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a3a      	ldr	r2, [r7, #32]
 8003cbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4a4d      	ldr	r2, [pc, #308]	; (8003e08 <HAL_I2C_Mem_Write+0x1f0>)
 8003cd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cd6:	88f8      	ldrh	r0, [r7, #6]
 8003cd8:	893a      	ldrh	r2, [r7, #8]
 8003cda:	8979      	ldrh	r1, [r7, #10]
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	9301      	str	r3, [sp, #4]
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fc48 	bl	800457c <I2C_RequestMemoryWrite>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d052      	beq.n	8003d98 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e081      	b.n	8003dfa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 fe92 	bl	8004a24 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00d      	beq.n	8003d22 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d107      	bne.n	8003d1e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e06b      	b.n	8003dfa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	781a      	ldrb	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d11b      	bne.n	8003d98 <HAL_I2C_Mem_Write+0x180>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d017      	beq.n	8003d98 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	781a      	ldrb	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1aa      	bne.n	8003cf6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 fe7e 	bl	8004aa6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00d      	beq.n	8003dcc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d107      	bne.n	8003dc8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e016      	b.n	8003dfa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	e000      	b.n	8003dfa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003df8:	2302      	movs	r3, #2
  }
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	00100002 	.word	0x00100002
 8003e08:	ffff0000 	.word	0xffff0000

08003e0c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08c      	sub	sp, #48	; 0x30
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	4608      	mov	r0, r1
 8003e16:	4611      	mov	r1, r2
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	817b      	strh	r3, [r7, #10]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	813b      	strh	r3, [r7, #8]
 8003e22:	4613      	mov	r3, r2
 8003e24:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e2a:	f7fe ffa9 	bl	8002d80 <HAL_GetTick>
 8003e2e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	f040 8244 	bne.w	80042c6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	2319      	movs	r3, #25
 8003e44:	2201      	movs	r2, #1
 8003e46:	4982      	ldr	r1, [pc, #520]	; (8004050 <HAL_I2C_Mem_Read+0x244>)
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 fd15 	bl	8004878 <I2C_WaitOnFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003e54:	2302      	movs	r3, #2
 8003e56:	e237      	b.n	80042c8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d101      	bne.n	8003e66 <HAL_I2C_Mem_Read+0x5a>
 8003e62:	2302      	movs	r3, #2
 8003e64:	e230      	b.n	80042c8 <HAL_I2C_Mem_Read+0x4bc>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d007      	beq.n	8003e8c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2222      	movs	r2, #34	; 0x22
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2240      	movs	r2, #64	; 0x40
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a62      	ldr	r2, [pc, #392]	; (8004054 <HAL_I2C_Mem_Read+0x248>)
 8003ecc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ece:	88f8      	ldrh	r0, [r7, #6]
 8003ed0:	893a      	ldrh	r2, [r7, #8]
 8003ed2:	8979      	ldrh	r1, [r7, #10]
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	9301      	str	r3, [sp, #4]
 8003ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	4603      	mov	r3, r0
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 fbe2 	bl	80046a8 <I2C_RequestMemoryRead>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e1ec      	b.n	80042c8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d113      	bne.n	8003f1e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61fb      	str	r3, [r7, #28]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	61fb      	str	r3, [r7, #28]
 8003f0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	e1c0      	b.n	80042a0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d11e      	bne.n	8003f64 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f36:	b672      	cpsid	i
}
 8003f38:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61bb      	str	r3, [r7, #24]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	61bb      	str	r3, [r7, #24]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	61bb      	str	r3, [r7, #24]
 8003f4e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f60:	b662      	cpsie	i
}
 8003f62:	e035      	b.n	8003fd0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d11e      	bne.n	8003faa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f7c:	b672      	cpsid	i
}
 8003f7e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003fa6:	b662      	cpsie	i
}
 8003fa8:	e012      	b.n	8003fd0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fb8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fba:	2300      	movs	r3, #0
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003fd0:	e166      	b.n	80042a0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	f200 811f 	bhi.w	800421a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d123      	bne.n	800402c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 fd9d 	bl	8004b28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e167      	b.n	80042c8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	855a      	strh	r2, [r3, #42]	; 0x2a
 800402a:	e139      	b.n	80042a0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004030:	2b02      	cmp	r3, #2
 8004032:	d152      	bne.n	80040da <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403a:	2200      	movs	r2, #0
 800403c:	4906      	ldr	r1, [pc, #24]	; (8004058 <HAL_I2C_Mem_Read+0x24c>)
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fc1a 	bl	8004878 <I2C_WaitOnFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d008      	beq.n	800405c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e13c      	b.n	80042c8 <HAL_I2C_Mem_Read+0x4bc>
 800404e:	bf00      	nop
 8004050:	00100002 	.word	0x00100002
 8004054:	ffff0000 	.word	0xffff0000
 8004058:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800405c:	b672      	cpsid	i
}
 800405e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800406e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691a      	ldr	r2, [r3, #16]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80040a2:	b662      	cpsie	i
}
 80040a4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	b2d2      	uxtb	r2, r2
 80040b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040d8:	e0e2      	b.n	80042a0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e0:	2200      	movs	r2, #0
 80040e2:	497b      	ldr	r1, [pc, #492]	; (80042d0 <HAL_I2C_Mem_Read+0x4c4>)
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 fbc7 	bl	8004878 <I2C_WaitOnFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0e9      	b.n	80042c8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004102:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004104:	b672      	cpsid	i
}
 8004106:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800413a:	4b66      	ldr	r3, [pc, #408]	; (80042d4 <HAL_I2C_Mem_Read+0x4c8>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	08db      	lsrs	r3, r3, #3
 8004140:	4a65      	ldr	r2, [pc, #404]	; (80042d8 <HAL_I2C_Mem_Read+0x4cc>)
 8004142:	fba2 2303 	umull	r2, r3, r2, r3
 8004146:	0a1a      	lsrs	r2, r3, #8
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	00da      	lsls	r2, r3, #3
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	3b01      	subs	r3, #1
 8004158:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d118      	bne.n	8004192 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2220      	movs	r2, #32
 800416a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	f043 0220 	orr.w	r2, r3, #32
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004182:	b662      	cpsie	i
}
 8004184:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e09a      	b.n	80042c8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b04      	cmp	r3, #4
 800419e:	d1d9      	bne.n	8004154 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80041e2:	b662      	cpsie	i
}
 80041e4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004218:	e042      	b.n	80042a0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800421a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 fc82 	bl	8004b28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e04c      	b.n	80042c8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b04      	cmp	r3, #4
 800426c:	d118      	bne.n	80042a0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004296:	b29b      	uxth	r3, r3
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f47f ae94 	bne.w	8003fd2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e000      	b.n	80042c8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80042c6:	2302      	movs	r3, #2
  }
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3728      	adds	r7, #40	; 0x28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	00010004 	.word	0x00010004
 80042d4:	20000000 	.word	0x20000000
 80042d8:	14f8b589 	.word	0x14f8b589

080042dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af02      	add	r7, sp, #8
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	607a      	str	r2, [r7, #4]
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	460b      	mov	r3, r1
 80042ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d006      	beq.n	8004306 <I2C_MasterRequestWrite+0x2a>
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d003      	beq.n	8004306 <I2C_MasterRequestWrite+0x2a>
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004304:	d108      	bne.n	8004318 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	e00b      	b.n	8004330 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	2b12      	cmp	r3, #18
 800431e:	d107      	bne.n	8004330 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800432e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 fa9b 	bl	8004878 <I2C_WaitOnFlagUntilTimeout>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00d      	beq.n	8004364 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004356:	d103      	bne.n	8004360 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800435e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e035      	b.n	80043d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800436c:	d108      	bne.n	8004380 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800436e:	897b      	ldrh	r3, [r7, #10]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	461a      	mov	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800437c:	611a      	str	r2, [r3, #16]
 800437e:	e01b      	b.n	80043b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004380:	897b      	ldrh	r3, [r7, #10]
 8004382:	11db      	asrs	r3, r3, #7
 8004384:	b2db      	uxtb	r3, r3
 8004386:	f003 0306 	and.w	r3, r3, #6
 800438a:	b2db      	uxtb	r3, r3
 800438c:	f063 030f 	orn	r3, r3, #15
 8004390:	b2da      	uxtb	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	490e      	ldr	r1, [pc, #56]	; (80043d8 <I2C_MasterRequestWrite+0xfc>)
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 fac1 	bl	8004926 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e010      	b.n	80043d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80043ae:	897b      	ldrh	r3, [r7, #10]
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	4907      	ldr	r1, [pc, #28]	; (80043dc <I2C_MasterRequestWrite+0x100>)
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 fab1 	bl	8004926 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	00010008 	.word	0x00010008
 80043dc:	00010002 	.word	0x00010002

080043e0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af02      	add	r7, sp, #8
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	607a      	str	r2, [r7, #4]
 80043ea:	603b      	str	r3, [r7, #0]
 80043ec:	460b      	mov	r3, r1
 80043ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004404:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2b08      	cmp	r3, #8
 800440a:	d006      	beq.n	800441a <I2C_MasterRequestRead+0x3a>
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d003      	beq.n	800441a <I2C_MasterRequestRead+0x3a>
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004418:	d108      	bne.n	800442c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	e00b      	b.n	8004444 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004430:	2b11      	cmp	r3, #17
 8004432:	d107      	bne.n	8004444 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004442:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 fa11 	bl	8004878 <I2C_WaitOnFlagUntilTimeout>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00d      	beq.n	8004478 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800446a:	d103      	bne.n	8004474 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004472:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e079      	b.n	800456c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004480:	d108      	bne.n	8004494 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004482:	897b      	ldrh	r3, [r7, #10]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	f043 0301 	orr.w	r3, r3, #1
 800448a:	b2da      	uxtb	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	611a      	str	r2, [r3, #16]
 8004492:	e05f      	b.n	8004554 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004494:	897b      	ldrh	r3, [r7, #10]
 8004496:	11db      	asrs	r3, r3, #7
 8004498:	b2db      	uxtb	r3, r3
 800449a:	f003 0306 	and.w	r3, r3, #6
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	f063 030f 	orn	r3, r3, #15
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	4930      	ldr	r1, [pc, #192]	; (8004574 <I2C_MasterRequestRead+0x194>)
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 fa37 	bl	8004926 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e054      	b.n	800456c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80044c2:	897b      	ldrh	r3, [r7, #10]
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	4929      	ldr	r1, [pc, #164]	; (8004578 <I2C_MasterRequestRead+0x198>)
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 fa27 	bl	8004926 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e044      	b.n	800456c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044e2:	2300      	movs	r3, #0
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004506:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 f9af 	bl	8004878 <I2C_WaitOnFlagUntilTimeout>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00d      	beq.n	800453c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800452e:	d103      	bne.n	8004538 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004536:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e017      	b.n	800456c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800453c:	897b      	ldrh	r3, [r7, #10]
 800453e:	11db      	asrs	r3, r3, #7
 8004540:	b2db      	uxtb	r3, r3
 8004542:	f003 0306 	and.w	r3, r3, #6
 8004546:	b2db      	uxtb	r3, r3
 8004548:	f063 030e 	orn	r3, r3, #14
 800454c:	b2da      	uxtb	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	4907      	ldr	r1, [pc, #28]	; (8004578 <I2C_MasterRequestRead+0x198>)
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 f9e3 	bl	8004926 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	00010008 	.word	0x00010008
 8004578:	00010002 	.word	0x00010002

0800457c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b088      	sub	sp, #32
 8004580:	af02      	add	r7, sp, #8
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	4608      	mov	r0, r1
 8004586:	4611      	mov	r1, r2
 8004588:	461a      	mov	r2, r3
 800458a:	4603      	mov	r3, r0
 800458c:	817b      	strh	r3, [r7, #10]
 800458e:	460b      	mov	r3, r1
 8004590:	813b      	strh	r3, [r7, #8]
 8004592:	4613      	mov	r3, r2
 8004594:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 f960 	bl	8004878 <I2C_WaitOnFlagUntilTimeout>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00d      	beq.n	80045da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045cc:	d103      	bne.n	80045d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e05f      	b.n	800469a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045da:	897b      	ldrh	r3, [r7, #10]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	461a      	mov	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	6a3a      	ldr	r2, [r7, #32]
 80045ee:	492d      	ldr	r1, [pc, #180]	; (80046a4 <I2C_RequestMemoryWrite+0x128>)
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 f998 	bl	8004926 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e04c      	b.n	800469a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004600:	2300      	movs	r3, #0
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004618:	6a39      	ldr	r1, [r7, #32]
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 fa02 	bl	8004a24 <I2C_WaitOnTXEFlagUntilTimeout>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00d      	beq.n	8004642 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	2b04      	cmp	r3, #4
 800462c:	d107      	bne.n	800463e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800463c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e02b      	b.n	800469a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004642:	88fb      	ldrh	r3, [r7, #6]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d105      	bne.n	8004654 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004648:	893b      	ldrh	r3, [r7, #8]
 800464a:	b2da      	uxtb	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	611a      	str	r2, [r3, #16]
 8004652:	e021      	b.n	8004698 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004654:	893b      	ldrh	r3, [r7, #8]
 8004656:	0a1b      	lsrs	r3, r3, #8
 8004658:	b29b      	uxth	r3, r3
 800465a:	b2da      	uxtb	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004664:	6a39      	ldr	r1, [r7, #32]
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f9dc 	bl	8004a24 <I2C_WaitOnTXEFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00d      	beq.n	800468e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	2b04      	cmp	r3, #4
 8004678:	d107      	bne.n	800468a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004688:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e005      	b.n	800469a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800468e:	893b      	ldrh	r3, [r7, #8]
 8004690:	b2da      	uxtb	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	00010002 	.word	0x00010002

080046a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	4608      	mov	r0, r1
 80046b2:	4611      	mov	r1, r2
 80046b4:	461a      	mov	r2, r3
 80046b6:	4603      	mov	r3, r0
 80046b8:	817b      	strh	r3, [r7, #10]
 80046ba:	460b      	mov	r3, r1
 80046bc:	813b      	strh	r3, [r7, #8]
 80046be:	4613      	mov	r3, r2
 80046c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 f8c2 	bl	8004878 <I2C_WaitOnFlagUntilTimeout>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00d      	beq.n	8004716 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004708:	d103      	bne.n	8004712 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004710:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e0aa      	b.n	800486c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004716:	897b      	ldrh	r3, [r7, #10]
 8004718:	b2db      	uxtb	r3, r3
 800471a:	461a      	mov	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004724:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	6a3a      	ldr	r2, [r7, #32]
 800472a:	4952      	ldr	r1, [pc, #328]	; (8004874 <I2C_RequestMemoryRead+0x1cc>)
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 f8fa 	bl	8004926 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e097      	b.n	800486c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800473c:	2300      	movs	r3, #0
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004754:	6a39      	ldr	r1, [r7, #32]
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 f964 	bl	8004a24 <I2C_WaitOnTXEFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00d      	beq.n	800477e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	2b04      	cmp	r3, #4
 8004768:	d107      	bne.n	800477a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004778:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e076      	b.n	800486c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800477e:	88fb      	ldrh	r3, [r7, #6]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d105      	bne.n	8004790 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004784:	893b      	ldrh	r3, [r7, #8]
 8004786:	b2da      	uxtb	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	611a      	str	r2, [r3, #16]
 800478e:	e021      	b.n	80047d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004790:	893b      	ldrh	r3, [r7, #8]
 8004792:	0a1b      	lsrs	r3, r3, #8
 8004794:	b29b      	uxth	r3, r3
 8004796:	b2da      	uxtb	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800479e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a0:	6a39      	ldr	r1, [r7, #32]
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 f93e 	bl	8004a24 <I2C_WaitOnTXEFlagUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00d      	beq.n	80047ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d107      	bne.n	80047c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e050      	b.n	800486c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047ca:	893b      	ldrh	r3, [r7, #8]
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d6:	6a39      	ldr	r1, [r7, #32]
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 f923 	bl	8004a24 <I2C_WaitOnTXEFlagUntilTimeout>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00d      	beq.n	8004800 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d107      	bne.n	80047fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e035      	b.n	800486c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800480e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	2200      	movs	r2, #0
 8004818:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 f82b 	bl	8004878 <I2C_WaitOnFlagUntilTimeout>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00d      	beq.n	8004844 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004836:	d103      	bne.n	8004840 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800483e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e013      	b.n	800486c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004844:	897b      	ldrh	r3, [r7, #10]
 8004846:	b2db      	uxtb	r3, r3
 8004848:	f043 0301 	orr.w	r3, r3, #1
 800484c:	b2da      	uxtb	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	6a3a      	ldr	r2, [r7, #32]
 8004858:	4906      	ldr	r1, [pc, #24]	; (8004874 <I2C_RequestMemoryRead+0x1cc>)
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 f863 	bl	8004926 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	00010002 	.word	0x00010002

08004878 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	603b      	str	r3, [r7, #0]
 8004884:	4613      	mov	r3, r2
 8004886:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004888:	e025      	b.n	80048d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004890:	d021      	beq.n	80048d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004892:	f7fe fa75 	bl	8002d80 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d302      	bcc.n	80048a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d116      	bne.n	80048d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	f043 0220 	orr.w	r2, r3, #32
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e023      	b.n	800491e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	0c1b      	lsrs	r3, r3, #16
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d10d      	bne.n	80048fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	43da      	mvns	r2, r3
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	4013      	ands	r3, r2
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	bf0c      	ite	eq
 80048f2:	2301      	moveq	r3, #1
 80048f4:	2300      	movne	r3, #0
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	461a      	mov	r2, r3
 80048fa:	e00c      	b.n	8004916 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	43da      	mvns	r2, r3
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4013      	ands	r3, r2
 8004908:	b29b      	uxth	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	bf0c      	ite	eq
 800490e:	2301      	moveq	r3, #1
 8004910:	2300      	movne	r3, #0
 8004912:	b2db      	uxtb	r3, r3
 8004914:	461a      	mov	r2, r3
 8004916:	79fb      	ldrb	r3, [r7, #7]
 8004918:	429a      	cmp	r2, r3
 800491a:	d0b6      	beq.n	800488a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	607a      	str	r2, [r7, #4]
 8004932:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004934:	e051      	b.n	80049da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004944:	d123      	bne.n	800498e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004954:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800495e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2220      	movs	r2, #32
 800496a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	f043 0204 	orr.w	r2, r3, #4
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e046      	b.n	8004a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004994:	d021      	beq.n	80049da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004996:	f7fe f9f3 	bl	8002d80 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d302      	bcc.n	80049ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d116      	bne.n	80049da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f043 0220 	orr.w	r2, r3, #32
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e020      	b.n	8004a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	0c1b      	lsrs	r3, r3, #16
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d10c      	bne.n	80049fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	43da      	mvns	r2, r3
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	4013      	ands	r3, r2
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	bf14      	ite	ne
 80049f6:	2301      	movne	r3, #1
 80049f8:	2300      	moveq	r3, #0
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	e00b      	b.n	8004a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	43da      	mvns	r2, r3
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	bf14      	ite	ne
 8004a10:	2301      	movne	r3, #1
 8004a12:	2300      	moveq	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d18d      	bne.n	8004936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a30:	e02d      	b.n	8004a8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 f8ce 	bl	8004bd4 <I2C_IsAcknowledgeFailed>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e02d      	b.n	8004a9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a48:	d021      	beq.n	8004a8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a4a:	f7fe f999 	bl	8002d80 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d302      	bcc.n	8004a60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d116      	bne.n	8004a8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	f043 0220 	orr.w	r2, r3, #32
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e007      	b.n	8004a9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a98:	2b80      	cmp	r3, #128	; 0x80
 8004a9a:	d1ca      	bne.n	8004a32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b084      	sub	sp, #16
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ab2:	e02d      	b.n	8004b10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 f88d 	bl	8004bd4 <I2C_IsAcknowledgeFailed>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e02d      	b.n	8004b20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aca:	d021      	beq.n	8004b10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004acc:	f7fe f958 	bl	8002d80 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d302      	bcc.n	8004ae2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d116      	bne.n	8004b10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	f043 0220 	orr.w	r2, r3, #32
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e007      	b.n	8004b20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	f003 0304 	and.w	r3, r3, #4
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d1ca      	bne.n	8004ab4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b34:	e042      	b.n	8004bbc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	2b10      	cmp	r3, #16
 8004b42:	d119      	bne.n	8004b78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0210 	mvn.w	r2, #16
 8004b4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e029      	b.n	8004bcc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b78:	f7fe f902 	bl	8002d80 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d302      	bcc.n	8004b8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d116      	bne.n	8004bbc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	f043 0220 	orr.w	r2, r3, #32
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e007      	b.n	8004bcc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc6:	2b40      	cmp	r3, #64	; 0x40
 8004bc8:	d1b5      	bne.n	8004b36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bea:	d11b      	bne.n	8004c24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bf4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	f043 0204 	orr.w	r2, r3, #4
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e000      	b.n	8004c26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr

08004c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e26c      	b.n	800511c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 8087 	beq.w	8004d5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c50:	4b92      	ldr	r3, [pc, #584]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f003 030c 	and.w	r3, r3, #12
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d00c      	beq.n	8004c76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c5c:	4b8f      	ldr	r3, [pc, #572]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f003 030c 	and.w	r3, r3, #12
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d112      	bne.n	8004c8e <HAL_RCC_OscConfig+0x5e>
 8004c68:	4b8c      	ldr	r3, [pc, #560]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c74:	d10b      	bne.n	8004c8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c76:	4b89      	ldr	r3, [pc, #548]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d06c      	beq.n	8004d5c <HAL_RCC_OscConfig+0x12c>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d168      	bne.n	8004d5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e246      	b.n	800511c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c96:	d106      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x76>
 8004c98:	4b80      	ldr	r3, [pc, #512]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a7f      	ldr	r2, [pc, #508]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	e02e      	b.n	8004d04 <HAL_RCC_OscConfig+0xd4>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10c      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x98>
 8004cae:	4b7b      	ldr	r3, [pc, #492]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a7a      	ldr	r2, [pc, #488]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	4b78      	ldr	r3, [pc, #480]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a77      	ldr	r2, [pc, #476]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	e01d      	b.n	8004d04 <HAL_RCC_OscConfig+0xd4>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cd0:	d10c      	bne.n	8004cec <HAL_RCC_OscConfig+0xbc>
 8004cd2:	4b72      	ldr	r3, [pc, #456]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a71      	ldr	r2, [pc, #452]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	4b6f      	ldr	r3, [pc, #444]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a6e      	ldr	r2, [pc, #440]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	e00b      	b.n	8004d04 <HAL_RCC_OscConfig+0xd4>
 8004cec:	4b6b      	ldr	r3, [pc, #428]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a6a      	ldr	r2, [pc, #424]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	4b68      	ldr	r3, [pc, #416]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a67      	ldr	r2, [pc, #412]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d013      	beq.n	8004d34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0c:	f7fe f838 	bl	8002d80 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d14:	f7fe f834 	bl	8002d80 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b64      	cmp	r3, #100	; 0x64
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e1fa      	b.n	800511c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d26:	4b5d      	ldr	r3, [pc, #372]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0f0      	beq.n	8004d14 <HAL_RCC_OscConfig+0xe4>
 8004d32:	e014      	b.n	8004d5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d34:	f7fe f824 	bl	8002d80 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d3c:	f7fe f820 	bl	8002d80 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b64      	cmp	r3, #100	; 0x64
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e1e6      	b.n	800511c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d4e:	4b53      	ldr	r3, [pc, #332]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f0      	bne.n	8004d3c <HAL_RCC_OscConfig+0x10c>
 8004d5a:	e000      	b.n	8004d5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d063      	beq.n	8004e32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d6a:	4b4c      	ldr	r3, [pc, #304]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f003 030c 	and.w	r3, r3, #12
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00b      	beq.n	8004d8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004d76:	4b49      	ldr	r3, [pc, #292]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f003 030c 	and.w	r3, r3, #12
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	d11c      	bne.n	8004dbc <HAL_RCC_OscConfig+0x18c>
 8004d82:	4b46      	ldr	r3, [pc, #280]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d116      	bne.n	8004dbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d8e:	4b43      	ldr	r3, [pc, #268]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d005      	beq.n	8004da6 <HAL_RCC_OscConfig+0x176>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d001      	beq.n	8004da6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e1ba      	b.n	800511c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da6:	4b3d      	ldr	r3, [pc, #244]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	4939      	ldr	r1, [pc, #228]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dba:	e03a      	b.n	8004e32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d020      	beq.n	8004e06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dc4:	4b36      	ldr	r3, [pc, #216]	; (8004ea0 <HAL_RCC_OscConfig+0x270>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dca:	f7fd ffd9 	bl	8002d80 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dd2:	f7fd ffd5 	bl	8002d80 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e19b      	b.n	800511c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de4:	4b2d      	ldr	r3, [pc, #180]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0f0      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df0:	4b2a      	ldr	r3, [pc, #168]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	4927      	ldr	r1, [pc, #156]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	600b      	str	r3, [r1, #0]
 8004e04:	e015      	b.n	8004e32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e06:	4b26      	ldr	r3, [pc, #152]	; (8004ea0 <HAL_RCC_OscConfig+0x270>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0c:	f7fd ffb8 	bl	8002d80 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e14:	f7fd ffb4 	bl	8002d80 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e17a      	b.n	800511c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e26:	4b1d      	ldr	r3, [pc, #116]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f0      	bne.n	8004e14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d03a      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d019      	beq.n	8004e7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e46:	4b17      	ldr	r3, [pc, #92]	; (8004ea4 <HAL_RCC_OscConfig+0x274>)
 8004e48:	2201      	movs	r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e4c:	f7fd ff98 	bl	8002d80 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e54:	f7fd ff94 	bl	8002d80 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e15a      	b.n	800511c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e66:	4b0d      	ldr	r3, [pc, #52]	; (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0f0      	beq.n	8004e54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004e72:	2001      	movs	r0, #1
 8004e74:	f000 fb08 	bl	8005488 <RCC_Delay>
 8004e78:	e01c      	b.n	8004eb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ea4 <HAL_RCC_OscConfig+0x274>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e80:	f7fd ff7e 	bl	8002d80 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e86:	e00f      	b.n	8004ea8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e88:	f7fd ff7a 	bl	8002d80 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d908      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e140      	b.n	800511c <HAL_RCC_OscConfig+0x4ec>
 8004e9a:	bf00      	nop
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	42420000 	.word	0x42420000
 8004ea4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ea8:	4b9e      	ldr	r3, [pc, #632]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1e9      	bne.n	8004e88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 80a6 	beq.w	800500e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ec6:	4b97      	ldr	r3, [pc, #604]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10d      	bne.n	8004eee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ed2:	4b94      	ldr	r3, [pc, #592]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	4a93      	ldr	r2, [pc, #588]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8004ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004edc:	61d3      	str	r3, [r2, #28]
 8004ede:	4b91      	ldr	r3, [pc, #580]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee6:	60bb      	str	r3, [r7, #8]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eea:	2301      	movs	r3, #1
 8004eec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eee:	4b8e      	ldr	r3, [pc, #568]	; (8005128 <HAL_RCC_OscConfig+0x4f8>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d118      	bne.n	8004f2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004efa:	4b8b      	ldr	r3, [pc, #556]	; (8005128 <HAL_RCC_OscConfig+0x4f8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a8a      	ldr	r2, [pc, #552]	; (8005128 <HAL_RCC_OscConfig+0x4f8>)
 8004f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f06:	f7fd ff3b 	bl	8002d80 <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f0e:	f7fd ff37 	bl	8002d80 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b64      	cmp	r3, #100	; 0x64
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e0fd      	b.n	800511c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f20:	4b81      	ldr	r3, [pc, #516]	; (8005128 <HAL_RCC_OscConfig+0x4f8>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0f0      	beq.n	8004f0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d106      	bne.n	8004f42 <HAL_RCC_OscConfig+0x312>
 8004f34:	4b7b      	ldr	r3, [pc, #492]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	4a7a      	ldr	r2, [pc, #488]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8004f3a:	f043 0301 	orr.w	r3, r3, #1
 8004f3e:	6213      	str	r3, [r2, #32]
 8004f40:	e02d      	b.n	8004f9e <HAL_RCC_OscConfig+0x36e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10c      	bne.n	8004f64 <HAL_RCC_OscConfig+0x334>
 8004f4a:	4b76      	ldr	r3, [pc, #472]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	4a75      	ldr	r2, [pc, #468]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	6213      	str	r3, [r2, #32]
 8004f56:	4b73      	ldr	r3, [pc, #460]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	4a72      	ldr	r2, [pc, #456]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8004f5c:	f023 0304 	bic.w	r3, r3, #4
 8004f60:	6213      	str	r3, [r2, #32]
 8004f62:	e01c      	b.n	8004f9e <HAL_RCC_OscConfig+0x36e>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	2b05      	cmp	r3, #5
 8004f6a:	d10c      	bne.n	8004f86 <HAL_RCC_OscConfig+0x356>
 8004f6c:	4b6d      	ldr	r3, [pc, #436]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	4a6c      	ldr	r2, [pc, #432]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8004f72:	f043 0304 	orr.w	r3, r3, #4
 8004f76:	6213      	str	r3, [r2, #32]
 8004f78:	4b6a      	ldr	r3, [pc, #424]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	4a69      	ldr	r2, [pc, #420]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8004f7e:	f043 0301 	orr.w	r3, r3, #1
 8004f82:	6213      	str	r3, [r2, #32]
 8004f84:	e00b      	b.n	8004f9e <HAL_RCC_OscConfig+0x36e>
 8004f86:	4b67      	ldr	r3, [pc, #412]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	4a66      	ldr	r2, [pc, #408]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8004f8c:	f023 0301 	bic.w	r3, r3, #1
 8004f90:	6213      	str	r3, [r2, #32]
 8004f92:	4b64      	ldr	r3, [pc, #400]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	4a63      	ldr	r2, [pc, #396]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8004f98:	f023 0304 	bic.w	r3, r3, #4
 8004f9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d015      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa6:	f7fd feeb 	bl	8002d80 <HAL_GetTick>
 8004faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fac:	e00a      	b.n	8004fc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fae:	f7fd fee7 	bl	8002d80 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e0ab      	b.n	800511c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc4:	4b57      	ldr	r3, [pc, #348]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0ee      	beq.n	8004fae <HAL_RCC_OscConfig+0x37e>
 8004fd0:	e014      	b.n	8004ffc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fd2:	f7fd fed5 	bl	8002d80 <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fd8:	e00a      	b.n	8004ff0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fda:	f7fd fed1 	bl	8002d80 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e095      	b.n	800511c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ff0:	4b4c      	ldr	r3, [pc, #304]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1ee      	bne.n	8004fda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ffc:	7dfb      	ldrb	r3, [r7, #23]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d105      	bne.n	800500e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005002:	4b48      	ldr	r3, [pc, #288]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	4a47      	ldr	r2, [pc, #284]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8005008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800500c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 8081 	beq.w	800511a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005018:	4b42      	ldr	r3, [pc, #264]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f003 030c 	and.w	r3, r3, #12
 8005020:	2b08      	cmp	r3, #8
 8005022:	d061      	beq.n	80050e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	2b02      	cmp	r3, #2
 800502a:	d146      	bne.n	80050ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800502c:	4b3f      	ldr	r3, [pc, #252]	; (800512c <HAL_RCC_OscConfig+0x4fc>)
 800502e:	2200      	movs	r2, #0
 8005030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005032:	f7fd fea5 	bl	8002d80 <HAL_GetTick>
 8005036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005038:	e008      	b.n	800504c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800503a:	f7fd fea1 	bl	8002d80 <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	2b02      	cmp	r3, #2
 8005046:	d901      	bls.n	800504c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e067      	b.n	800511c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800504c:	4b35      	ldr	r3, [pc, #212]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1f0      	bne.n	800503a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005060:	d108      	bne.n	8005074 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005062:	4b30      	ldr	r3, [pc, #192]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	492d      	ldr	r1, [pc, #180]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8005070:	4313      	orrs	r3, r2
 8005072:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005074:	4b2b      	ldr	r3, [pc, #172]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a19      	ldr	r1, [r3, #32]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	430b      	orrs	r3, r1
 8005086:	4927      	ldr	r1, [pc, #156]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 8005088:	4313      	orrs	r3, r2
 800508a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800508c:	4b27      	ldr	r3, [pc, #156]	; (800512c <HAL_RCC_OscConfig+0x4fc>)
 800508e:	2201      	movs	r2, #1
 8005090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005092:	f7fd fe75 	bl	8002d80 <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005098:	e008      	b.n	80050ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800509a:	f7fd fe71 	bl	8002d80 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e037      	b.n	800511c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050ac:	4b1d      	ldr	r3, [pc, #116]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0f0      	beq.n	800509a <HAL_RCC_OscConfig+0x46a>
 80050b8:	e02f      	b.n	800511a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ba:	4b1c      	ldr	r3, [pc, #112]	; (800512c <HAL_RCC_OscConfig+0x4fc>)
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c0:	f7fd fe5e 	bl	8002d80 <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c8:	f7fd fe5a 	bl	8002d80 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e020      	b.n	800511c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050da:	4b12      	ldr	r3, [pc, #72]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1f0      	bne.n	80050c8 <HAL_RCC_OscConfig+0x498>
 80050e6:	e018      	b.n	800511a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e013      	b.n	800511c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80050f4:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <HAL_RCC_OscConfig+0x4f4>)
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	429a      	cmp	r2, r3
 8005106:	d106      	bne.n	8005116 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005112:	429a      	cmp	r2, r3
 8005114:	d001      	beq.n	800511a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e000      	b.n	800511c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3718      	adds	r7, #24
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40021000 	.word	0x40021000
 8005128:	40007000 	.word	0x40007000
 800512c:	42420060 	.word	0x42420060

08005130 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e0d0      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005144:	4b6a      	ldr	r3, [pc, #424]	; (80052f0 <HAL_RCC_ClockConfig+0x1c0>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	429a      	cmp	r2, r3
 8005150:	d910      	bls.n	8005174 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005152:	4b67      	ldr	r3, [pc, #412]	; (80052f0 <HAL_RCC_ClockConfig+0x1c0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f023 0207 	bic.w	r2, r3, #7
 800515a:	4965      	ldr	r1, [pc, #404]	; (80052f0 <HAL_RCC_ClockConfig+0x1c0>)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	4313      	orrs	r3, r2
 8005160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005162:	4b63      	ldr	r3, [pc, #396]	; (80052f0 <HAL_RCC_ClockConfig+0x1c0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d001      	beq.n	8005174 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e0b8      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d020      	beq.n	80051c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	d005      	beq.n	8005198 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800518c:	4b59      	ldr	r3, [pc, #356]	; (80052f4 <HAL_RCC_ClockConfig+0x1c4>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	4a58      	ldr	r2, [pc, #352]	; (80052f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005192:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005196:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d005      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051a4:	4b53      	ldr	r3, [pc, #332]	; (80052f4 <HAL_RCC_ClockConfig+0x1c4>)
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	4a52      	ldr	r2, [pc, #328]	; (80052f4 <HAL_RCC_ClockConfig+0x1c4>)
 80051aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80051ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051b0:	4b50      	ldr	r3, [pc, #320]	; (80052f4 <HAL_RCC_ClockConfig+0x1c4>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	494d      	ldr	r1, [pc, #308]	; (80052f4 <HAL_RCC_ClockConfig+0x1c4>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d040      	beq.n	8005250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d107      	bne.n	80051e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051d6:	4b47      	ldr	r3, [pc, #284]	; (80052f4 <HAL_RCC_ClockConfig+0x1c4>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d115      	bne.n	800520e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e07f      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d107      	bne.n	80051fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ee:	4b41      	ldr	r3, [pc, #260]	; (80052f4 <HAL_RCC_ClockConfig+0x1c4>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d109      	bne.n	800520e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e073      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051fe:	4b3d      	ldr	r3, [pc, #244]	; (80052f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e06b      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800520e:	4b39      	ldr	r3, [pc, #228]	; (80052f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f023 0203 	bic.w	r2, r3, #3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	4936      	ldr	r1, [pc, #216]	; (80052f4 <HAL_RCC_ClockConfig+0x1c4>)
 800521c:	4313      	orrs	r3, r2
 800521e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005220:	f7fd fdae 	bl	8002d80 <HAL_GetTick>
 8005224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005226:	e00a      	b.n	800523e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005228:	f7fd fdaa 	bl	8002d80 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	f241 3288 	movw	r2, #5000	; 0x1388
 8005236:	4293      	cmp	r3, r2
 8005238:	d901      	bls.n	800523e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e053      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800523e:	4b2d      	ldr	r3, [pc, #180]	; (80052f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f003 020c 	and.w	r2, r3, #12
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	429a      	cmp	r2, r3
 800524e:	d1eb      	bne.n	8005228 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005250:	4b27      	ldr	r3, [pc, #156]	; (80052f0 <HAL_RCC_ClockConfig+0x1c0>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d210      	bcs.n	8005280 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525e:	4b24      	ldr	r3, [pc, #144]	; (80052f0 <HAL_RCC_ClockConfig+0x1c0>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f023 0207 	bic.w	r2, r3, #7
 8005266:	4922      	ldr	r1, [pc, #136]	; (80052f0 <HAL_RCC_ClockConfig+0x1c0>)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	4313      	orrs	r3, r2
 800526c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800526e:	4b20      	ldr	r3, [pc, #128]	; (80052f0 <HAL_RCC_ClockConfig+0x1c0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0307 	and.w	r3, r3, #7
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	429a      	cmp	r2, r3
 800527a:	d001      	beq.n	8005280 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e032      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	d008      	beq.n	800529e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800528c:	4b19      	ldr	r3, [pc, #100]	; (80052f4 <HAL_RCC_ClockConfig+0x1c4>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	4916      	ldr	r1, [pc, #88]	; (80052f4 <HAL_RCC_ClockConfig+0x1c4>)
 800529a:	4313      	orrs	r3, r2
 800529c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0308 	and.w	r3, r3, #8
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d009      	beq.n	80052be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052aa:	4b12      	ldr	r3, [pc, #72]	; (80052f4 <HAL_RCC_ClockConfig+0x1c4>)
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	490e      	ldr	r1, [pc, #56]	; (80052f4 <HAL_RCC_ClockConfig+0x1c4>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052be:	f000 f821 	bl	8005304 <HAL_RCC_GetSysClockFreq>
 80052c2:	4602      	mov	r2, r0
 80052c4:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <HAL_RCC_ClockConfig+0x1c4>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	091b      	lsrs	r3, r3, #4
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	490a      	ldr	r1, [pc, #40]	; (80052f8 <HAL_RCC_ClockConfig+0x1c8>)
 80052d0:	5ccb      	ldrb	r3, [r1, r3]
 80052d2:	fa22 f303 	lsr.w	r3, r2, r3
 80052d6:	4a09      	ldr	r2, [pc, #36]	; (80052fc <HAL_RCC_ClockConfig+0x1cc>)
 80052d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80052da:	4b09      	ldr	r3, [pc, #36]	; (8005300 <HAL_RCC_ClockConfig+0x1d0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fd fbe4 	bl	8002aac <HAL_InitTick>

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40022000 	.word	0x40022000
 80052f4:	40021000 	.word	0x40021000
 80052f8:	0800ace4 	.word	0x0800ace4
 80052fc:	20000000 	.word	0x20000000
 8005300:	20000004 	.word	0x20000004

08005304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005304:	b490      	push	{r4, r7}
 8005306:	b08a      	sub	sp, #40	; 0x28
 8005308:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800530a:	4b2a      	ldr	r3, [pc, #168]	; (80053b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800530c:	1d3c      	adds	r4, r7, #4
 800530e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005310:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005314:	f240 2301 	movw	r3, #513	; 0x201
 8005318:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	61fb      	str	r3, [r7, #28]
 800531e:	2300      	movs	r3, #0
 8005320:	61bb      	str	r3, [r7, #24]
 8005322:	2300      	movs	r3, #0
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
 8005326:	2300      	movs	r3, #0
 8005328:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800532a:	2300      	movs	r3, #0
 800532c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800532e:	4b22      	ldr	r3, [pc, #136]	; (80053b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	f003 030c 	and.w	r3, r3, #12
 800533a:	2b04      	cmp	r3, #4
 800533c:	d002      	beq.n	8005344 <HAL_RCC_GetSysClockFreq+0x40>
 800533e:	2b08      	cmp	r3, #8
 8005340:	d003      	beq.n	800534a <HAL_RCC_GetSysClockFreq+0x46>
 8005342:	e02d      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005344:	4b1d      	ldr	r3, [pc, #116]	; (80053bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005346:	623b      	str	r3, [r7, #32]
      break;
 8005348:	e02d      	b.n	80053a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	0c9b      	lsrs	r3, r3, #18
 800534e:	f003 030f 	and.w	r3, r3, #15
 8005352:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005356:	4413      	add	r3, r2
 8005358:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800535c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d013      	beq.n	8005390 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005368:	4b13      	ldr	r3, [pc, #76]	; (80053b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	0c5b      	lsrs	r3, r3, #17
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005376:	4413      	add	r3, r2
 8005378:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800537c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	4a0e      	ldr	r2, [pc, #56]	; (80053bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005382:	fb02 f203 	mul.w	r2, r2, r3
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	fbb2 f3f3 	udiv	r3, r2, r3
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
 800538e:	e004      	b.n	800539a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	4a0b      	ldr	r2, [pc, #44]	; (80053c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005394:	fb02 f303 	mul.w	r3, r2, r3
 8005398:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	623b      	str	r3, [r7, #32]
      break;
 800539e:	e002      	b.n	80053a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053a0:	4b06      	ldr	r3, [pc, #24]	; (80053bc <HAL_RCC_GetSysClockFreq+0xb8>)
 80053a2:	623b      	str	r3, [r7, #32]
      break;
 80053a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053a6:	6a3b      	ldr	r3, [r7, #32]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3728      	adds	r7, #40	; 0x28
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bc90      	pop	{r4, r7}
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	0800ac50 	.word	0x0800ac50
 80053b8:	40021000 	.word	0x40021000
 80053bc:	007a1200 	.word	0x007a1200
 80053c0:	003d0900 	.word	0x003d0900

080053c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053c8:	4b02      	ldr	r3, [pc, #8]	; (80053d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80053ca:	681b      	ldr	r3, [r3, #0]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr
 80053d4:	20000000 	.word	0x20000000

080053d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053dc:	f7ff fff2 	bl	80053c4 <HAL_RCC_GetHCLKFreq>
 80053e0:	4602      	mov	r2, r0
 80053e2:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	0a1b      	lsrs	r3, r3, #8
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	4903      	ldr	r1, [pc, #12]	; (80053fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80053ee:	5ccb      	ldrb	r3, [r1, r3]
 80053f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	40021000 	.word	0x40021000
 80053fc:	0800acf4 	.word	0x0800acf4

08005400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005404:	f7ff ffde 	bl	80053c4 <HAL_RCC_GetHCLKFreq>
 8005408:	4602      	mov	r2, r0
 800540a:	4b05      	ldr	r3, [pc, #20]	; (8005420 <HAL_RCC_GetPCLK2Freq+0x20>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	0adb      	lsrs	r3, r3, #11
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	4903      	ldr	r1, [pc, #12]	; (8005424 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005416:	5ccb      	ldrb	r3, [r1, r3]
 8005418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800541c:	4618      	mov	r0, r3
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40021000 	.word	0x40021000
 8005424:	0800acf4 	.word	0x0800acf4

08005428 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	220f      	movs	r2, #15
 8005436:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005438:	4b11      	ldr	r3, [pc, #68]	; (8005480 <HAL_RCC_GetClockConfig+0x58>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f003 0203 	and.w	r2, r3, #3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005444:	4b0e      	ldr	r3, [pc, #56]	; (8005480 <HAL_RCC_GetClockConfig+0x58>)
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <HAL_RCC_GetClockConfig+0x58>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800545c:	4b08      	ldr	r3, [pc, #32]	; (8005480 <HAL_RCC_GetClockConfig+0x58>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	08db      	lsrs	r3, r3, #3
 8005462:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800546a:	4b06      	ldr	r3, [pc, #24]	; (8005484 <HAL_RCC_GetClockConfig+0x5c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0207 	and.w	r2, r3, #7
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr
 8005480:	40021000 	.word	0x40021000
 8005484:	40022000 	.word	0x40022000

08005488 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005490:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <RCC_Delay+0x34>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a0a      	ldr	r2, [pc, #40]	; (80054c0 <RCC_Delay+0x38>)
 8005496:	fba2 2303 	umull	r2, r3, r2, r3
 800549a:	0a5b      	lsrs	r3, r3, #9
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	fb02 f303 	mul.w	r3, r2, r3
 80054a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80054a4:	bf00      	nop
  }
  while (Delay --);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	1e5a      	subs	r2, r3, #1
 80054aa:	60fa      	str	r2, [r7, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1f9      	bne.n	80054a4 <RCC_Delay+0x1c>
}
 80054b0:	bf00      	nop
 80054b2:	bf00      	nop
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bc80      	pop	{r7}
 80054ba:	4770      	bx	lr
 80054bc:	20000000 	.word	0x20000000
 80054c0:	10624dd3 	.word	0x10624dd3

080054c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e076      	b.n	80055c4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d108      	bne.n	80054f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054e6:	d009      	beq.n	80054fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	61da      	str	r2, [r3, #28]
 80054ee:	e005      	b.n	80054fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d106      	bne.n	800551c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fd fa88 	bl	8002a2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005532:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005544:	431a      	orrs	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	431a      	orrs	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	431a      	orrs	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800556c:	431a      	orrs	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005580:	ea42 0103 	orr.w	r1, r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005588:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	0c1a      	lsrs	r2, r3, #16
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f002 0204 	and.w	r2, r2, #4
 80055a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	69da      	ldr	r2, [r3, #28]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	603b      	str	r3, [r7, #0]
 80055d8:	4613      	mov	r3, r2
 80055da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055dc:	2300      	movs	r3, #0
 80055de:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d101      	bne.n	80055ee <HAL_SPI_Transmit+0x22>
 80055ea:	2302      	movs	r3, #2
 80055ec:	e126      	b.n	800583c <HAL_SPI_Transmit+0x270>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055f6:	f7fd fbc3 	bl	8002d80 <HAL_GetTick>
 80055fa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80055fc:	88fb      	ldrh	r3, [r7, #6]
 80055fe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b01      	cmp	r3, #1
 800560a:	d002      	beq.n	8005612 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800560c:	2302      	movs	r3, #2
 800560e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005610:	e10b      	b.n	800582a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <HAL_SPI_Transmit+0x52>
 8005618:	88fb      	ldrh	r3, [r7, #6]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d102      	bne.n	8005624 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005622:	e102      	b.n	800582a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2203      	movs	r2, #3
 8005628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	88fa      	ldrh	r2, [r7, #6]
 800563c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	88fa      	ldrh	r2, [r7, #6]
 8005642:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800566a:	d10f      	bne.n	800568c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800567a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800568a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005696:	2b40      	cmp	r3, #64	; 0x40
 8005698:	d007      	beq.n	80056aa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b2:	d14b      	bne.n	800574c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <HAL_SPI_Transmit+0xf6>
 80056bc:	8afb      	ldrh	r3, [r7, #22]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d13e      	bne.n	8005740 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c6:	881a      	ldrh	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d2:	1c9a      	adds	r2, r3, #2
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056dc:	b29b      	uxth	r3, r3
 80056de:	3b01      	subs	r3, #1
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056e6:	e02b      	b.n	8005740 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d112      	bne.n	800571c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fa:	881a      	ldrh	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	1c9a      	adds	r2, r3, #2
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005710:	b29b      	uxth	r3, r3
 8005712:	3b01      	subs	r3, #1
 8005714:	b29a      	uxth	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	86da      	strh	r2, [r3, #54]	; 0x36
 800571a:	e011      	b.n	8005740 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800571c:	f7fd fb30 	bl	8002d80 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d803      	bhi.n	8005734 <HAL_SPI_Transmit+0x168>
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005732:	d102      	bne.n	800573a <HAL_SPI_Transmit+0x16e>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d102      	bne.n	8005740 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800573e:	e074      	b.n	800582a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1ce      	bne.n	80056e8 <HAL_SPI_Transmit+0x11c>
 800574a:	e04c      	b.n	80057e6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <HAL_SPI_Transmit+0x18e>
 8005754:	8afb      	ldrh	r3, [r7, #22]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d140      	bne.n	80057dc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	330c      	adds	r3, #12
 8005764:	7812      	ldrb	r2, [r2, #0]
 8005766:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576c:	1c5a      	adds	r2, r3, #1
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005776:	b29b      	uxth	r3, r3
 8005778:	3b01      	subs	r3, #1
 800577a:	b29a      	uxth	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005780:	e02c      	b.n	80057dc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b02      	cmp	r3, #2
 800578e:	d113      	bne.n	80057b8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	330c      	adds	r3, #12
 800579a:	7812      	ldrb	r2, [r2, #0]
 800579c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a2:	1c5a      	adds	r2, r3, #1
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	3b01      	subs	r3, #1
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80057b6:	e011      	b.n	80057dc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057b8:	f7fd fae2 	bl	8002d80 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d803      	bhi.n	80057d0 <HAL_SPI_Transmit+0x204>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ce:	d102      	bne.n	80057d6 <HAL_SPI_Transmit+0x20a>
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d102      	bne.n	80057dc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057da:	e026      	b.n	800582a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1cd      	bne.n	8005782 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	6839      	ldr	r1, [r7, #0]
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 f8b2 	bl	8005954 <SPI_EndRxTxTransaction>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2220      	movs	r2, #32
 80057fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10a      	bne.n	800581a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005804:	2300      	movs	r3, #0
 8005806:	613b      	str	r3, [r7, #16]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	613b      	str	r3, [r7, #16]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	613b      	str	r3, [r7, #16]
 8005818:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581e:	2b00      	cmp	r3, #0
 8005820:	d002      	beq.n	8005828 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	77fb      	strb	r3, [r7, #31]
 8005826:	e000      	b.n	800582a <HAL_SPI_Transmit+0x25e>
  }

error:
 8005828:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800583a:	7ffb      	ldrb	r3, [r7, #31]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3720      	adds	r7, #32
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b088      	sub	sp, #32
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	603b      	str	r3, [r7, #0]
 8005850:	4613      	mov	r3, r2
 8005852:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005854:	f7fd fa94 	bl	8002d80 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585c:	1a9b      	subs	r3, r3, r2
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	4413      	add	r3, r2
 8005862:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005864:	f7fd fa8c 	bl	8002d80 <HAL_GetTick>
 8005868:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800586a:	4b39      	ldr	r3, [pc, #228]	; (8005950 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	015b      	lsls	r3, r3, #5
 8005870:	0d1b      	lsrs	r3, r3, #20
 8005872:	69fa      	ldr	r2, [r7, #28]
 8005874:	fb02 f303 	mul.w	r3, r2, r3
 8005878:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800587a:	e054      	b.n	8005926 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005882:	d050      	beq.n	8005926 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005884:	f7fd fa7c 	bl	8002d80 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	69fa      	ldr	r2, [r7, #28]
 8005890:	429a      	cmp	r2, r3
 8005892:	d902      	bls.n	800589a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d13d      	bne.n	8005916 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058b2:	d111      	bne.n	80058d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058bc:	d004      	beq.n	80058c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058c6:	d107      	bne.n	80058d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058e0:	d10f      	bne.n	8005902 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005900:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e017      	b.n	8005946 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800591c:	2300      	movs	r3, #0
 800591e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	3b01      	subs	r3, #1
 8005924:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	4013      	ands	r3, r2
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	429a      	cmp	r2, r3
 8005934:	bf0c      	ite	eq
 8005936:	2301      	moveq	r3, #1
 8005938:	2300      	movne	r3, #0
 800593a:	b2db      	uxtb	r3, r3
 800593c:	461a      	mov	r2, r3
 800593e:	79fb      	ldrb	r3, [r7, #7]
 8005940:	429a      	cmp	r2, r3
 8005942:	d19b      	bne.n	800587c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3720      	adds	r7, #32
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20000000 	.word	0x20000000

08005954 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af02      	add	r7, sp, #8
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2200      	movs	r2, #0
 8005968:	2180      	movs	r1, #128	; 0x80
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f7ff ff6a 	bl	8005844 <SPI_WaitFlagStateUntilTimeout>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d007      	beq.n	8005986 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597a:	f043 0220 	orr.w	r2, r3, #32
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e000      	b.n	8005988 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e041      	b.n	8005a26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d106      	bne.n	80059bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f839 	bl	8005a2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	3304      	adds	r3, #4
 80059cc:	4619      	mov	r1, r3
 80059ce:	4610      	mov	r0, r2
 80059d0:	f000 f9b4 	bl	8005d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bc80      	pop	{r7}
 8005a3e:	4770      	bx	lr

08005a40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d001      	beq.n	8005a58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e03a      	b.n	8005ace <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68da      	ldr	r2, [r3, #12]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0201 	orr.w	r2, r2, #1
 8005a6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a18      	ldr	r2, [pc, #96]	; (8005ad8 <HAL_TIM_Base_Start_IT+0x98>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d00e      	beq.n	8005a98 <HAL_TIM_Base_Start_IT+0x58>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a82:	d009      	beq.n	8005a98 <HAL_TIM_Base_Start_IT+0x58>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a14      	ldr	r2, [pc, #80]	; (8005adc <HAL_TIM_Base_Start_IT+0x9c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d004      	beq.n	8005a98 <HAL_TIM_Base_Start_IT+0x58>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a13      	ldr	r2, [pc, #76]	; (8005ae0 <HAL_TIM_Base_Start_IT+0xa0>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d111      	bne.n	8005abc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b06      	cmp	r3, #6
 8005aa8:	d010      	beq.n	8005acc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f042 0201 	orr.w	r2, r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aba:	e007      	b.n	8005acc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bc80      	pop	{r7}
 8005ad6:	4770      	bx	lr
 8005ad8:	40012c00 	.word	0x40012c00
 8005adc:	40000400 	.word	0x40000400
 8005ae0:	40000800 	.word	0x40000800

08005ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d122      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d11b      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0202 	mvn.w	r2, #2
 8005b10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f8ed 	bl	8005d06 <HAL_TIM_IC_CaptureCallback>
 8005b2c:	e005      	b.n	8005b3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f8e0 	bl	8005cf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f8ef 	bl	8005d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0304 	and.w	r3, r3, #4
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	d122      	bne.n	8005b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b04      	cmp	r3, #4
 8005b5a:	d11b      	bne.n	8005b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0204 	mvn.w	r2, #4
 8005b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2202      	movs	r2, #2
 8005b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f8c3 	bl	8005d06 <HAL_TIM_IC_CaptureCallback>
 8005b80:	e005      	b.n	8005b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f8b6 	bl	8005cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f8c5 	bl	8005d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f003 0308 	and.w	r3, r3, #8
 8005b9e:	2b08      	cmp	r3, #8
 8005ba0:	d122      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f003 0308 	and.w	r3, r3, #8
 8005bac:	2b08      	cmp	r3, #8
 8005bae:	d11b      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f06f 0208 	mvn.w	r2, #8
 8005bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2204      	movs	r2, #4
 8005bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	f003 0303 	and.w	r3, r3, #3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f899 	bl	8005d06 <HAL_TIM_IC_CaptureCallback>
 8005bd4:	e005      	b.n	8005be2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f88c 	bl	8005cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f89b 	bl	8005d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f003 0310 	and.w	r3, r3, #16
 8005bf2:	2b10      	cmp	r3, #16
 8005bf4:	d122      	bne.n	8005c3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f003 0310 	and.w	r3, r3, #16
 8005c00:	2b10      	cmp	r3, #16
 8005c02:	d11b      	bne.n	8005c3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f06f 0210 	mvn.w	r2, #16
 8005c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2208      	movs	r2, #8
 8005c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f86f 	bl	8005d06 <HAL_TIM_IC_CaptureCallback>
 8005c28:	e005      	b.n	8005c36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f862 	bl	8005cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f871 	bl	8005d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d10e      	bne.n	8005c68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d107      	bne.n	8005c68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f06f 0201 	mvn.w	r2, #1
 8005c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7fc fe26 	bl	80028b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c72:	2b80      	cmp	r3, #128	; 0x80
 8005c74:	d10e      	bne.n	8005c94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c80:	2b80      	cmp	r3, #128	; 0x80
 8005c82:	d107      	bne.n	8005c94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f8bf 	bl	8005e12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9e:	2b40      	cmp	r3, #64	; 0x40
 8005ca0:	d10e      	bne.n	8005cc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cac:	2b40      	cmp	r3, #64	; 0x40
 8005cae:	d107      	bne.n	8005cc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f835 	bl	8005d2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	f003 0320 	and.w	r3, r3, #32
 8005cca:	2b20      	cmp	r3, #32
 8005ccc:	d10e      	bne.n	8005cec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f003 0320 	and.w	r3, r3, #32
 8005cd8:	2b20      	cmp	r3, #32
 8005cda:	d107      	bne.n	8005cec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f06f 0220 	mvn.w	r2, #32
 8005ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f88a 	bl	8005e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cec:	bf00      	nop
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bc80      	pop	{r7}
 8005d04:	4770      	bx	lr

08005d06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b083      	sub	sp, #12
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bc80      	pop	{r7}
 8005d16:	4770      	bx	lr

08005d18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bc80      	pop	{r7}
 8005d28:	4770      	bx	lr

08005d2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bc80      	pop	{r7}
 8005d3a:	4770      	bx	lr

08005d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a29      	ldr	r2, [pc, #164]	; (8005df4 <TIM_Base_SetConfig+0xb8>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d00b      	beq.n	8005d6c <TIM_Base_SetConfig+0x30>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d5a:	d007      	beq.n	8005d6c <TIM_Base_SetConfig+0x30>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a26      	ldr	r2, [pc, #152]	; (8005df8 <TIM_Base_SetConfig+0xbc>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d003      	beq.n	8005d6c <TIM_Base_SetConfig+0x30>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a25      	ldr	r2, [pc, #148]	; (8005dfc <TIM_Base_SetConfig+0xc0>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d108      	bne.n	8005d7e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a1c      	ldr	r2, [pc, #112]	; (8005df4 <TIM_Base_SetConfig+0xb8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d00b      	beq.n	8005d9e <TIM_Base_SetConfig+0x62>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d8c:	d007      	beq.n	8005d9e <TIM_Base_SetConfig+0x62>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a19      	ldr	r2, [pc, #100]	; (8005df8 <TIM_Base_SetConfig+0xbc>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d003      	beq.n	8005d9e <TIM_Base_SetConfig+0x62>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a18      	ldr	r2, [pc, #96]	; (8005dfc <TIM_Base_SetConfig+0xc0>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d108      	bne.n	8005db0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	689a      	ldr	r2, [r3, #8]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a07      	ldr	r2, [pc, #28]	; (8005df4 <TIM_Base_SetConfig+0xb8>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d103      	bne.n	8005de4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	691a      	ldr	r2, [r3, #16]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	615a      	str	r2, [r3, #20]
}
 8005dea:	bf00      	nop
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bc80      	pop	{r7}
 8005df2:	4770      	bx	lr
 8005df4:	40012c00 	.word	0x40012c00
 8005df8:	40000400 	.word	0x40000400
 8005dfc:	40000800 	.word	0x40000800

08005e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bc80      	pop	{r7}
 8005e10:	4770      	bx	lr

08005e12 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b083      	sub	sp, #12
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e1a:	bf00      	nop
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bc80      	pop	{r7}
 8005e22:	4770      	bx	lr

08005e24 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e2a:	f3ef 8305 	mrs	r3, IPSR
 8005e2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e30:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10f      	bne.n	8005e56 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e36:	f3ef 8310 	mrs	r3, PRIMASK
 8005e3a:	607b      	str	r3, [r7, #4]
  return(result);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d109      	bne.n	8005e56 <osKernelInitialize+0x32>
 8005e42:	4b10      	ldr	r3, [pc, #64]	; (8005e84 <osKernelInitialize+0x60>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d109      	bne.n	8005e5e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e4a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e4e:	603b      	str	r3, [r7, #0]
  return(result);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005e56:	f06f 0305 	mvn.w	r3, #5
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	e00c      	b.n	8005e78 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005e5e:	4b09      	ldr	r3, [pc, #36]	; (8005e84 <osKernelInitialize+0x60>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d105      	bne.n	8005e72 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005e66:	4b07      	ldr	r3, [pc, #28]	; (8005e84 <osKernelInitialize+0x60>)
 8005e68:	2201      	movs	r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]
 8005e70:	e002      	b.n	8005e78 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005e72:	f04f 33ff 	mov.w	r3, #4294967295
 8005e76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005e78:	68fb      	ldr	r3, [r7, #12]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bc80      	pop	{r7}
 8005e82:	4770      	bx	lr
 8005e84:	200000b4 	.word	0x200000b4

08005e88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e8e:	f3ef 8305 	mrs	r3, IPSR
 8005e92:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10f      	bne.n	8005eba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e9a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e9e:	607b      	str	r3, [r7, #4]
  return(result);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d109      	bne.n	8005eba <osKernelStart+0x32>
 8005ea6:	4b11      	ldr	r3, [pc, #68]	; (8005eec <osKernelStart+0x64>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d109      	bne.n	8005ec2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005eae:	f3ef 8311 	mrs	r3, BASEPRI
 8005eb2:	603b      	str	r3, [r7, #0]
  return(result);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005eba:	f06f 0305 	mvn.w	r3, #5
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	e00e      	b.n	8005ee0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005ec2:	4b0a      	ldr	r3, [pc, #40]	; (8005eec <osKernelStart+0x64>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d107      	bne.n	8005eda <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005eca:	4b08      	ldr	r3, [pc, #32]	; (8005eec <osKernelStart+0x64>)
 8005ecc:	2202      	movs	r2, #2
 8005ece:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005ed0:	f001 f878 	bl	8006fc4 <vTaskStartScheduler>
      stat = osOK;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	e002      	b.n	8005ee0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005eda:	f04f 33ff 	mov.w	r3, #4294967295
 8005ede:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	200000b4 	.word	0x200000b4

08005ef0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b092      	sub	sp, #72	; 0x48
 8005ef4:	af04      	add	r7, sp, #16
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005efc:	2300      	movs	r3, #0
 8005efe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f00:	f3ef 8305 	mrs	r3, IPSR
 8005f04:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f040 8094 	bne.w	8006036 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f12:	623b      	str	r3, [r7, #32]
  return(result);
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f040 808d 	bne.w	8006036 <osThreadNew+0x146>
 8005f1c:	4b48      	ldr	r3, [pc, #288]	; (8006040 <osThreadNew+0x150>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d106      	bne.n	8005f32 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f24:	f3ef 8311 	mrs	r3, BASEPRI
 8005f28:	61fb      	str	r3, [r7, #28]
  return(result);
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f040 8082 	bne.w	8006036 <osThreadNew+0x146>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d07e      	beq.n	8006036 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005f38:	2380      	movs	r3, #128	; 0x80
 8005f3a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005f3c:	2318      	movs	r3, #24
 8005f3e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005f40:	2300      	movs	r3, #0
 8005f42:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005f44:	f107 031b 	add.w	r3, r7, #27
 8005f48:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f4e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d045      	beq.n	8005fe2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <osThreadNew+0x74>
        name = attr->name;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d008      	beq.n	8005f8a <osThreadNew+0x9a>
 8005f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7a:	2b38      	cmp	r3, #56	; 0x38
 8005f7c:	d805      	bhi.n	8005f8a <osThreadNew+0x9a>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <osThreadNew+0x9e>
        return (NULL);
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e054      	b.n	8006038 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	089b      	lsrs	r3, r3, #2
 8005f9c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00e      	beq.n	8005fc4 <osThreadNew+0xd4>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	2b5b      	cmp	r3, #91	; 0x5b
 8005fac:	d90a      	bls.n	8005fc4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d006      	beq.n	8005fc4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <osThreadNew+0xd4>
        mem = 1;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fc2:	e010      	b.n	8005fe6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10c      	bne.n	8005fe6 <osThreadNew+0xf6>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d108      	bne.n	8005fe6 <osThreadNew+0xf6>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d104      	bne.n	8005fe6 <osThreadNew+0xf6>
          mem = 0;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fe0:	e001      	b.n	8005fe6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d110      	bne.n	800600e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ff4:	9202      	str	r2, [sp, #8]
 8005ff6:	9301      	str	r3, [sp, #4]
 8005ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006000:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 fe12 	bl	8006c2c <xTaskCreateStatic>
 8006008:	4603      	mov	r3, r0
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	e013      	b.n	8006036 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800600e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006010:	2b00      	cmp	r3, #0
 8006012:	d110      	bne.n	8006036 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	b29a      	uxth	r2, r3
 8006018:	f107 0314 	add.w	r3, r7, #20
 800601c:	9301      	str	r3, [sp, #4]
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 fe5c 	bl	8006ce4 <xTaskCreate>
 800602c:	4603      	mov	r3, r0
 800602e:	2b01      	cmp	r3, #1
 8006030:	d001      	beq.n	8006036 <osThreadNew+0x146>
          hTask = NULL;
 8006032:	2300      	movs	r3, #0
 8006034:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006036:	697b      	ldr	r3, [r7, #20]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3738      	adds	r7, #56	; 0x38
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	200000b4 	.word	0x200000b4

08006044 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800604c:	f3ef 8305 	mrs	r3, IPSR
 8006050:	613b      	str	r3, [r7, #16]
  return(result);
 8006052:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10f      	bne.n	8006078 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006058:	f3ef 8310 	mrs	r3, PRIMASK
 800605c:	60fb      	str	r3, [r7, #12]
  return(result);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d109      	bne.n	8006078 <osDelay+0x34>
 8006064:	4b0d      	ldr	r3, [pc, #52]	; (800609c <osDelay+0x58>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b02      	cmp	r3, #2
 800606a:	d109      	bne.n	8006080 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800606c:	f3ef 8311 	mrs	r3, BASEPRI
 8006070:	60bb      	str	r3, [r7, #8]
  return(result);
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <osDelay+0x3c>
    stat = osErrorISR;
 8006078:	f06f 0305 	mvn.w	r3, #5
 800607c:	617b      	str	r3, [r7, #20]
 800607e:	e007      	b.n	8006090 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006080:	2300      	movs	r3, #0
 8006082:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d002      	beq.n	8006090 <osDelay+0x4c>
      vTaskDelay(ticks);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 ff66 	bl	8006f5c <vTaskDelay>
    }
  }

  return (stat);
 8006090:	697b      	ldr	r3, [r7, #20]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	200000b4 	.word	0x200000b4

080060a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4a06      	ldr	r2, [pc, #24]	; (80060c8 <vApplicationGetIdleTaskMemory+0x28>)
 80060b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	4a05      	ldr	r2, [pc, #20]	; (80060cc <vApplicationGetIdleTaskMemory+0x2c>)
 80060b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2280      	movs	r2, #128	; 0x80
 80060bc:	601a      	str	r2, [r3, #0]
}
 80060be:	bf00      	nop
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bc80      	pop	{r7}
 80060c6:	4770      	bx	lr
 80060c8:	200000b8 	.word	0x200000b8
 80060cc:	20000114 	.word	0x20000114

080060d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4a07      	ldr	r2, [pc, #28]	; (80060fc <vApplicationGetTimerTaskMemory+0x2c>)
 80060e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	4a06      	ldr	r2, [pc, #24]	; (8006100 <vApplicationGetTimerTaskMemory+0x30>)
 80060e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060ee:	601a      	str	r2, [r3, #0]
}
 80060f0:	bf00      	nop
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bc80      	pop	{r7}
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	20000314 	.word	0x20000314
 8006100:	20000370 	.word	0x20000370

08006104 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f103 0208 	add.w	r2, r3, #8
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f04f 32ff 	mov.w	r2, #4294967295
 800611c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f103 0208 	add.w	r2, r3, #8
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f103 0208 	add.w	r2, r3, #8
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	bc80      	pop	{r7}
 8006140:	4770      	bx	lr

08006142 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	bc80      	pop	{r7}
 8006158:	4770      	bx	lr

0800615a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800615a:	b480      	push	{r7}
 800615c:	b085      	sub	sp, #20
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	689a      	ldr	r2, [r3, #8]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	601a      	str	r2, [r3, #0]
}
 8006196:	bf00      	nop
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	bc80      	pop	{r7}
 800619e:	4770      	bx	lr

080061a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b6:	d103      	bne.n	80061c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	60fb      	str	r3, [r7, #12]
 80061be:	e00c      	b.n	80061da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3308      	adds	r3, #8
 80061c4:	60fb      	str	r3, [r7, #12]
 80061c6:	e002      	b.n	80061ce <vListInsert+0x2e>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	60fb      	str	r3, [r7, #12]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d2f6      	bcs.n	80061c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	1c5a      	adds	r2, r3, #1
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	601a      	str	r2, [r3, #0]
}
 8006206:	bf00      	nop
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr

08006210 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	6892      	ldr	r2, [r2, #8]
 8006226:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6852      	ldr	r2, [r2, #4]
 8006230:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	429a      	cmp	r2, r3
 800623a:	d103      	bne.n	8006244 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	1e5a      	subs	r2, r3, #1
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3714      	adds	r7, #20
 800625c:	46bd      	mov	sp, r7
 800625e:	bc80      	pop	{r7}
 8006260:	4770      	bx	lr
	...

08006264 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10a      	bne.n	800628e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800628a:	bf00      	nop
 800628c:	e7fe      	b.n	800628c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800628e:	f001 ffc5 	bl	800821c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629a:	68f9      	ldr	r1, [r7, #12]
 800629c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800629e:	fb01 f303 	mul.w	r3, r1, r3
 80062a2:	441a      	add	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062be:	3b01      	subs	r3, #1
 80062c0:	68f9      	ldr	r1, [r7, #12]
 80062c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80062c4:	fb01 f303 	mul.w	r3, r1, r3
 80062c8:	441a      	add	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	22ff      	movs	r2, #255	; 0xff
 80062d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	22ff      	movs	r2, #255	; 0xff
 80062da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d114      	bne.n	800630e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d01a      	beq.n	8006322 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	3310      	adds	r3, #16
 80062f0:	4618      	mov	r0, r3
 80062f2:	f001 f8f1 	bl	80074d8 <xTaskRemoveFromEventList>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d012      	beq.n	8006322 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80062fc:	4b0c      	ldr	r3, [pc, #48]	; (8006330 <xQueueGenericReset+0xcc>)
 80062fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	e009      	b.n	8006322 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3310      	adds	r3, #16
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff fef6 	bl	8006104 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	3324      	adds	r3, #36	; 0x24
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff fef1 	bl	8006104 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006322:	f001 ffab 	bl	800827c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006326:	2301      	movs	r3, #1
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	e000ed04 	.word	0xe000ed04

08006334 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006334:	b580      	push	{r7, lr}
 8006336:	b08e      	sub	sp, #56	; 0x38
 8006338:	af02      	add	r7, sp, #8
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10a      	bne.n	800635e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634c:	f383 8811 	msr	BASEPRI, r3
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800635a:	bf00      	nop
 800635c:	e7fe      	b.n	800635c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10a      	bne.n	800637a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006376:	bf00      	nop
 8006378:	e7fe      	b.n	8006378 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <xQueueGenericCreateStatic+0x52>
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <xQueueGenericCreateStatic+0x56>
 8006386:	2301      	movs	r3, #1
 8006388:	e000      	b.n	800638c <xQueueGenericCreateStatic+0x58>
 800638a:	2300      	movs	r3, #0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10a      	bne.n	80063a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	623b      	str	r3, [r7, #32]
}
 80063a2:	bf00      	nop
 80063a4:	e7fe      	b.n	80063a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d102      	bne.n	80063b2 <xQueueGenericCreateStatic+0x7e>
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <xQueueGenericCreateStatic+0x82>
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <xQueueGenericCreateStatic+0x84>
 80063b6:	2300      	movs	r3, #0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10a      	bne.n	80063d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	61fb      	str	r3, [r7, #28]
}
 80063ce:	bf00      	nop
 80063d0:	e7fe      	b.n	80063d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80063d2:	2350      	movs	r3, #80	; 0x50
 80063d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	2b50      	cmp	r3, #80	; 0x50
 80063da:	d00a      	beq.n	80063f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80063dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	61bb      	str	r3, [r7, #24]
}
 80063ee:	bf00      	nop
 80063f0:	e7fe      	b.n	80063f0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80063f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00d      	beq.n	8006418 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80063fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006404:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	4613      	mov	r3, r2
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	68b9      	ldr	r1, [r7, #8]
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f000 f805 	bl	8006422 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800641a:	4618      	mov	r0, r3
 800641c:	3730      	adds	r7, #48	; 0x30
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b084      	sub	sp, #16
 8006426:	af00      	add	r7, sp, #0
 8006428:	60f8      	str	r0, [r7, #12]
 800642a:	60b9      	str	r1, [r7, #8]
 800642c:	607a      	str	r2, [r7, #4]
 800642e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d103      	bne.n	800643e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	e002      	b.n	8006444 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006450:	2101      	movs	r1, #1
 8006452:	69b8      	ldr	r0, [r7, #24]
 8006454:	f7ff ff06 	bl	8006264 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	78fa      	ldrb	r2, [r7, #3]
 800645c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006460:	bf00      	nop
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b08e      	sub	sp, #56	; 0x38
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
 8006474:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006476:	2300      	movs	r3, #0
 8006478:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800647e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10a      	bne.n	800649a <xQueueGenericSend+0x32>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006496:	bf00      	nop
 8006498:	e7fe      	b.n	8006498 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d103      	bne.n	80064a8 <xQueueGenericSend+0x40>
 80064a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <xQueueGenericSend+0x44>
 80064a8:	2301      	movs	r3, #1
 80064aa:	e000      	b.n	80064ae <xQueueGenericSend+0x46>
 80064ac:	2300      	movs	r3, #0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10a      	bne.n	80064c8 <xQueueGenericSend+0x60>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064c4:	bf00      	nop
 80064c6:	e7fe      	b.n	80064c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d103      	bne.n	80064d6 <xQueueGenericSend+0x6e>
 80064ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d101      	bne.n	80064da <xQueueGenericSend+0x72>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e000      	b.n	80064dc <xQueueGenericSend+0x74>
 80064da:	2300      	movs	r3, #0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10a      	bne.n	80064f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	623b      	str	r3, [r7, #32]
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064f6:	f001 f9b1 	bl	800785c <xTaskGetSchedulerState>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d102      	bne.n	8006506 <xQueueGenericSend+0x9e>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <xQueueGenericSend+0xa2>
 8006506:	2301      	movs	r3, #1
 8006508:	e000      	b.n	800650c <xQueueGenericSend+0xa4>
 800650a:	2300      	movs	r3, #0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10a      	bne.n	8006526 <xQueueGenericSend+0xbe>
	__asm volatile
 8006510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	61fb      	str	r3, [r7, #28]
}
 8006522:	bf00      	nop
 8006524:	e7fe      	b.n	8006524 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006526:	f001 fe79 	bl	800821c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800652a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006532:	429a      	cmp	r2, r3
 8006534:	d302      	bcc.n	800653c <xQueueGenericSend+0xd4>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b02      	cmp	r3, #2
 800653a:	d129      	bne.n	8006590 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	68b9      	ldr	r1, [r7, #8]
 8006540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006542:	f000 fa07 	bl	8006954 <prvCopyDataToQueue>
 8006546:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	2b00      	cmp	r3, #0
 800654e:	d010      	beq.n	8006572 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006552:	3324      	adds	r3, #36	; 0x24
 8006554:	4618      	mov	r0, r3
 8006556:	f000 ffbf 	bl	80074d8 <xTaskRemoveFromEventList>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d013      	beq.n	8006588 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006560:	4b3f      	ldr	r3, [pc, #252]	; (8006660 <xQueueGenericSend+0x1f8>)
 8006562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	e00a      	b.n	8006588 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006574:	2b00      	cmp	r3, #0
 8006576:	d007      	beq.n	8006588 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006578:	4b39      	ldr	r3, [pc, #228]	; (8006660 <xQueueGenericSend+0x1f8>)
 800657a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006588:	f001 fe78 	bl	800827c <vPortExitCritical>
				return pdPASS;
 800658c:	2301      	movs	r3, #1
 800658e:	e063      	b.n	8006658 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d103      	bne.n	800659e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006596:	f001 fe71 	bl	800827c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800659a:	2300      	movs	r3, #0
 800659c:	e05c      	b.n	8006658 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800659e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d106      	bne.n	80065b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065a4:	f107 0314 	add.w	r3, r7, #20
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 fff9 	bl	80075a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065ae:	2301      	movs	r3, #1
 80065b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065b2:	f001 fe63 	bl	800827c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065b6:	f000 fd6b 	bl	8007090 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065ba:	f001 fe2f 	bl	800821c <vPortEnterCritical>
 80065be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065c4:	b25b      	sxtb	r3, r3
 80065c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ca:	d103      	bne.n	80065d4 <xQueueGenericSend+0x16c>
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065da:	b25b      	sxtb	r3, r3
 80065dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e0:	d103      	bne.n	80065ea <xQueueGenericSend+0x182>
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065ea:	f001 fe47 	bl	800827c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065ee:	1d3a      	adds	r2, r7, #4
 80065f0:	f107 0314 	add.w	r3, r7, #20
 80065f4:	4611      	mov	r1, r2
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 ffe8 	bl	80075cc <xTaskCheckForTimeOut>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d124      	bne.n	800664c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006602:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006604:	f000 fa9e 	bl	8006b44 <prvIsQueueFull>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d018      	beq.n	8006640 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	3310      	adds	r3, #16
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	4611      	mov	r1, r2
 8006616:	4618      	mov	r0, r3
 8006618:	f000 ff0e 	bl	8007438 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800661c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800661e:	f000 fa29 	bl	8006a74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006622:	f000 fd43 	bl	80070ac <xTaskResumeAll>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	f47f af7c 	bne.w	8006526 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800662e:	4b0c      	ldr	r3, [pc, #48]	; (8006660 <xQueueGenericSend+0x1f8>)
 8006630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	e772      	b.n	8006526 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006642:	f000 fa17 	bl	8006a74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006646:	f000 fd31 	bl	80070ac <xTaskResumeAll>
 800664a:	e76c      	b.n	8006526 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800664c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800664e:	f000 fa11 	bl	8006a74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006652:	f000 fd2b 	bl	80070ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006656:	2300      	movs	r3, #0
		}
	}
}
 8006658:	4618      	mov	r0, r3
 800665a:	3738      	adds	r7, #56	; 0x38
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	e000ed04 	.word	0xe000ed04

08006664 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b08e      	sub	sp, #56	; 0x38
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
 8006670:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10a      	bne.n	8006692 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800668e:	bf00      	nop
 8006690:	e7fe      	b.n	8006690 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d103      	bne.n	80066a0 <xQueueGenericSendFromISR+0x3c>
 8006698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <xQueueGenericSendFromISR+0x40>
 80066a0:	2301      	movs	r3, #1
 80066a2:	e000      	b.n	80066a6 <xQueueGenericSendFromISR+0x42>
 80066a4:	2300      	movs	r3, #0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10a      	bne.n	80066c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	623b      	str	r3, [r7, #32]
}
 80066bc:	bf00      	nop
 80066be:	e7fe      	b.n	80066be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d103      	bne.n	80066ce <xQueueGenericSendFromISR+0x6a>
 80066c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d101      	bne.n	80066d2 <xQueueGenericSendFromISR+0x6e>
 80066ce:	2301      	movs	r3, #1
 80066d0:	e000      	b.n	80066d4 <xQueueGenericSendFromISR+0x70>
 80066d2:	2300      	movs	r3, #0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10a      	bne.n	80066ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80066d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066dc:	f383 8811 	msr	BASEPRI, r3
 80066e0:	f3bf 8f6f 	isb	sy
 80066e4:	f3bf 8f4f 	dsb	sy
 80066e8:	61fb      	str	r3, [r7, #28]
}
 80066ea:	bf00      	nop
 80066ec:	e7fe      	b.n	80066ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066ee:	f001 fe57 	bl	80083a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80066f2:	f3ef 8211 	mrs	r2, BASEPRI
 80066f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	61ba      	str	r2, [r7, #24]
 8006708:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800670a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800670c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800670e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006716:	429a      	cmp	r2, r3
 8006718:	d302      	bcc.n	8006720 <xQueueGenericSendFromISR+0xbc>
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	2b02      	cmp	r3, #2
 800671e:	d12c      	bne.n	800677a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006722:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	68b9      	ldr	r1, [r7, #8]
 800672e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006730:	f000 f910 	bl	8006954 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006734:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673c:	d112      	bne.n	8006764 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006742:	2b00      	cmp	r3, #0
 8006744:	d016      	beq.n	8006774 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006748:	3324      	adds	r3, #36	; 0x24
 800674a:	4618      	mov	r0, r3
 800674c:	f000 fec4 	bl	80074d8 <xTaskRemoveFromEventList>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00e      	beq.n	8006774 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00b      	beq.n	8006774 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	601a      	str	r2, [r3, #0]
 8006762:	e007      	b.n	8006774 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006764:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006768:	3301      	adds	r3, #1
 800676a:	b2db      	uxtb	r3, r3
 800676c:	b25a      	sxtb	r2, r3
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006774:	2301      	movs	r3, #1
 8006776:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006778:	e001      	b.n	800677e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800677a:	2300      	movs	r3, #0
 800677c:	637b      	str	r3, [r7, #52]	; 0x34
 800677e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006780:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006788:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800678a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800678c:	4618      	mov	r0, r3
 800678e:	3738      	adds	r7, #56	; 0x38
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b08c      	sub	sp, #48	; 0x30
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80067a0:	2300      	movs	r3, #0
 80067a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10a      	bne.n	80067c4 <xQueueReceive+0x30>
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	623b      	str	r3, [r7, #32]
}
 80067c0:	bf00      	nop
 80067c2:	e7fe      	b.n	80067c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d103      	bne.n	80067d2 <xQueueReceive+0x3e>
 80067ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <xQueueReceive+0x42>
 80067d2:	2301      	movs	r3, #1
 80067d4:	e000      	b.n	80067d8 <xQueueReceive+0x44>
 80067d6:	2300      	movs	r3, #0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10a      	bne.n	80067f2 <xQueueReceive+0x5e>
	__asm volatile
 80067dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e0:	f383 8811 	msr	BASEPRI, r3
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	61fb      	str	r3, [r7, #28]
}
 80067ee:	bf00      	nop
 80067f0:	e7fe      	b.n	80067f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067f2:	f001 f833 	bl	800785c <xTaskGetSchedulerState>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d102      	bne.n	8006802 <xQueueReceive+0x6e>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <xQueueReceive+0x72>
 8006802:	2301      	movs	r3, #1
 8006804:	e000      	b.n	8006808 <xQueueReceive+0x74>
 8006806:	2300      	movs	r3, #0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10a      	bne.n	8006822 <xQueueReceive+0x8e>
	__asm volatile
 800680c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	61bb      	str	r3, [r7, #24]
}
 800681e:	bf00      	nop
 8006820:	e7fe      	b.n	8006820 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006822:	f001 fcfb 	bl	800821c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	2b00      	cmp	r3, #0
 8006830:	d01f      	beq.n	8006872 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006832:	68b9      	ldr	r1, [r7, #8]
 8006834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006836:	f000 f8f7 	bl	8006a28 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	1e5a      	subs	r2, r3, #1
 800683e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006840:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00f      	beq.n	800686a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800684a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684c:	3310      	adds	r3, #16
 800684e:	4618      	mov	r0, r3
 8006850:	f000 fe42 	bl	80074d8 <xTaskRemoveFromEventList>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d007      	beq.n	800686a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800685a:	4b3d      	ldr	r3, [pc, #244]	; (8006950 <xQueueReceive+0x1bc>)
 800685c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800686a:	f001 fd07 	bl	800827c <vPortExitCritical>
				return pdPASS;
 800686e:	2301      	movs	r3, #1
 8006870:	e069      	b.n	8006946 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d103      	bne.n	8006880 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006878:	f001 fd00 	bl	800827c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800687c:	2300      	movs	r3, #0
 800687e:	e062      	b.n	8006946 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006882:	2b00      	cmp	r3, #0
 8006884:	d106      	bne.n	8006894 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006886:	f107 0310 	add.w	r3, r7, #16
 800688a:	4618      	mov	r0, r3
 800688c:	f000 fe88 	bl	80075a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006890:	2301      	movs	r3, #1
 8006892:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006894:	f001 fcf2 	bl	800827c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006898:	f000 fbfa 	bl	8007090 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800689c:	f001 fcbe 	bl	800821c <vPortEnterCritical>
 80068a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068a6:	b25b      	sxtb	r3, r3
 80068a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ac:	d103      	bne.n	80068b6 <xQueueReceive+0x122>
 80068ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068bc:	b25b      	sxtb	r3, r3
 80068be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c2:	d103      	bne.n	80068cc <xQueueReceive+0x138>
 80068c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068cc:	f001 fcd6 	bl	800827c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068d0:	1d3a      	adds	r2, r7, #4
 80068d2:	f107 0310 	add.w	r3, r7, #16
 80068d6:	4611      	mov	r1, r2
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 fe77 	bl	80075cc <xTaskCheckForTimeOut>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d123      	bne.n	800692c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068e6:	f000 f917 	bl	8006b18 <prvIsQueueEmpty>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d017      	beq.n	8006920 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f2:	3324      	adds	r3, #36	; 0x24
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	4611      	mov	r1, r2
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 fd9d 	bl	8007438 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006900:	f000 f8b8 	bl	8006a74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006904:	f000 fbd2 	bl	80070ac <xTaskResumeAll>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d189      	bne.n	8006822 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800690e:	4b10      	ldr	r3, [pc, #64]	; (8006950 <xQueueReceive+0x1bc>)
 8006910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	e780      	b.n	8006822 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006922:	f000 f8a7 	bl	8006a74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006926:	f000 fbc1 	bl	80070ac <xTaskResumeAll>
 800692a:	e77a      	b.n	8006822 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800692c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800692e:	f000 f8a1 	bl	8006a74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006932:	f000 fbbb 	bl	80070ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006938:	f000 f8ee 	bl	8006b18 <prvIsQueueEmpty>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	f43f af6f 	beq.w	8006822 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006944:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006946:	4618      	mov	r0, r3
 8006948:	3730      	adds	r7, #48	; 0x30
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	e000ed04 	.word	0xe000ed04

08006954 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006960:	2300      	movs	r3, #0
 8006962:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006968:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10d      	bne.n	800698e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d14d      	bne.n	8006a16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	4618      	mov	r0, r3
 8006980:	f000 ff8a 	bl	8007898 <xTaskPriorityDisinherit>
 8006984:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	605a      	str	r2, [r3, #4]
 800698c:	e043      	b.n	8006a16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d119      	bne.n	80069c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6898      	ldr	r0, [r3, #8]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699c:	461a      	mov	r2, r3
 800699e:	68b9      	ldr	r1, [r7, #8]
 80069a0:	f001 ff3e 	bl	8008820 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	689a      	ldr	r2, [r3, #8]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ac:	441a      	add	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	689a      	ldr	r2, [r3, #8]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d32b      	bcc.n	8006a16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	609a      	str	r2, [r3, #8]
 80069c6:	e026      	b.n	8006a16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	68d8      	ldr	r0, [r3, #12]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d0:	461a      	mov	r2, r3
 80069d2:	68b9      	ldr	r1, [r7, #8]
 80069d4:	f001 ff24 	bl	8008820 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	68da      	ldr	r2, [r3, #12]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e0:	425b      	negs	r3, r3
 80069e2:	441a      	add	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	68da      	ldr	r2, [r3, #12]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d207      	bcs.n	8006a04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fc:	425b      	negs	r3, r3
 80069fe:	441a      	add	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d105      	bne.n	8006a16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	1c5a      	adds	r2, r3, #1
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006a1e:	697b      	ldr	r3, [r7, #20]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3718      	adds	r7, #24
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d018      	beq.n	8006a6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a42:	441a      	add	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68da      	ldr	r2, [r3, #12]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d303      	bcc.n	8006a5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68d9      	ldr	r1, [r3, #12]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a64:	461a      	mov	r2, r3
 8006a66:	6838      	ldr	r0, [r7, #0]
 8006a68:	f001 feda 	bl	8008820 <memcpy>
	}
}
 8006a6c:	bf00      	nop
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a7c:	f001 fbce 	bl	800821c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a88:	e011      	b.n	8006aae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d012      	beq.n	8006ab8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	3324      	adds	r3, #36	; 0x24
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 fd1e 	bl	80074d8 <xTaskRemoveFromEventList>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006aa2:	f000 fdf5 	bl	8007690 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	dce9      	bgt.n	8006a8a <prvUnlockQueue+0x16>
 8006ab6:	e000      	b.n	8006aba <prvUnlockQueue+0x46>
					break;
 8006ab8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	22ff      	movs	r2, #255	; 0xff
 8006abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006ac2:	f001 fbdb 	bl	800827c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006ac6:	f001 fba9 	bl	800821c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ad0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ad2:	e011      	b.n	8006af8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d012      	beq.n	8006b02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	3310      	adds	r3, #16
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f000 fcf9 	bl	80074d8 <xTaskRemoveFromEventList>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006aec:	f000 fdd0 	bl	8007690 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006af0:	7bbb      	ldrb	r3, [r7, #14]
 8006af2:	3b01      	subs	r3, #1
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006af8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	dce9      	bgt.n	8006ad4 <prvUnlockQueue+0x60>
 8006b00:	e000      	b.n	8006b04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006b02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	22ff      	movs	r2, #255	; 0xff
 8006b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006b0c:	f001 fbb6 	bl	800827c <vPortExitCritical>
}
 8006b10:	bf00      	nop
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b20:	f001 fb7c 	bl	800821c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d102      	bne.n	8006b32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	e001      	b.n	8006b36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006b32:	2300      	movs	r3, #0
 8006b34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b36:	f001 fba1 	bl	800827c <vPortExitCritical>

	return xReturn;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b4c:	f001 fb66 	bl	800821c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d102      	bne.n	8006b62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	60fb      	str	r3, [r7, #12]
 8006b60:	e001      	b.n	8006b66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006b62:	2300      	movs	r3, #0
 8006b64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b66:	f001 fb89 	bl	800827c <vPortExitCritical>

	return xReturn;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60fb      	str	r3, [r7, #12]
 8006b82:	e014      	b.n	8006bae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006b84:	4a0e      	ldr	r2, [pc, #56]	; (8006bc0 <vQueueAddToRegistry+0x4c>)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10b      	bne.n	8006ba8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006b90:	490b      	ldr	r1, [pc, #44]	; (8006bc0 <vQueueAddToRegistry+0x4c>)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	683a      	ldr	r2, [r7, #0]
 8006b96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b9a:	4a09      	ldr	r2, [pc, #36]	; (8006bc0 <vQueueAddToRegistry+0x4c>)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	00db      	lsls	r3, r3, #3
 8006ba0:	4413      	add	r3, r2
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006ba6:	e006      	b.n	8006bb6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	3301      	adds	r3, #1
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2b07      	cmp	r3, #7
 8006bb2:	d9e7      	bls.n	8006b84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006bb4:	bf00      	nop
 8006bb6:	bf00      	nop
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bc80      	pop	{r7}
 8006bbe:	4770      	bx	lr
 8006bc0:	20001bf4 	.word	0x20001bf4

08006bc4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006bd4:	f001 fb22 	bl	800821c <vPortEnterCritical>
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bde:	b25b      	sxtb	r3, r3
 8006be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be4:	d103      	bne.n	8006bee <vQueueWaitForMessageRestricted+0x2a>
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bf4:	b25b      	sxtb	r3, r3
 8006bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bfa:	d103      	bne.n	8006c04 <vQueueWaitForMessageRestricted+0x40>
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c04:	f001 fb3a 	bl	800827c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d106      	bne.n	8006c1e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	3324      	adds	r3, #36	; 0x24
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	68b9      	ldr	r1, [r7, #8]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 fc31 	bl	8007480 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006c1e:	6978      	ldr	r0, [r7, #20]
 8006c20:	f7ff ff28 	bl	8006a74 <prvUnlockQueue>
	}
 8006c24:	bf00      	nop
 8006c26:	3718      	adds	r7, #24
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b08e      	sub	sp, #56	; 0x38
 8006c30:	af04      	add	r7, sp, #16
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
 8006c38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10a      	bne.n	8006c56 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	623b      	str	r3, [r7, #32]
}
 8006c52:	bf00      	nop
 8006c54:	e7fe      	b.n	8006c54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10a      	bne.n	8006c72 <xTaskCreateStatic+0x46>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	61fb      	str	r3, [r7, #28]
}
 8006c6e:	bf00      	nop
 8006c70:	e7fe      	b.n	8006c70 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c72:	235c      	movs	r3, #92	; 0x5c
 8006c74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b5c      	cmp	r3, #92	; 0x5c
 8006c7a:	d00a      	beq.n	8006c92 <xTaskCreateStatic+0x66>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	61bb      	str	r3, [r7, #24]
}
 8006c8e:	bf00      	nop
 8006c90:	e7fe      	b.n	8006c90 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d01e      	beq.n	8006cd6 <xTaskCreateStatic+0xaa>
 8006c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d01b      	beq.n	8006cd6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ca6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	9303      	str	r3, [sp, #12]
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	9302      	str	r3, [sp, #8]
 8006cb8:	f107 0314 	add.w	r3, r7, #20
 8006cbc:	9301      	str	r3, [sp, #4]
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	68b9      	ldr	r1, [r7, #8]
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 f850 	bl	8006d6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cd0:	f000 f8d4 	bl	8006e7c <prvAddNewTaskToReadyList>
 8006cd4:	e001      	b.n	8006cda <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006cda:	697b      	ldr	r3, [r7, #20]
	}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3728      	adds	r7, #40	; 0x28
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b08c      	sub	sp, #48	; 0x30
 8006ce8:	af04      	add	r7, sp, #16
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	603b      	str	r3, [r7, #0]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cf4:	88fb      	ldrh	r3, [r7, #6]
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f001 fb8f 	bl	800841c <pvPortMalloc>
 8006cfe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00e      	beq.n	8006d24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006d06:	205c      	movs	r0, #92	; 0x5c
 8006d08:	f001 fb88 	bl	800841c <pvPortMalloc>
 8006d0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	631a      	str	r2, [r3, #48]	; 0x30
 8006d1a:	e005      	b.n	8006d28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006d1c:	6978      	ldr	r0, [r7, #20]
 8006d1e:	f001 fc41 	bl	80085a4 <vPortFree>
 8006d22:	e001      	b.n	8006d28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006d24:	2300      	movs	r3, #0
 8006d26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d017      	beq.n	8006d5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006d36:	88fa      	ldrh	r2, [r7, #6]
 8006d38:	2300      	movs	r3, #0
 8006d3a:	9303      	str	r3, [sp, #12]
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	9302      	str	r3, [sp, #8]
 8006d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d42:	9301      	str	r3, [sp, #4]
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	68b9      	ldr	r1, [r7, #8]
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f000 f80e 	bl	8006d6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d52:	69f8      	ldr	r0, [r7, #28]
 8006d54:	f000 f892 	bl	8006e7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	61bb      	str	r3, [r7, #24]
 8006d5c:	e002      	b.n	8006d64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d64:	69bb      	ldr	r3, [r7, #24]
	}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3720      	adds	r7, #32
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b088      	sub	sp, #32
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	60f8      	str	r0, [r7, #12]
 8006d76:	60b9      	str	r1, [r7, #8]
 8006d78:	607a      	str	r2, [r7, #4]
 8006d7a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	461a      	mov	r2, r3
 8006d86:	21a5      	movs	r1, #165	; 0xa5
 8006d88:	f001 fd58 	bl	800883c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d96:	3b01      	subs	r3, #1
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	f023 0307 	bic.w	r3, r3, #7
 8006da4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00a      	beq.n	8006dc6 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	617b      	str	r3, [r7, #20]
}
 8006dc2:	bf00      	nop
 8006dc4:	e7fe      	b.n	8006dc4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	61fb      	str	r3, [r7, #28]
 8006dca:	e012      	b.n	8006df2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	7819      	ldrb	r1, [r3, #0]
 8006dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	4413      	add	r3, r2
 8006dda:	3334      	adds	r3, #52	; 0x34
 8006ddc:	460a      	mov	r2, r1
 8006dde:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	4413      	add	r3, r2
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d006      	beq.n	8006dfa <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	3301      	adds	r3, #1
 8006df0:	61fb      	str	r3, [r7, #28]
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	2b0f      	cmp	r3, #15
 8006df6:	d9e9      	bls.n	8006dcc <prvInitialiseNewTask+0x5e>
 8006df8:	e000      	b.n	8006dfc <prvInitialiseNewTask+0x8e>
		{
			break;
 8006dfa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e06:	2b37      	cmp	r3, #55	; 0x37
 8006e08:	d901      	bls.n	8006e0e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e0a:	2337      	movs	r3, #55	; 0x37
 8006e0c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e12:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e18:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e22:	3304      	adds	r3, #4
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7ff f98c 	bl	8006142 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2c:	3318      	adds	r3, #24
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7ff f987 	bl	8006142 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e48:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	68f9      	ldr	r1, [r7, #12]
 8006e5c:	69b8      	ldr	r0, [r7, #24]
 8006e5e:	f001 f8ef 	bl	8008040 <pxPortInitialiseStack>
 8006e62:	4602      	mov	r2, r0
 8006e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e66:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d002      	beq.n	8006e74 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e72:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e74:	bf00      	nop
 8006e76:	3720      	adds	r7, #32
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e84:	f001 f9ca 	bl	800821c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e88:	4b2d      	ldr	r3, [pc, #180]	; (8006f40 <prvAddNewTaskToReadyList+0xc4>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	4a2c      	ldr	r2, [pc, #176]	; (8006f40 <prvAddNewTaskToReadyList+0xc4>)
 8006e90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e92:	4b2c      	ldr	r3, [pc, #176]	; (8006f44 <prvAddNewTaskToReadyList+0xc8>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d109      	bne.n	8006eae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e9a:	4a2a      	ldr	r2, [pc, #168]	; (8006f44 <prvAddNewTaskToReadyList+0xc8>)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ea0:	4b27      	ldr	r3, [pc, #156]	; (8006f40 <prvAddNewTaskToReadyList+0xc4>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d110      	bne.n	8006eca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ea8:	f000 fc16 	bl	80076d8 <prvInitialiseTaskLists>
 8006eac:	e00d      	b.n	8006eca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006eae:	4b26      	ldr	r3, [pc, #152]	; (8006f48 <prvAddNewTaskToReadyList+0xcc>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d109      	bne.n	8006eca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006eb6:	4b23      	ldr	r3, [pc, #140]	; (8006f44 <prvAddNewTaskToReadyList+0xc8>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d802      	bhi.n	8006eca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ec4:	4a1f      	ldr	r2, [pc, #124]	; (8006f44 <prvAddNewTaskToReadyList+0xc8>)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006eca:	4b20      	ldr	r3, [pc, #128]	; (8006f4c <prvAddNewTaskToReadyList+0xd0>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	4a1e      	ldr	r2, [pc, #120]	; (8006f4c <prvAddNewTaskToReadyList+0xd0>)
 8006ed2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ed4:	4b1d      	ldr	r3, [pc, #116]	; (8006f4c <prvAddNewTaskToReadyList+0xd0>)
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee0:	4b1b      	ldr	r3, [pc, #108]	; (8006f50 <prvAddNewTaskToReadyList+0xd4>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d903      	bls.n	8006ef0 <prvAddNewTaskToReadyList+0x74>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eec:	4a18      	ldr	r2, [pc, #96]	; (8006f50 <prvAddNewTaskToReadyList+0xd4>)
 8006eee:	6013      	str	r3, [r2, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4a15      	ldr	r2, [pc, #84]	; (8006f54 <prvAddNewTaskToReadyList+0xd8>)
 8006efe:	441a      	add	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	3304      	adds	r3, #4
 8006f04:	4619      	mov	r1, r3
 8006f06:	4610      	mov	r0, r2
 8006f08:	f7ff f927 	bl	800615a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006f0c:	f001 f9b6 	bl	800827c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006f10:	4b0d      	ldr	r3, [pc, #52]	; (8006f48 <prvAddNewTaskToReadyList+0xcc>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00e      	beq.n	8006f36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f18:	4b0a      	ldr	r3, [pc, #40]	; (8006f44 <prvAddNewTaskToReadyList+0xc8>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d207      	bcs.n	8006f36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006f26:	4b0c      	ldr	r3, [pc, #48]	; (8006f58 <prvAddNewTaskToReadyList+0xdc>)
 8006f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f36:	bf00      	nop
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	20000c44 	.word	0x20000c44
 8006f44:	20000770 	.word	0x20000770
 8006f48:	20000c50 	.word	0x20000c50
 8006f4c:	20000c60 	.word	0x20000c60
 8006f50:	20000c4c 	.word	0x20000c4c
 8006f54:	20000774 	.word	0x20000774
 8006f58:	e000ed04 	.word	0xe000ed04

08006f5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f64:	2300      	movs	r3, #0
 8006f66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d017      	beq.n	8006f9e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f6e:	4b13      	ldr	r3, [pc, #76]	; (8006fbc <vTaskDelay+0x60>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <vTaskDelay+0x30>
	__asm volatile
 8006f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	60bb      	str	r3, [r7, #8]
}
 8006f88:	bf00      	nop
 8006f8a:	e7fe      	b.n	8006f8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006f8c:	f000 f880 	bl	8007090 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f90:	2100      	movs	r1, #0
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fcee 	bl	8007974 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f98:	f000 f888 	bl	80070ac <xTaskResumeAll>
 8006f9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d107      	bne.n	8006fb4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006fa4:	4b06      	ldr	r3, [pc, #24]	; (8006fc0 <vTaskDelay+0x64>)
 8006fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006fb4:	bf00      	nop
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	20000c6c 	.word	0x20000c6c
 8006fc0:	e000ed04 	.word	0xe000ed04

08006fc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b08a      	sub	sp, #40	; 0x28
 8006fc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006fd2:	463a      	mov	r2, r7
 8006fd4:	1d39      	adds	r1, r7, #4
 8006fd6:	f107 0308 	add.w	r3, r7, #8
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7ff f860 	bl	80060a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	9202      	str	r2, [sp, #8]
 8006fe8:	9301      	str	r3, [sp, #4]
 8006fea:	2300      	movs	r3, #0
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	2300      	movs	r3, #0
 8006ff0:	460a      	mov	r2, r1
 8006ff2:	4921      	ldr	r1, [pc, #132]	; (8007078 <vTaskStartScheduler+0xb4>)
 8006ff4:	4821      	ldr	r0, [pc, #132]	; (800707c <vTaskStartScheduler+0xb8>)
 8006ff6:	f7ff fe19 	bl	8006c2c <xTaskCreateStatic>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	4a20      	ldr	r2, [pc, #128]	; (8007080 <vTaskStartScheduler+0xbc>)
 8006ffe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007000:	4b1f      	ldr	r3, [pc, #124]	; (8007080 <vTaskStartScheduler+0xbc>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d002      	beq.n	800700e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007008:	2301      	movs	r3, #1
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	e001      	b.n	8007012 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800700e:	2300      	movs	r3, #0
 8007010:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d102      	bne.n	800701e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007018:	f000 fd00 	bl	8007a1c <xTimerCreateTimerTask>
 800701c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d116      	bne.n	8007052 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	613b      	str	r3, [r7, #16]
}
 8007036:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007038:	4b12      	ldr	r3, [pc, #72]	; (8007084 <vTaskStartScheduler+0xc0>)
 800703a:	f04f 32ff 	mov.w	r2, #4294967295
 800703e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007040:	4b11      	ldr	r3, [pc, #68]	; (8007088 <vTaskStartScheduler+0xc4>)
 8007042:	2201      	movs	r2, #1
 8007044:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007046:	4b11      	ldr	r3, [pc, #68]	; (800708c <vTaskStartScheduler+0xc8>)
 8007048:	2200      	movs	r2, #0
 800704a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800704c:	f001 f874 	bl	8008138 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007050:	e00e      	b.n	8007070 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007058:	d10a      	bne.n	8007070 <vTaskStartScheduler+0xac>
	__asm volatile
 800705a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	60fb      	str	r3, [r7, #12]
}
 800706c:	bf00      	nop
 800706e:	e7fe      	b.n	800706e <vTaskStartScheduler+0xaa>
}
 8007070:	bf00      	nop
 8007072:	3718      	adds	r7, #24
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	0800ac60 	.word	0x0800ac60
 800707c:	080076a9 	.word	0x080076a9
 8007080:	20000c68 	.word	0x20000c68
 8007084:	20000c64 	.word	0x20000c64
 8007088:	20000c50 	.word	0x20000c50
 800708c:	20000c48 	.word	0x20000c48

08007090 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007090:	b480      	push	{r7}
 8007092:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007094:	4b04      	ldr	r3, [pc, #16]	; (80070a8 <vTaskSuspendAll+0x18>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3301      	adds	r3, #1
 800709a:	4a03      	ldr	r2, [pc, #12]	; (80070a8 <vTaskSuspendAll+0x18>)
 800709c:	6013      	str	r3, [r2, #0]
}
 800709e:	bf00      	nop
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bc80      	pop	{r7}
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	20000c6c 	.word	0x20000c6c

080070ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80070b2:	2300      	movs	r3, #0
 80070b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80070ba:	4b42      	ldr	r3, [pc, #264]	; (80071c4 <xTaskResumeAll+0x118>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10a      	bne.n	80070d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80070c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c6:	f383 8811 	msr	BASEPRI, r3
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	603b      	str	r3, [r7, #0]
}
 80070d4:	bf00      	nop
 80070d6:	e7fe      	b.n	80070d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80070d8:	f001 f8a0 	bl	800821c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80070dc:	4b39      	ldr	r3, [pc, #228]	; (80071c4 <xTaskResumeAll+0x118>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	3b01      	subs	r3, #1
 80070e2:	4a38      	ldr	r2, [pc, #224]	; (80071c4 <xTaskResumeAll+0x118>)
 80070e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070e6:	4b37      	ldr	r3, [pc, #220]	; (80071c4 <xTaskResumeAll+0x118>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d162      	bne.n	80071b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80070ee:	4b36      	ldr	r3, [pc, #216]	; (80071c8 <xTaskResumeAll+0x11c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d05e      	beq.n	80071b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070f6:	e02f      	b.n	8007158 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80070f8:	4b34      	ldr	r3, [pc, #208]	; (80071cc <xTaskResumeAll+0x120>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3318      	adds	r3, #24
 8007104:	4618      	mov	r0, r3
 8007106:	f7ff f883 	bl	8006210 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3304      	adds	r3, #4
 800710e:	4618      	mov	r0, r3
 8007110:	f7ff f87e 	bl	8006210 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007118:	4b2d      	ldr	r3, [pc, #180]	; (80071d0 <xTaskResumeAll+0x124>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	429a      	cmp	r2, r3
 800711e:	d903      	bls.n	8007128 <xTaskResumeAll+0x7c>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007124:	4a2a      	ldr	r2, [pc, #168]	; (80071d0 <xTaskResumeAll+0x124>)
 8007126:	6013      	str	r3, [r2, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800712c:	4613      	mov	r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4a27      	ldr	r2, [pc, #156]	; (80071d4 <xTaskResumeAll+0x128>)
 8007136:	441a      	add	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3304      	adds	r3, #4
 800713c:	4619      	mov	r1, r3
 800713e:	4610      	mov	r0, r2
 8007140:	f7ff f80b 	bl	800615a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007148:	4b23      	ldr	r3, [pc, #140]	; (80071d8 <xTaskResumeAll+0x12c>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714e:	429a      	cmp	r2, r3
 8007150:	d302      	bcc.n	8007158 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007152:	4b22      	ldr	r3, [pc, #136]	; (80071dc <xTaskResumeAll+0x130>)
 8007154:	2201      	movs	r2, #1
 8007156:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007158:	4b1c      	ldr	r3, [pc, #112]	; (80071cc <xTaskResumeAll+0x120>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1cb      	bne.n	80070f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d001      	beq.n	800716a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007166:	f000 fb55 	bl	8007814 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800716a:	4b1d      	ldr	r3, [pc, #116]	; (80071e0 <xTaskResumeAll+0x134>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d010      	beq.n	8007198 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007176:	f000 f845 	bl	8007204 <xTaskIncrementTick>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d002      	beq.n	8007186 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007180:	4b16      	ldr	r3, [pc, #88]	; (80071dc <xTaskResumeAll+0x130>)
 8007182:	2201      	movs	r2, #1
 8007184:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	3b01      	subs	r3, #1
 800718a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1f1      	bne.n	8007176 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007192:	4b13      	ldr	r3, [pc, #76]	; (80071e0 <xTaskResumeAll+0x134>)
 8007194:	2200      	movs	r2, #0
 8007196:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007198:	4b10      	ldr	r3, [pc, #64]	; (80071dc <xTaskResumeAll+0x130>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d009      	beq.n	80071b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80071a0:	2301      	movs	r3, #1
 80071a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80071a4:	4b0f      	ldr	r3, [pc, #60]	; (80071e4 <xTaskResumeAll+0x138>)
 80071a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071b4:	f001 f862 	bl	800827c <vPortExitCritical>

	return xAlreadyYielded;
 80071b8:	68bb      	ldr	r3, [r7, #8]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	20000c6c 	.word	0x20000c6c
 80071c8:	20000c44 	.word	0x20000c44
 80071cc:	20000c04 	.word	0x20000c04
 80071d0:	20000c4c 	.word	0x20000c4c
 80071d4:	20000774 	.word	0x20000774
 80071d8:	20000770 	.word	0x20000770
 80071dc:	20000c58 	.word	0x20000c58
 80071e0:	20000c54 	.word	0x20000c54
 80071e4:	e000ed04 	.word	0xe000ed04

080071e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80071ee:	4b04      	ldr	r3, [pc, #16]	; (8007200 <xTaskGetTickCount+0x18>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80071f4:	687b      	ldr	r3, [r7, #4]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bc80      	pop	{r7}
 80071fe:	4770      	bx	lr
 8007200:	20000c48 	.word	0x20000c48

08007204 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b086      	sub	sp, #24
 8007208:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800720a:	2300      	movs	r3, #0
 800720c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800720e:	4b51      	ldr	r3, [pc, #324]	; (8007354 <xTaskIncrementTick+0x150>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	f040 808e 	bne.w	8007334 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007218:	4b4f      	ldr	r3, [pc, #316]	; (8007358 <xTaskIncrementTick+0x154>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	3301      	adds	r3, #1
 800721e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007220:	4a4d      	ldr	r2, [pc, #308]	; (8007358 <xTaskIncrementTick+0x154>)
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d120      	bne.n	800726e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800722c:	4b4b      	ldr	r3, [pc, #300]	; (800735c <xTaskIncrementTick+0x158>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <xTaskIncrementTick+0x48>
	__asm volatile
 8007236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	603b      	str	r3, [r7, #0]
}
 8007248:	bf00      	nop
 800724a:	e7fe      	b.n	800724a <xTaskIncrementTick+0x46>
 800724c:	4b43      	ldr	r3, [pc, #268]	; (800735c <xTaskIncrementTick+0x158>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	4b43      	ldr	r3, [pc, #268]	; (8007360 <xTaskIncrementTick+0x15c>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a41      	ldr	r2, [pc, #260]	; (800735c <xTaskIncrementTick+0x158>)
 8007258:	6013      	str	r3, [r2, #0]
 800725a:	4a41      	ldr	r2, [pc, #260]	; (8007360 <xTaskIncrementTick+0x15c>)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6013      	str	r3, [r2, #0]
 8007260:	4b40      	ldr	r3, [pc, #256]	; (8007364 <xTaskIncrementTick+0x160>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3301      	adds	r3, #1
 8007266:	4a3f      	ldr	r2, [pc, #252]	; (8007364 <xTaskIncrementTick+0x160>)
 8007268:	6013      	str	r3, [r2, #0]
 800726a:	f000 fad3 	bl	8007814 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800726e:	4b3e      	ldr	r3, [pc, #248]	; (8007368 <xTaskIncrementTick+0x164>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	429a      	cmp	r2, r3
 8007276:	d34e      	bcc.n	8007316 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007278:	4b38      	ldr	r3, [pc, #224]	; (800735c <xTaskIncrementTick+0x158>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <xTaskIncrementTick+0x82>
 8007282:	2301      	movs	r3, #1
 8007284:	e000      	b.n	8007288 <xTaskIncrementTick+0x84>
 8007286:	2300      	movs	r3, #0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d004      	beq.n	8007296 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800728c:	4b36      	ldr	r3, [pc, #216]	; (8007368 <xTaskIncrementTick+0x164>)
 800728e:	f04f 32ff 	mov.w	r2, #4294967295
 8007292:	601a      	str	r2, [r3, #0]
					break;
 8007294:	e03f      	b.n	8007316 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007296:	4b31      	ldr	r3, [pc, #196]	; (800735c <xTaskIncrementTick+0x158>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d203      	bcs.n	80072b6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80072ae:	4a2e      	ldr	r2, [pc, #184]	; (8007368 <xTaskIncrementTick+0x164>)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6013      	str	r3, [r2, #0]
						break;
 80072b4:	e02f      	b.n	8007316 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	3304      	adds	r3, #4
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fe ffa8 	bl	8006210 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d004      	beq.n	80072d2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	3318      	adds	r3, #24
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7fe ff9f 	bl	8006210 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d6:	4b25      	ldr	r3, [pc, #148]	; (800736c <xTaskIncrementTick+0x168>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d903      	bls.n	80072e6 <xTaskIncrementTick+0xe2>
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e2:	4a22      	ldr	r2, [pc, #136]	; (800736c <xTaskIncrementTick+0x168>)
 80072e4:	6013      	str	r3, [r2, #0]
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ea:	4613      	mov	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4413      	add	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4a1f      	ldr	r2, [pc, #124]	; (8007370 <xTaskIncrementTick+0x16c>)
 80072f4:	441a      	add	r2, r3
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	3304      	adds	r3, #4
 80072fa:	4619      	mov	r1, r3
 80072fc:	4610      	mov	r0, r2
 80072fe:	f7fe ff2c 	bl	800615a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007306:	4b1b      	ldr	r3, [pc, #108]	; (8007374 <xTaskIncrementTick+0x170>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730c:	429a      	cmp	r2, r3
 800730e:	d3b3      	bcc.n	8007278 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007310:	2301      	movs	r3, #1
 8007312:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007314:	e7b0      	b.n	8007278 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007316:	4b17      	ldr	r3, [pc, #92]	; (8007374 <xTaskIncrementTick+0x170>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731c:	4914      	ldr	r1, [pc, #80]	; (8007370 <xTaskIncrementTick+0x16c>)
 800731e:	4613      	mov	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	440b      	add	r3, r1
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d907      	bls.n	800733e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800732e:	2301      	movs	r3, #1
 8007330:	617b      	str	r3, [r7, #20]
 8007332:	e004      	b.n	800733e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007334:	4b10      	ldr	r3, [pc, #64]	; (8007378 <xTaskIncrementTick+0x174>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3301      	adds	r3, #1
 800733a:	4a0f      	ldr	r2, [pc, #60]	; (8007378 <xTaskIncrementTick+0x174>)
 800733c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800733e:	4b0f      	ldr	r3, [pc, #60]	; (800737c <xTaskIncrementTick+0x178>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007346:	2301      	movs	r3, #1
 8007348:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800734a:	697b      	ldr	r3, [r7, #20]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3718      	adds	r7, #24
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	20000c6c 	.word	0x20000c6c
 8007358:	20000c48 	.word	0x20000c48
 800735c:	20000bfc 	.word	0x20000bfc
 8007360:	20000c00 	.word	0x20000c00
 8007364:	20000c5c 	.word	0x20000c5c
 8007368:	20000c64 	.word	0x20000c64
 800736c:	20000c4c 	.word	0x20000c4c
 8007370:	20000774 	.word	0x20000774
 8007374:	20000770 	.word	0x20000770
 8007378:	20000c54 	.word	0x20000c54
 800737c:	20000c58 	.word	0x20000c58

08007380 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007386:	4b27      	ldr	r3, [pc, #156]	; (8007424 <vTaskSwitchContext+0xa4>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800738e:	4b26      	ldr	r3, [pc, #152]	; (8007428 <vTaskSwitchContext+0xa8>)
 8007390:	2201      	movs	r2, #1
 8007392:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007394:	e041      	b.n	800741a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007396:	4b24      	ldr	r3, [pc, #144]	; (8007428 <vTaskSwitchContext+0xa8>)
 8007398:	2200      	movs	r2, #0
 800739a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800739c:	4b23      	ldr	r3, [pc, #140]	; (800742c <vTaskSwitchContext+0xac>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	60fb      	str	r3, [r7, #12]
 80073a2:	e010      	b.n	80073c6 <vTaskSwitchContext+0x46>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10a      	bne.n	80073c0 <vTaskSwitchContext+0x40>
	__asm volatile
 80073aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	607b      	str	r3, [r7, #4]
}
 80073bc:	bf00      	nop
 80073be:	e7fe      	b.n	80073be <vTaskSwitchContext+0x3e>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	60fb      	str	r3, [r7, #12]
 80073c6:	491a      	ldr	r1, [pc, #104]	; (8007430 <vTaskSwitchContext+0xb0>)
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	4613      	mov	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	440b      	add	r3, r1
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d0e4      	beq.n	80073a4 <vTaskSwitchContext+0x24>
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	4613      	mov	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4a12      	ldr	r2, [pc, #72]	; (8007430 <vTaskSwitchContext+0xb0>)
 80073e6:	4413      	add	r3, r2
 80073e8:	60bb      	str	r3, [r7, #8]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	605a      	str	r2, [r3, #4]
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	3308      	adds	r3, #8
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d104      	bne.n	800740a <vTaskSwitchContext+0x8a>
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	605a      	str	r2, [r3, #4]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	4a08      	ldr	r2, [pc, #32]	; (8007434 <vTaskSwitchContext+0xb4>)
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	4a05      	ldr	r2, [pc, #20]	; (800742c <vTaskSwitchContext+0xac>)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6013      	str	r3, [r2, #0]
}
 800741a:	bf00      	nop
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	bc80      	pop	{r7}
 8007422:	4770      	bx	lr
 8007424:	20000c6c 	.word	0x20000c6c
 8007428:	20000c58 	.word	0x20000c58
 800742c:	20000c4c 	.word	0x20000c4c
 8007430:	20000774 	.word	0x20000774
 8007434:	20000770 	.word	0x20000770

08007438 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10a      	bne.n	800745e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	60fb      	str	r3, [r7, #12]
}
 800745a:	bf00      	nop
 800745c:	e7fe      	b.n	800745c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800745e:	4b07      	ldr	r3, [pc, #28]	; (800747c <vTaskPlaceOnEventList+0x44>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	3318      	adds	r3, #24
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7fe fe9a 	bl	80061a0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800746c:	2101      	movs	r1, #1
 800746e:	6838      	ldr	r0, [r7, #0]
 8007470:	f000 fa80 	bl	8007974 <prvAddCurrentTaskToDelayedList>
}
 8007474:	bf00      	nop
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	20000770 	.word	0x20000770

08007480 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10a      	bne.n	80074a8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	617b      	str	r3, [r7, #20]
}
 80074a4:	bf00      	nop
 80074a6:	e7fe      	b.n	80074a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074a8:	4b0a      	ldr	r3, [pc, #40]	; (80074d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	3318      	adds	r3, #24
 80074ae:	4619      	mov	r1, r3
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f7fe fe52 	bl	800615a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d002      	beq.n	80074c2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80074bc:	f04f 33ff 	mov.w	r3, #4294967295
 80074c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80074c2:	6879      	ldr	r1, [r7, #4]
 80074c4:	68b8      	ldr	r0, [r7, #8]
 80074c6:	f000 fa55 	bl	8007974 <prvAddCurrentTaskToDelayedList>
	}
 80074ca:	bf00      	nop
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	20000770 	.word	0x20000770

080074d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10a      	bne.n	8007504 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	60fb      	str	r3, [r7, #12]
}
 8007500:	bf00      	nop
 8007502:	e7fe      	b.n	8007502 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	3318      	adds	r3, #24
 8007508:	4618      	mov	r0, r3
 800750a:	f7fe fe81 	bl	8006210 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800750e:	4b1e      	ldr	r3, [pc, #120]	; (8007588 <xTaskRemoveFromEventList+0xb0>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d11d      	bne.n	8007552 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	3304      	adds	r3, #4
 800751a:	4618      	mov	r0, r3
 800751c:	f7fe fe78 	bl	8006210 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007524:	4b19      	ldr	r3, [pc, #100]	; (800758c <xTaskRemoveFromEventList+0xb4>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	429a      	cmp	r2, r3
 800752a:	d903      	bls.n	8007534 <xTaskRemoveFromEventList+0x5c>
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007530:	4a16      	ldr	r2, [pc, #88]	; (800758c <xTaskRemoveFromEventList+0xb4>)
 8007532:	6013      	str	r3, [r2, #0]
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007538:	4613      	mov	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4a13      	ldr	r2, [pc, #76]	; (8007590 <xTaskRemoveFromEventList+0xb8>)
 8007542:	441a      	add	r2, r3
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	3304      	adds	r3, #4
 8007548:	4619      	mov	r1, r3
 800754a:	4610      	mov	r0, r2
 800754c:	f7fe fe05 	bl	800615a <vListInsertEnd>
 8007550:	e005      	b.n	800755e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	3318      	adds	r3, #24
 8007556:	4619      	mov	r1, r3
 8007558:	480e      	ldr	r0, [pc, #56]	; (8007594 <xTaskRemoveFromEventList+0xbc>)
 800755a:	f7fe fdfe 	bl	800615a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007562:	4b0d      	ldr	r3, [pc, #52]	; (8007598 <xTaskRemoveFromEventList+0xc0>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007568:	429a      	cmp	r2, r3
 800756a:	d905      	bls.n	8007578 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800756c:	2301      	movs	r3, #1
 800756e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007570:	4b0a      	ldr	r3, [pc, #40]	; (800759c <xTaskRemoveFromEventList+0xc4>)
 8007572:	2201      	movs	r2, #1
 8007574:	601a      	str	r2, [r3, #0]
 8007576:	e001      	b.n	800757c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007578:	2300      	movs	r3, #0
 800757a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800757c:	697b      	ldr	r3, [r7, #20]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	20000c6c 	.word	0x20000c6c
 800758c:	20000c4c 	.word	0x20000c4c
 8007590:	20000774 	.word	0x20000774
 8007594:	20000c04 	.word	0x20000c04
 8007598:	20000770 	.word	0x20000770
 800759c:	20000c58 	.word	0x20000c58

080075a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80075a8:	4b06      	ldr	r3, [pc, #24]	; (80075c4 <vTaskInternalSetTimeOutState+0x24>)
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80075b0:	4b05      	ldr	r3, [pc, #20]	; (80075c8 <vTaskInternalSetTimeOutState+0x28>)
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	605a      	str	r2, [r3, #4]
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	bc80      	pop	{r7}
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	20000c5c 	.word	0x20000c5c
 80075c8:	20000c48 	.word	0x20000c48

080075cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10a      	bne.n	80075f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80075dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	613b      	str	r3, [r7, #16]
}
 80075ee:	bf00      	nop
 80075f0:	e7fe      	b.n	80075f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10a      	bne.n	800760e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80075f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	60fb      	str	r3, [r7, #12]
}
 800760a:	bf00      	nop
 800760c:	e7fe      	b.n	800760c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800760e:	f000 fe05 	bl	800821c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007612:	4b1d      	ldr	r3, [pc, #116]	; (8007688 <xTaskCheckForTimeOut+0xbc>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	69ba      	ldr	r2, [r7, #24]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762a:	d102      	bne.n	8007632 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800762c:	2300      	movs	r3, #0
 800762e:	61fb      	str	r3, [r7, #28]
 8007630:	e023      	b.n	800767a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	4b15      	ldr	r3, [pc, #84]	; (800768c <xTaskCheckForTimeOut+0xc0>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	429a      	cmp	r2, r3
 800763c:	d007      	beq.n	800764e <xTaskCheckForTimeOut+0x82>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	69ba      	ldr	r2, [r7, #24]
 8007644:	429a      	cmp	r2, r3
 8007646:	d302      	bcc.n	800764e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007648:	2301      	movs	r3, #1
 800764a:	61fb      	str	r3, [r7, #28]
 800764c:	e015      	b.n	800767a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	429a      	cmp	r2, r3
 8007656:	d20b      	bcs.n	8007670 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	1ad2      	subs	r2, r2, r3
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f7ff ff9b 	bl	80075a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800766a:	2300      	movs	r3, #0
 800766c:	61fb      	str	r3, [r7, #28]
 800766e:	e004      	b.n	800767a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	2200      	movs	r2, #0
 8007674:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007676:	2301      	movs	r3, #1
 8007678:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800767a:	f000 fdff 	bl	800827c <vPortExitCritical>

	return xReturn;
 800767e:	69fb      	ldr	r3, [r7, #28]
}
 8007680:	4618      	mov	r0, r3
 8007682:	3720      	adds	r7, #32
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	20000c48 	.word	0x20000c48
 800768c:	20000c5c 	.word	0x20000c5c

08007690 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007690:	b480      	push	{r7}
 8007692:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007694:	4b03      	ldr	r3, [pc, #12]	; (80076a4 <vTaskMissedYield+0x14>)
 8007696:	2201      	movs	r2, #1
 8007698:	601a      	str	r2, [r3, #0]
}
 800769a:	bf00      	nop
 800769c:	46bd      	mov	sp, r7
 800769e:	bc80      	pop	{r7}
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	20000c58 	.word	0x20000c58

080076a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80076b0:	f000 f852 	bl	8007758 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80076b4:	4b06      	ldr	r3, [pc, #24]	; (80076d0 <prvIdleTask+0x28>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d9f9      	bls.n	80076b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80076bc:	4b05      	ldr	r3, [pc, #20]	; (80076d4 <prvIdleTask+0x2c>)
 80076be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076c2:	601a      	str	r2, [r3, #0]
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80076cc:	e7f0      	b.n	80076b0 <prvIdleTask+0x8>
 80076ce:	bf00      	nop
 80076d0:	20000774 	.word	0x20000774
 80076d4:	e000ed04 	.word	0xe000ed04

080076d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076de:	2300      	movs	r3, #0
 80076e0:	607b      	str	r3, [r7, #4]
 80076e2:	e00c      	b.n	80076fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	4613      	mov	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4413      	add	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	4a12      	ldr	r2, [pc, #72]	; (8007738 <prvInitialiseTaskLists+0x60>)
 80076f0:	4413      	add	r3, r2
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fe fd06 	bl	8006104 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	3301      	adds	r3, #1
 80076fc:	607b      	str	r3, [r7, #4]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2b37      	cmp	r3, #55	; 0x37
 8007702:	d9ef      	bls.n	80076e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007704:	480d      	ldr	r0, [pc, #52]	; (800773c <prvInitialiseTaskLists+0x64>)
 8007706:	f7fe fcfd 	bl	8006104 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800770a:	480d      	ldr	r0, [pc, #52]	; (8007740 <prvInitialiseTaskLists+0x68>)
 800770c:	f7fe fcfa 	bl	8006104 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007710:	480c      	ldr	r0, [pc, #48]	; (8007744 <prvInitialiseTaskLists+0x6c>)
 8007712:	f7fe fcf7 	bl	8006104 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007716:	480c      	ldr	r0, [pc, #48]	; (8007748 <prvInitialiseTaskLists+0x70>)
 8007718:	f7fe fcf4 	bl	8006104 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800771c:	480b      	ldr	r0, [pc, #44]	; (800774c <prvInitialiseTaskLists+0x74>)
 800771e:	f7fe fcf1 	bl	8006104 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007722:	4b0b      	ldr	r3, [pc, #44]	; (8007750 <prvInitialiseTaskLists+0x78>)
 8007724:	4a05      	ldr	r2, [pc, #20]	; (800773c <prvInitialiseTaskLists+0x64>)
 8007726:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007728:	4b0a      	ldr	r3, [pc, #40]	; (8007754 <prvInitialiseTaskLists+0x7c>)
 800772a:	4a05      	ldr	r2, [pc, #20]	; (8007740 <prvInitialiseTaskLists+0x68>)
 800772c:	601a      	str	r2, [r3, #0]
}
 800772e:	bf00      	nop
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	20000774 	.word	0x20000774
 800773c:	20000bd4 	.word	0x20000bd4
 8007740:	20000be8 	.word	0x20000be8
 8007744:	20000c04 	.word	0x20000c04
 8007748:	20000c18 	.word	0x20000c18
 800774c:	20000c30 	.word	0x20000c30
 8007750:	20000bfc 	.word	0x20000bfc
 8007754:	20000c00 	.word	0x20000c00

08007758 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800775e:	e019      	b.n	8007794 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007760:	f000 fd5c 	bl	800821c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007764:	4b10      	ldr	r3, [pc, #64]	; (80077a8 <prvCheckTasksWaitingTermination+0x50>)
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	3304      	adds	r3, #4
 8007770:	4618      	mov	r0, r3
 8007772:	f7fe fd4d 	bl	8006210 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007776:	4b0d      	ldr	r3, [pc, #52]	; (80077ac <prvCheckTasksWaitingTermination+0x54>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3b01      	subs	r3, #1
 800777c:	4a0b      	ldr	r2, [pc, #44]	; (80077ac <prvCheckTasksWaitingTermination+0x54>)
 800777e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007780:	4b0b      	ldr	r3, [pc, #44]	; (80077b0 <prvCheckTasksWaitingTermination+0x58>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3b01      	subs	r3, #1
 8007786:	4a0a      	ldr	r2, [pc, #40]	; (80077b0 <prvCheckTasksWaitingTermination+0x58>)
 8007788:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800778a:	f000 fd77 	bl	800827c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f810 	bl	80077b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007794:	4b06      	ldr	r3, [pc, #24]	; (80077b0 <prvCheckTasksWaitingTermination+0x58>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1e1      	bne.n	8007760 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800779c:	bf00      	nop
 800779e:	bf00      	nop
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20000c18 	.word	0x20000c18
 80077ac:	20000c44 	.word	0x20000c44
 80077b0:	20000c2c 	.word	0x20000c2c

080077b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d108      	bne.n	80077d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 feea 	bl	80085a4 <vPortFree>
				vPortFree( pxTCB );
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fee7 	bl	80085a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80077d6:	e018      	b.n	800780a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d103      	bne.n	80077ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fede 	bl	80085a4 <vPortFree>
	}
 80077e8:	e00f      	b.n	800780a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	d00a      	beq.n	800780a <prvDeleteTCB+0x56>
	__asm volatile
 80077f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f8:	f383 8811 	msr	BASEPRI, r3
 80077fc:	f3bf 8f6f 	isb	sy
 8007800:	f3bf 8f4f 	dsb	sy
 8007804:	60fb      	str	r3, [r7, #12]
}
 8007806:	bf00      	nop
 8007808:	e7fe      	b.n	8007808 <prvDeleteTCB+0x54>
	}
 800780a:	bf00      	nop
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
	...

08007814 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800781a:	4b0e      	ldr	r3, [pc, #56]	; (8007854 <prvResetNextTaskUnblockTime+0x40>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <prvResetNextTaskUnblockTime+0x14>
 8007824:	2301      	movs	r3, #1
 8007826:	e000      	b.n	800782a <prvResetNextTaskUnblockTime+0x16>
 8007828:	2300      	movs	r3, #0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d004      	beq.n	8007838 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800782e:	4b0a      	ldr	r3, [pc, #40]	; (8007858 <prvResetNextTaskUnblockTime+0x44>)
 8007830:	f04f 32ff 	mov.w	r2, #4294967295
 8007834:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007836:	e008      	b.n	800784a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007838:	4b06      	ldr	r3, [pc, #24]	; (8007854 <prvResetNextTaskUnblockTime+0x40>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	4a04      	ldr	r2, [pc, #16]	; (8007858 <prvResetNextTaskUnblockTime+0x44>)
 8007848:	6013      	str	r3, [r2, #0]
}
 800784a:	bf00      	nop
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	bc80      	pop	{r7}
 8007852:	4770      	bx	lr
 8007854:	20000bfc 	.word	0x20000bfc
 8007858:	20000c64 	.word	0x20000c64

0800785c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007862:	4b0b      	ldr	r3, [pc, #44]	; (8007890 <xTaskGetSchedulerState+0x34>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d102      	bne.n	8007870 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800786a:	2301      	movs	r3, #1
 800786c:	607b      	str	r3, [r7, #4]
 800786e:	e008      	b.n	8007882 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007870:	4b08      	ldr	r3, [pc, #32]	; (8007894 <xTaskGetSchedulerState+0x38>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d102      	bne.n	800787e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007878:	2302      	movs	r3, #2
 800787a:	607b      	str	r3, [r7, #4]
 800787c:	e001      	b.n	8007882 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800787e:	2300      	movs	r3, #0
 8007880:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007882:	687b      	ldr	r3, [r7, #4]
	}
 8007884:	4618      	mov	r0, r3
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	bc80      	pop	{r7}
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	20000c50 	.word	0x20000c50
 8007894:	20000c6c 	.word	0x20000c6c

08007898 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80078a4:	2300      	movs	r3, #0
 80078a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d056      	beq.n	800795c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80078ae:	4b2e      	ldr	r3, [pc, #184]	; (8007968 <xTaskPriorityDisinherit+0xd0>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d00a      	beq.n	80078ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80078b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	60fb      	str	r3, [r7, #12]
}
 80078ca:	bf00      	nop
 80078cc:	e7fe      	b.n	80078cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10a      	bne.n	80078ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80078d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078da:	f383 8811 	msr	BASEPRI, r3
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f3bf 8f4f 	dsb	sy
 80078e6:	60bb      	str	r3, [r7, #8]
}
 80078e8:	bf00      	nop
 80078ea:	e7fe      	b.n	80078ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078f0:	1e5a      	subs	r2, r3, #1
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078fe:	429a      	cmp	r2, r3
 8007900:	d02c      	beq.n	800795c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007906:	2b00      	cmp	r3, #0
 8007908:	d128      	bne.n	800795c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	3304      	adds	r3, #4
 800790e:	4618      	mov	r0, r3
 8007910:	f7fe fc7e 	bl	8006210 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007920:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792c:	4b0f      	ldr	r3, [pc, #60]	; (800796c <xTaskPriorityDisinherit+0xd4>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	429a      	cmp	r2, r3
 8007932:	d903      	bls.n	800793c <xTaskPriorityDisinherit+0xa4>
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007938:	4a0c      	ldr	r2, [pc, #48]	; (800796c <xTaskPriorityDisinherit+0xd4>)
 800793a:	6013      	str	r3, [r2, #0]
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007940:	4613      	mov	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4a09      	ldr	r2, [pc, #36]	; (8007970 <xTaskPriorityDisinherit+0xd8>)
 800794a:	441a      	add	r2, r3
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	3304      	adds	r3, #4
 8007950:	4619      	mov	r1, r3
 8007952:	4610      	mov	r0, r2
 8007954:	f7fe fc01 	bl	800615a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007958:	2301      	movs	r3, #1
 800795a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800795c:	697b      	ldr	r3, [r7, #20]
	}
 800795e:	4618      	mov	r0, r3
 8007960:	3718      	adds	r7, #24
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	20000770 	.word	0x20000770
 800796c:	20000c4c 	.word	0x20000c4c
 8007970:	20000774 	.word	0x20000774

08007974 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800797e:	4b21      	ldr	r3, [pc, #132]	; (8007a04 <prvAddCurrentTaskToDelayedList+0x90>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007984:	4b20      	ldr	r3, [pc, #128]	; (8007a08 <prvAddCurrentTaskToDelayedList+0x94>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3304      	adds	r3, #4
 800798a:	4618      	mov	r0, r3
 800798c:	f7fe fc40 	bl	8006210 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007996:	d10a      	bne.n	80079ae <prvAddCurrentTaskToDelayedList+0x3a>
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d007      	beq.n	80079ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800799e:	4b1a      	ldr	r3, [pc, #104]	; (8007a08 <prvAddCurrentTaskToDelayedList+0x94>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3304      	adds	r3, #4
 80079a4:	4619      	mov	r1, r3
 80079a6:	4819      	ldr	r0, [pc, #100]	; (8007a0c <prvAddCurrentTaskToDelayedList+0x98>)
 80079a8:	f7fe fbd7 	bl	800615a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079ac:	e026      	b.n	80079fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4413      	add	r3, r2
 80079b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079b6:	4b14      	ldr	r3, [pc, #80]	; (8007a08 <prvAddCurrentTaskToDelayedList+0x94>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d209      	bcs.n	80079da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079c6:	4b12      	ldr	r3, [pc, #72]	; (8007a10 <prvAddCurrentTaskToDelayedList+0x9c>)
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	4b0f      	ldr	r3, [pc, #60]	; (8007a08 <prvAddCurrentTaskToDelayedList+0x94>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3304      	adds	r3, #4
 80079d0:	4619      	mov	r1, r3
 80079d2:	4610      	mov	r0, r2
 80079d4:	f7fe fbe4 	bl	80061a0 <vListInsert>
}
 80079d8:	e010      	b.n	80079fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079da:	4b0e      	ldr	r3, [pc, #56]	; (8007a14 <prvAddCurrentTaskToDelayedList+0xa0>)
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	4b0a      	ldr	r3, [pc, #40]	; (8007a08 <prvAddCurrentTaskToDelayedList+0x94>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	3304      	adds	r3, #4
 80079e4:	4619      	mov	r1, r3
 80079e6:	4610      	mov	r0, r2
 80079e8:	f7fe fbda 	bl	80061a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80079ec:	4b0a      	ldr	r3, [pc, #40]	; (8007a18 <prvAddCurrentTaskToDelayedList+0xa4>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d202      	bcs.n	80079fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80079f6:	4a08      	ldr	r2, [pc, #32]	; (8007a18 <prvAddCurrentTaskToDelayedList+0xa4>)
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	6013      	str	r3, [r2, #0]
}
 80079fc:	bf00      	nop
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	20000c48 	.word	0x20000c48
 8007a08:	20000770 	.word	0x20000770
 8007a0c:	20000c30 	.word	0x20000c30
 8007a10:	20000c00 	.word	0x20000c00
 8007a14:	20000bfc 	.word	0x20000bfc
 8007a18:	20000c64 	.word	0x20000c64

08007a1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b08a      	sub	sp, #40	; 0x28
 8007a20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007a22:	2300      	movs	r3, #0
 8007a24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007a26:	f000 facb 	bl	8007fc0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007a2a:	4b1c      	ldr	r3, [pc, #112]	; (8007a9c <xTimerCreateTimerTask+0x80>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d021      	beq.n	8007a76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007a32:	2300      	movs	r3, #0
 8007a34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007a36:	2300      	movs	r3, #0
 8007a38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007a3a:	1d3a      	adds	r2, r7, #4
 8007a3c:	f107 0108 	add.w	r1, r7, #8
 8007a40:	f107 030c 	add.w	r3, r7, #12
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fe fb43 	bl	80060d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007a4a:	6879      	ldr	r1, [r7, #4]
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	9202      	str	r2, [sp, #8]
 8007a52:	9301      	str	r3, [sp, #4]
 8007a54:	2302      	movs	r3, #2
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	2300      	movs	r3, #0
 8007a5a:	460a      	mov	r2, r1
 8007a5c:	4910      	ldr	r1, [pc, #64]	; (8007aa0 <xTimerCreateTimerTask+0x84>)
 8007a5e:	4811      	ldr	r0, [pc, #68]	; (8007aa4 <xTimerCreateTimerTask+0x88>)
 8007a60:	f7ff f8e4 	bl	8006c2c <xTaskCreateStatic>
 8007a64:	4603      	mov	r3, r0
 8007a66:	4a10      	ldr	r2, [pc, #64]	; (8007aa8 <xTimerCreateTimerTask+0x8c>)
 8007a68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007a6a:	4b0f      	ldr	r3, [pc, #60]	; (8007aa8 <xTimerCreateTimerTask+0x8c>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007a72:	2301      	movs	r3, #1
 8007a74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10a      	bne.n	8007a92 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a80:	f383 8811 	msr	BASEPRI, r3
 8007a84:	f3bf 8f6f 	isb	sy
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	613b      	str	r3, [r7, #16]
}
 8007a8e:	bf00      	nop
 8007a90:	e7fe      	b.n	8007a90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007a92:	697b      	ldr	r3, [r7, #20]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3718      	adds	r7, #24
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	20000ca0 	.word	0x20000ca0
 8007aa0:	0800ac68 	.word	0x0800ac68
 8007aa4:	08007bc9 	.word	0x08007bc9
 8007aa8:	20000ca4 	.word	0x20000ca4

08007aac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b08a      	sub	sp, #40	; 0x28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
 8007ab8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007aba:	2300      	movs	r3, #0
 8007abc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10a      	bne.n	8007ada <xTimerGenericCommand+0x2e>
	__asm volatile
 8007ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac8:	f383 8811 	msr	BASEPRI, r3
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	623b      	str	r3, [r7, #32]
}
 8007ad6:	bf00      	nop
 8007ad8:	e7fe      	b.n	8007ad8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007ada:	4b1a      	ldr	r3, [pc, #104]	; (8007b44 <xTimerGenericCommand+0x98>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d02a      	beq.n	8007b38 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2b05      	cmp	r3, #5
 8007af2:	dc18      	bgt.n	8007b26 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007af4:	f7ff feb2 	bl	800785c <xTaskGetSchedulerState>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d109      	bne.n	8007b12 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007afe:	4b11      	ldr	r3, [pc, #68]	; (8007b44 <xTimerGenericCommand+0x98>)
 8007b00:	6818      	ldr	r0, [r3, #0]
 8007b02:	f107 0110 	add.w	r1, r7, #16
 8007b06:	2300      	movs	r3, #0
 8007b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b0a:	f7fe fcad 	bl	8006468 <xQueueGenericSend>
 8007b0e:	6278      	str	r0, [r7, #36]	; 0x24
 8007b10:	e012      	b.n	8007b38 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007b12:	4b0c      	ldr	r3, [pc, #48]	; (8007b44 <xTimerGenericCommand+0x98>)
 8007b14:	6818      	ldr	r0, [r3, #0]
 8007b16:	f107 0110 	add.w	r1, r7, #16
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f7fe fca3 	bl	8006468 <xQueueGenericSend>
 8007b22:	6278      	str	r0, [r7, #36]	; 0x24
 8007b24:	e008      	b.n	8007b38 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007b26:	4b07      	ldr	r3, [pc, #28]	; (8007b44 <xTimerGenericCommand+0x98>)
 8007b28:	6818      	ldr	r0, [r3, #0]
 8007b2a:	f107 0110 	add.w	r1, r7, #16
 8007b2e:	2300      	movs	r3, #0
 8007b30:	683a      	ldr	r2, [r7, #0]
 8007b32:	f7fe fd97 	bl	8006664 <xQueueGenericSendFromISR>
 8007b36:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3728      	adds	r7, #40	; 0x28
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	20000ca0 	.word	0x20000ca0

08007b48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b088      	sub	sp, #32
 8007b4c:	af02      	add	r7, sp, #8
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b52:	4b1c      	ldr	r3, [pc, #112]	; (8007bc4 <prvProcessExpiredTimer+0x7c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	3304      	adds	r3, #4
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fe fb55 	bl	8006210 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	69db      	ldr	r3, [r3, #28]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d122      	bne.n	8007bb4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	699a      	ldr	r2, [r3, #24]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	18d1      	adds	r1, r2, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	6978      	ldr	r0, [r7, #20]
 8007b7c:	f000 f8c8 	bl	8007d10 <prvInsertTimerInActiveList>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d016      	beq.n	8007bb4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b86:	2300      	movs	r3, #0
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	2100      	movs	r1, #0
 8007b90:	6978      	ldr	r0, [r7, #20]
 8007b92:	f7ff ff8b 	bl	8007aac <xTimerGenericCommand>
 8007b96:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10a      	bne.n	8007bb4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	60fb      	str	r3, [r7, #12]
}
 8007bb0:	bf00      	nop
 8007bb2:	e7fe      	b.n	8007bb2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb8:	6978      	ldr	r0, [r7, #20]
 8007bba:	4798      	blx	r3
}
 8007bbc:	bf00      	nop
 8007bbe:	3718      	adds	r7, #24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	20000c98 	.word	0x20000c98

08007bc8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007bd0:	f107 0308 	add.w	r3, r7, #8
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f000 f857 	bl	8007c88 <prvGetNextExpireTime>
 8007bda:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	4619      	mov	r1, r3
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 f803 	bl	8007bec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007be6:	f000 f8d5 	bl	8007d94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007bea:	e7f1      	b.n	8007bd0 <prvTimerTask+0x8>

08007bec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007bf6:	f7ff fa4b 	bl	8007090 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bfa:	f107 0308 	add.w	r3, r7, #8
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 f866 	bl	8007cd0 <prvSampleTimeNow>
 8007c04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d130      	bne.n	8007c6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10a      	bne.n	8007c28 <prvProcessTimerOrBlockTask+0x3c>
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d806      	bhi.n	8007c28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007c1a:	f7ff fa47 	bl	80070ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c1e:	68f9      	ldr	r1, [r7, #12]
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f7ff ff91 	bl	8007b48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007c26:	e024      	b.n	8007c72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d008      	beq.n	8007c40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c2e:	4b13      	ldr	r3, [pc, #76]	; (8007c7c <prvProcessTimerOrBlockTask+0x90>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	bf0c      	ite	eq
 8007c38:	2301      	moveq	r3, #1
 8007c3a:	2300      	movne	r3, #0
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c40:	4b0f      	ldr	r3, [pc, #60]	; (8007c80 <prvProcessTimerOrBlockTask+0x94>)
 8007c42:	6818      	ldr	r0, [r3, #0]
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	f7fe ffb9 	bl	8006bc4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007c52:	f7ff fa2b 	bl	80070ac <xTaskResumeAll>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10a      	bne.n	8007c72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007c5c:	4b09      	ldr	r3, [pc, #36]	; (8007c84 <prvProcessTimerOrBlockTask+0x98>)
 8007c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c62:	601a      	str	r2, [r3, #0]
 8007c64:	f3bf 8f4f 	dsb	sy
 8007c68:	f3bf 8f6f 	isb	sy
}
 8007c6c:	e001      	b.n	8007c72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007c6e:	f7ff fa1d 	bl	80070ac <xTaskResumeAll>
}
 8007c72:	bf00      	nop
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	20000c9c 	.word	0x20000c9c
 8007c80:	20000ca0 	.word	0x20000ca0
 8007c84:	e000ed04 	.word	0xe000ed04

08007c88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007c90:	4b0e      	ldr	r3, [pc, #56]	; (8007ccc <prvGetNextExpireTime+0x44>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	bf0c      	ite	eq
 8007c9a:	2301      	moveq	r3, #1
 8007c9c:	2300      	movne	r3, #0
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d105      	bne.n	8007cba <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cae:	4b07      	ldr	r3, [pc, #28]	; (8007ccc <prvGetNextExpireTime+0x44>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	60fb      	str	r3, [r7, #12]
 8007cb8:	e001      	b.n	8007cbe <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bc80      	pop	{r7}
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	20000c98 	.word	0x20000c98

08007cd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007cd8:	f7ff fa86 	bl	80071e8 <xTaskGetTickCount>
 8007cdc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007cde:	4b0b      	ldr	r3, [pc, #44]	; (8007d0c <prvSampleTimeNow+0x3c>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d205      	bcs.n	8007cf4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ce8:	f000 f908 	bl	8007efc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	601a      	str	r2, [r3, #0]
 8007cf2:	e002      	b.n	8007cfa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007cfa:	4a04      	ldr	r2, [pc, #16]	; (8007d0c <prvSampleTimeNow+0x3c>)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007d00:	68fb      	ldr	r3, [r7, #12]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	20000ca8 	.word	0x20000ca8

08007d10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
 8007d1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d812      	bhi.n	8007d5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	1ad2      	subs	r2, r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d302      	bcc.n	8007d4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007d44:	2301      	movs	r3, #1
 8007d46:	617b      	str	r3, [r7, #20]
 8007d48:	e01b      	b.n	8007d82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d4a:	4b10      	ldr	r3, [pc, #64]	; (8007d8c <prvInsertTimerInActiveList+0x7c>)
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3304      	adds	r3, #4
 8007d52:	4619      	mov	r1, r3
 8007d54:	4610      	mov	r0, r2
 8007d56:	f7fe fa23 	bl	80061a0 <vListInsert>
 8007d5a:	e012      	b.n	8007d82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d206      	bcs.n	8007d72 <prvInsertTimerInActiveList+0x62>
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d302      	bcc.n	8007d72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	617b      	str	r3, [r7, #20]
 8007d70:	e007      	b.n	8007d82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d72:	4b07      	ldr	r3, [pc, #28]	; (8007d90 <prvInsertTimerInActiveList+0x80>)
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	f7fe fa0f 	bl	80061a0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007d82:	697b      	ldr	r3, [r7, #20]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3718      	adds	r7, #24
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	20000c9c 	.word	0x20000c9c
 8007d90:	20000c98 	.word	0x20000c98

08007d94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b08e      	sub	sp, #56	; 0x38
 8007d98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d9a:	e09d      	b.n	8007ed8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	da18      	bge.n	8007dd4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007da2:	1d3b      	adds	r3, r7, #4
 8007da4:	3304      	adds	r3, #4
 8007da6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10a      	bne.n	8007dc4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	61fb      	str	r3, [r7, #28]
}
 8007dc0:	bf00      	nop
 8007dc2:	e7fe      	b.n	8007dc2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dca:	6850      	ldr	r0, [r2, #4]
 8007dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dce:	6892      	ldr	r2, [r2, #8]
 8007dd0:	4611      	mov	r1, r2
 8007dd2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	db7d      	blt.n	8007ed6 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d004      	beq.n	8007df0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de8:	3304      	adds	r3, #4
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fe fa10 	bl	8006210 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007df0:	463b      	mov	r3, r7
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7ff ff6c 	bl	8007cd0 <prvSampleTimeNow>
 8007df8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b09      	cmp	r3, #9
 8007dfe:	d86b      	bhi.n	8007ed8 <prvProcessReceivedCommands+0x144>
 8007e00:	a201      	add	r2, pc, #4	; (adr r2, 8007e08 <prvProcessReceivedCommands+0x74>)
 8007e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e06:	bf00      	nop
 8007e08:	08007e31 	.word	0x08007e31
 8007e0c:	08007e31 	.word	0x08007e31
 8007e10:	08007e31 	.word	0x08007e31
 8007e14:	08007ed9 	.word	0x08007ed9
 8007e18:	08007e8d 	.word	0x08007e8d
 8007e1c:	08007ec5 	.word	0x08007ec5
 8007e20:	08007e31 	.word	0x08007e31
 8007e24:	08007e31 	.word	0x08007e31
 8007e28:	08007ed9 	.word	0x08007ed9
 8007e2c:	08007e8d 	.word	0x08007e8d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	18d1      	adds	r1, r2, r3
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e3e:	f7ff ff67 	bl	8007d10 <prvInsertTimerInActiveList>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d047      	beq.n	8007ed8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e4e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e52:	69db      	ldr	r3, [r3, #28]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d13f      	bne.n	8007ed8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	441a      	add	r2, r3
 8007e60:	2300      	movs	r3, #0
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	2300      	movs	r3, #0
 8007e66:	2100      	movs	r1, #0
 8007e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e6a:	f7ff fe1f 	bl	8007aac <xTimerGenericCommand>
 8007e6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d130      	bne.n	8007ed8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7a:	f383 8811 	msr	BASEPRI, r3
 8007e7e:	f3bf 8f6f 	isb	sy
 8007e82:	f3bf 8f4f 	dsb	sy
 8007e86:	61bb      	str	r3, [r7, #24]
}
 8007e88:	bf00      	nop
 8007e8a:	e7fe      	b.n	8007e8a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e90:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10a      	bne.n	8007eb0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9e:	f383 8811 	msr	BASEPRI, r3
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	617b      	str	r3, [r7, #20]
}
 8007eac:	bf00      	nop
 8007eae:	e7fe      	b.n	8007eae <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb2:	699a      	ldr	r2, [r3, #24]
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb6:	18d1      	adds	r1, r2, r3
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ebe:	f7ff ff27 	bl	8007d10 <prvInsertTimerInActiveList>
					break;
 8007ec2:	e009      	b.n	8007ed8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d104      	bne.n	8007ed8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ed0:	f000 fb68 	bl	80085a4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007ed4:	e000      	b.n	8007ed8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007ed6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ed8:	4b07      	ldr	r3, [pc, #28]	; (8007ef8 <prvProcessReceivedCommands+0x164>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	1d39      	adds	r1, r7, #4
 8007ede:	2200      	movs	r2, #0
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7fe fc57 	bl	8006794 <xQueueReceive>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f47f af57 	bne.w	8007d9c <prvProcessReceivedCommands+0x8>
	}
}
 8007eee:	bf00      	nop
 8007ef0:	bf00      	nop
 8007ef2:	3730      	adds	r7, #48	; 0x30
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	20000ca0 	.word	0x20000ca0

08007efc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b088      	sub	sp, #32
 8007f00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f02:	e045      	b.n	8007f90 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f04:	4b2c      	ldr	r3, [pc, #176]	; (8007fb8 <prvSwitchTimerLists+0xbc>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f0e:	4b2a      	ldr	r3, [pc, #168]	; (8007fb8 <prvSwitchTimerLists+0xbc>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fe f977 	bl	8006210 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	69db      	ldr	r3, [r3, #28]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d12e      	bne.n	8007f90 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	4413      	add	r3, r2
 8007f3a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d90e      	bls.n	8007f62 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f50:	4b19      	ldr	r3, [pc, #100]	; (8007fb8 <prvSwitchTimerLists+0xbc>)
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	3304      	adds	r3, #4
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4610      	mov	r0, r2
 8007f5c:	f7fe f920 	bl	80061a0 <vListInsert>
 8007f60:	e016      	b.n	8007f90 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f62:	2300      	movs	r3, #0
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	2300      	movs	r3, #0
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f7ff fd9d 	bl	8007aac <xTimerGenericCommand>
 8007f72:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d10a      	bne.n	8007f90 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7e:	f383 8811 	msr	BASEPRI, r3
 8007f82:	f3bf 8f6f 	isb	sy
 8007f86:	f3bf 8f4f 	dsb	sy
 8007f8a:	603b      	str	r3, [r7, #0]
}
 8007f8c:	bf00      	nop
 8007f8e:	e7fe      	b.n	8007f8e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f90:	4b09      	ldr	r3, [pc, #36]	; (8007fb8 <prvSwitchTimerLists+0xbc>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1b4      	bne.n	8007f04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007f9a:	4b07      	ldr	r3, [pc, #28]	; (8007fb8 <prvSwitchTimerLists+0xbc>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007fa0:	4b06      	ldr	r3, [pc, #24]	; (8007fbc <prvSwitchTimerLists+0xc0>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a04      	ldr	r2, [pc, #16]	; (8007fb8 <prvSwitchTimerLists+0xbc>)
 8007fa6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007fa8:	4a04      	ldr	r2, [pc, #16]	; (8007fbc <prvSwitchTimerLists+0xc0>)
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	6013      	str	r3, [r2, #0]
}
 8007fae:	bf00      	nop
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20000c98 	.word	0x20000c98
 8007fbc:	20000c9c 	.word	0x20000c9c

08007fc0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007fc6:	f000 f929 	bl	800821c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007fca:	4b15      	ldr	r3, [pc, #84]	; (8008020 <prvCheckForValidListAndQueue+0x60>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d120      	bne.n	8008014 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007fd2:	4814      	ldr	r0, [pc, #80]	; (8008024 <prvCheckForValidListAndQueue+0x64>)
 8007fd4:	f7fe f896 	bl	8006104 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007fd8:	4813      	ldr	r0, [pc, #76]	; (8008028 <prvCheckForValidListAndQueue+0x68>)
 8007fda:	f7fe f893 	bl	8006104 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007fde:	4b13      	ldr	r3, [pc, #76]	; (800802c <prvCheckForValidListAndQueue+0x6c>)
 8007fe0:	4a10      	ldr	r2, [pc, #64]	; (8008024 <prvCheckForValidListAndQueue+0x64>)
 8007fe2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007fe4:	4b12      	ldr	r3, [pc, #72]	; (8008030 <prvCheckForValidListAndQueue+0x70>)
 8007fe6:	4a10      	ldr	r2, [pc, #64]	; (8008028 <prvCheckForValidListAndQueue+0x68>)
 8007fe8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007fea:	2300      	movs	r3, #0
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	4b11      	ldr	r3, [pc, #68]	; (8008034 <prvCheckForValidListAndQueue+0x74>)
 8007ff0:	4a11      	ldr	r2, [pc, #68]	; (8008038 <prvCheckForValidListAndQueue+0x78>)
 8007ff2:	2110      	movs	r1, #16
 8007ff4:	200a      	movs	r0, #10
 8007ff6:	f7fe f99d 	bl	8006334 <xQueueGenericCreateStatic>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	4a08      	ldr	r2, [pc, #32]	; (8008020 <prvCheckForValidListAndQueue+0x60>)
 8007ffe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008000:	4b07      	ldr	r3, [pc, #28]	; (8008020 <prvCheckForValidListAndQueue+0x60>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d005      	beq.n	8008014 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008008:	4b05      	ldr	r3, [pc, #20]	; (8008020 <prvCheckForValidListAndQueue+0x60>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	490b      	ldr	r1, [pc, #44]	; (800803c <prvCheckForValidListAndQueue+0x7c>)
 800800e:	4618      	mov	r0, r3
 8008010:	f7fe fdb0 	bl	8006b74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008014:	f000 f932 	bl	800827c <vPortExitCritical>
}
 8008018:	bf00      	nop
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	20000ca0 	.word	0x20000ca0
 8008024:	20000c70 	.word	0x20000c70
 8008028:	20000c84 	.word	0x20000c84
 800802c:	20000c98 	.word	0x20000c98
 8008030:	20000c9c 	.word	0x20000c9c
 8008034:	20000d4c 	.word	0x20000d4c
 8008038:	20000cac 	.word	0x20000cac
 800803c:	0800ac70 	.word	0x0800ac70

08008040 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	3b04      	subs	r3, #4
 8008050:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008058:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	3b04      	subs	r3, #4
 800805e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	f023 0201 	bic.w	r2, r3, #1
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3b04      	subs	r3, #4
 800806e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008070:	4a08      	ldr	r2, [pc, #32]	; (8008094 <pxPortInitialiseStack+0x54>)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	3b14      	subs	r3, #20
 800807a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	3b20      	subs	r3, #32
 8008086:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008088:	68fb      	ldr	r3, [r7, #12]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3714      	adds	r7, #20
 800808e:	46bd      	mov	sp, r7
 8008090:	bc80      	pop	{r7}
 8008092:	4770      	bx	lr
 8008094:	08008099 	.word	0x08008099

08008098 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800809e:	2300      	movs	r3, #0
 80080a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80080a2:	4b12      	ldr	r3, [pc, #72]	; (80080ec <prvTaskExitError+0x54>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080aa:	d00a      	beq.n	80080c2 <prvTaskExitError+0x2a>
	__asm volatile
 80080ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b0:	f383 8811 	msr	BASEPRI, r3
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	60fb      	str	r3, [r7, #12]
}
 80080be:	bf00      	nop
 80080c0:	e7fe      	b.n	80080c0 <prvTaskExitError+0x28>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	60bb      	str	r3, [r7, #8]
}
 80080d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80080d6:	bf00      	nop
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0fc      	beq.n	80080d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80080de:	bf00      	nop
 80080e0:	bf00      	nop
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bc80      	pop	{r7}
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	2000000c 	.word	0x2000000c

080080f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80080f0:	4b07      	ldr	r3, [pc, #28]	; (8008110 <pxCurrentTCBConst2>)
 80080f2:	6819      	ldr	r1, [r3, #0]
 80080f4:	6808      	ldr	r0, [r1, #0]
 80080f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80080fa:	f380 8809 	msr	PSP, r0
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f04f 0000 	mov.w	r0, #0
 8008106:	f380 8811 	msr	BASEPRI, r0
 800810a:	f04e 0e0d 	orr.w	lr, lr, #13
 800810e:	4770      	bx	lr

08008110 <pxCurrentTCBConst2>:
 8008110:	20000770 	.word	0x20000770
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008114:	bf00      	nop
 8008116:	bf00      	nop

08008118 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008118:	4806      	ldr	r0, [pc, #24]	; (8008134 <prvPortStartFirstTask+0x1c>)
 800811a:	6800      	ldr	r0, [r0, #0]
 800811c:	6800      	ldr	r0, [r0, #0]
 800811e:	f380 8808 	msr	MSP, r0
 8008122:	b662      	cpsie	i
 8008124:	b661      	cpsie	f
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	df00      	svc	0
 8008130:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008132:	bf00      	nop
 8008134:	e000ed08 	.word	0xe000ed08

08008138 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800813e:	4b32      	ldr	r3, [pc, #200]	; (8008208 <xPortStartScheduler+0xd0>)
 8008140:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	b2db      	uxtb	r3, r3
 8008148:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	22ff      	movs	r2, #255	; 0xff
 800814e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	b2db      	uxtb	r3, r3
 8008156:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008158:	78fb      	ldrb	r3, [r7, #3]
 800815a:	b2db      	uxtb	r3, r3
 800815c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008160:	b2da      	uxtb	r2, r3
 8008162:	4b2a      	ldr	r3, [pc, #168]	; (800820c <xPortStartScheduler+0xd4>)
 8008164:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008166:	4b2a      	ldr	r3, [pc, #168]	; (8008210 <xPortStartScheduler+0xd8>)
 8008168:	2207      	movs	r2, #7
 800816a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800816c:	e009      	b.n	8008182 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800816e:	4b28      	ldr	r3, [pc, #160]	; (8008210 <xPortStartScheduler+0xd8>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	3b01      	subs	r3, #1
 8008174:	4a26      	ldr	r2, [pc, #152]	; (8008210 <xPortStartScheduler+0xd8>)
 8008176:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008178:	78fb      	ldrb	r3, [r7, #3]
 800817a:	b2db      	uxtb	r3, r3
 800817c:	005b      	lsls	r3, r3, #1
 800817e:	b2db      	uxtb	r3, r3
 8008180:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008182:	78fb      	ldrb	r3, [r7, #3]
 8008184:	b2db      	uxtb	r3, r3
 8008186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800818a:	2b80      	cmp	r3, #128	; 0x80
 800818c:	d0ef      	beq.n	800816e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800818e:	4b20      	ldr	r3, [pc, #128]	; (8008210 <xPortStartScheduler+0xd8>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f1c3 0307 	rsb	r3, r3, #7
 8008196:	2b04      	cmp	r3, #4
 8008198:	d00a      	beq.n	80081b0 <xPortStartScheduler+0x78>
	__asm volatile
 800819a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	60bb      	str	r3, [r7, #8]
}
 80081ac:	bf00      	nop
 80081ae:	e7fe      	b.n	80081ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80081b0:	4b17      	ldr	r3, [pc, #92]	; (8008210 <xPortStartScheduler+0xd8>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	021b      	lsls	r3, r3, #8
 80081b6:	4a16      	ldr	r2, [pc, #88]	; (8008210 <xPortStartScheduler+0xd8>)
 80081b8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081ba:	4b15      	ldr	r3, [pc, #84]	; (8008210 <xPortStartScheduler+0xd8>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081c2:	4a13      	ldr	r2, [pc, #76]	; (8008210 <xPortStartScheduler+0xd8>)
 80081c4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80081ce:	4b11      	ldr	r3, [pc, #68]	; (8008214 <xPortStartScheduler+0xdc>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a10      	ldr	r2, [pc, #64]	; (8008214 <xPortStartScheduler+0xdc>)
 80081d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80081d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80081da:	4b0e      	ldr	r3, [pc, #56]	; (8008214 <xPortStartScheduler+0xdc>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a0d      	ldr	r2, [pc, #52]	; (8008214 <xPortStartScheduler+0xdc>)
 80081e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80081e4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80081e6:	f000 f8b9 	bl	800835c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80081ea:	4b0b      	ldr	r3, [pc, #44]	; (8008218 <xPortStartScheduler+0xe0>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80081f0:	f7ff ff92 	bl	8008118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80081f4:	f7ff f8c4 	bl	8007380 <vTaskSwitchContext>
	prvTaskExitError();
 80081f8:	f7ff ff4e 	bl	8008098 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	e000e400 	.word	0xe000e400
 800820c:	20000d9c 	.word	0x20000d9c
 8008210:	20000da0 	.word	0x20000da0
 8008214:	e000ed20 	.word	0xe000ed20
 8008218:	2000000c 	.word	0x2000000c

0800821c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
	__asm volatile
 8008222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	607b      	str	r3, [r7, #4]
}
 8008234:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008236:	4b0f      	ldr	r3, [pc, #60]	; (8008274 <vPortEnterCritical+0x58>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3301      	adds	r3, #1
 800823c:	4a0d      	ldr	r2, [pc, #52]	; (8008274 <vPortEnterCritical+0x58>)
 800823e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008240:	4b0c      	ldr	r3, [pc, #48]	; (8008274 <vPortEnterCritical+0x58>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d10f      	bne.n	8008268 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008248:	4b0b      	ldr	r3, [pc, #44]	; (8008278 <vPortEnterCritical+0x5c>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00a      	beq.n	8008268 <vPortEnterCritical+0x4c>
	__asm volatile
 8008252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	603b      	str	r3, [r7, #0]
}
 8008264:	bf00      	nop
 8008266:	e7fe      	b.n	8008266 <vPortEnterCritical+0x4a>
	}
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	bc80      	pop	{r7}
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	2000000c 	.word	0x2000000c
 8008278:	e000ed04 	.word	0xe000ed04

0800827c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008282:	4b11      	ldr	r3, [pc, #68]	; (80082c8 <vPortExitCritical+0x4c>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10a      	bne.n	80082a0 <vPortExitCritical+0x24>
	__asm volatile
 800828a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828e:	f383 8811 	msr	BASEPRI, r3
 8008292:	f3bf 8f6f 	isb	sy
 8008296:	f3bf 8f4f 	dsb	sy
 800829a:	607b      	str	r3, [r7, #4]
}
 800829c:	bf00      	nop
 800829e:	e7fe      	b.n	800829e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80082a0:	4b09      	ldr	r3, [pc, #36]	; (80082c8 <vPortExitCritical+0x4c>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3b01      	subs	r3, #1
 80082a6:	4a08      	ldr	r2, [pc, #32]	; (80082c8 <vPortExitCritical+0x4c>)
 80082a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80082aa:	4b07      	ldr	r3, [pc, #28]	; (80082c8 <vPortExitCritical+0x4c>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d105      	bne.n	80082be <vPortExitCritical+0x42>
 80082b2:	2300      	movs	r3, #0
 80082b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	f383 8811 	msr	BASEPRI, r3
}
 80082bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80082be:	bf00      	nop
 80082c0:	370c      	adds	r7, #12
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bc80      	pop	{r7}
 80082c6:	4770      	bx	lr
 80082c8:	2000000c 	.word	0x2000000c
 80082cc:	00000000 	.word	0x00000000

080082d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80082d0:	f3ef 8009 	mrs	r0, PSP
 80082d4:	f3bf 8f6f 	isb	sy
 80082d8:	4b0d      	ldr	r3, [pc, #52]	; (8008310 <pxCurrentTCBConst>)
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80082e0:	6010      	str	r0, [r2, #0]
 80082e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80082e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80082ea:	f380 8811 	msr	BASEPRI, r0
 80082ee:	f7ff f847 	bl	8007380 <vTaskSwitchContext>
 80082f2:	f04f 0000 	mov.w	r0, #0
 80082f6:	f380 8811 	msr	BASEPRI, r0
 80082fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80082fe:	6819      	ldr	r1, [r3, #0]
 8008300:	6808      	ldr	r0, [r1, #0]
 8008302:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008306:	f380 8809 	msr	PSP, r0
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	4770      	bx	lr

08008310 <pxCurrentTCBConst>:
 8008310:	20000770 	.word	0x20000770
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008314:	bf00      	nop
 8008316:	bf00      	nop

08008318 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
	__asm volatile
 800831e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	607b      	str	r3, [r7, #4]
}
 8008330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008332:	f7fe ff67 	bl	8007204 <xTaskIncrementTick>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d003      	beq.n	8008344 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800833c:	4b06      	ldr	r3, [pc, #24]	; (8008358 <SysTick_Handler+0x40>)
 800833e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	2300      	movs	r3, #0
 8008346:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	f383 8811 	msr	BASEPRI, r3
}
 800834e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	e000ed04 	.word	0xe000ed04

0800835c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800835c:	b480      	push	{r7}
 800835e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008360:	4b0a      	ldr	r3, [pc, #40]	; (800838c <vPortSetupTimerInterrupt+0x30>)
 8008362:	2200      	movs	r2, #0
 8008364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008366:	4b0a      	ldr	r3, [pc, #40]	; (8008390 <vPortSetupTimerInterrupt+0x34>)
 8008368:	2200      	movs	r2, #0
 800836a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800836c:	4b09      	ldr	r3, [pc, #36]	; (8008394 <vPortSetupTimerInterrupt+0x38>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a09      	ldr	r2, [pc, #36]	; (8008398 <vPortSetupTimerInterrupt+0x3c>)
 8008372:	fba2 2303 	umull	r2, r3, r2, r3
 8008376:	099b      	lsrs	r3, r3, #6
 8008378:	4a08      	ldr	r2, [pc, #32]	; (800839c <vPortSetupTimerInterrupt+0x40>)
 800837a:	3b01      	subs	r3, #1
 800837c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800837e:	4b03      	ldr	r3, [pc, #12]	; (800838c <vPortSetupTimerInterrupt+0x30>)
 8008380:	2207      	movs	r2, #7
 8008382:	601a      	str	r2, [r3, #0]
}
 8008384:	bf00      	nop
 8008386:	46bd      	mov	sp, r7
 8008388:	bc80      	pop	{r7}
 800838a:	4770      	bx	lr
 800838c:	e000e010 	.word	0xe000e010
 8008390:	e000e018 	.word	0xe000e018
 8008394:	20000000 	.word	0x20000000
 8008398:	10624dd3 	.word	0x10624dd3
 800839c:	e000e014 	.word	0xe000e014

080083a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80083a6:	f3ef 8305 	mrs	r3, IPSR
 80083aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2b0f      	cmp	r3, #15
 80083b0:	d914      	bls.n	80083dc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80083b2:	4a16      	ldr	r2, [pc, #88]	; (800840c <vPortValidateInterruptPriority+0x6c>)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	4413      	add	r3, r2
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80083bc:	4b14      	ldr	r3, [pc, #80]	; (8008410 <vPortValidateInterruptPriority+0x70>)
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	7afa      	ldrb	r2, [r7, #11]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d20a      	bcs.n	80083dc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80083c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ca:	f383 8811 	msr	BASEPRI, r3
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	607b      	str	r3, [r7, #4]
}
 80083d8:	bf00      	nop
 80083da:	e7fe      	b.n	80083da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80083dc:	4b0d      	ldr	r3, [pc, #52]	; (8008414 <vPortValidateInterruptPriority+0x74>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80083e4:	4b0c      	ldr	r3, [pc, #48]	; (8008418 <vPortValidateInterruptPriority+0x78>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d90a      	bls.n	8008402 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80083ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f0:	f383 8811 	msr	BASEPRI, r3
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	603b      	str	r3, [r7, #0]
}
 80083fe:	bf00      	nop
 8008400:	e7fe      	b.n	8008400 <vPortValidateInterruptPriority+0x60>
	}
 8008402:	bf00      	nop
 8008404:	3714      	adds	r7, #20
 8008406:	46bd      	mov	sp, r7
 8008408:	bc80      	pop	{r7}
 800840a:	4770      	bx	lr
 800840c:	e000e3f0 	.word	0xe000e3f0
 8008410:	20000d9c 	.word	0x20000d9c
 8008414:	e000ed0c 	.word	0xe000ed0c
 8008418:	20000da0 	.word	0x20000da0

0800841c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b08a      	sub	sp, #40	; 0x28
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008424:	2300      	movs	r3, #0
 8008426:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008428:	f7fe fe32 	bl	8007090 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800842c:	4b58      	ldr	r3, [pc, #352]	; (8008590 <pvPortMalloc+0x174>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d101      	bne.n	8008438 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008434:	f000 f910 	bl	8008658 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008438:	4b56      	ldr	r3, [pc, #344]	; (8008594 <pvPortMalloc+0x178>)
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4013      	ands	r3, r2
 8008440:	2b00      	cmp	r3, #0
 8008442:	f040 808e 	bne.w	8008562 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01d      	beq.n	8008488 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800844c:	2208      	movs	r2, #8
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4413      	add	r3, r2
 8008452:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f003 0307 	and.w	r3, r3, #7
 800845a:	2b00      	cmp	r3, #0
 800845c:	d014      	beq.n	8008488 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f023 0307 	bic.w	r3, r3, #7
 8008464:	3308      	adds	r3, #8
 8008466:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f003 0307 	and.w	r3, r3, #7
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00a      	beq.n	8008488 <pvPortMalloc+0x6c>
	__asm volatile
 8008472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008476:	f383 8811 	msr	BASEPRI, r3
 800847a:	f3bf 8f6f 	isb	sy
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	617b      	str	r3, [r7, #20]
}
 8008484:	bf00      	nop
 8008486:	e7fe      	b.n	8008486 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d069      	beq.n	8008562 <pvPortMalloc+0x146>
 800848e:	4b42      	ldr	r3, [pc, #264]	; (8008598 <pvPortMalloc+0x17c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	429a      	cmp	r2, r3
 8008496:	d864      	bhi.n	8008562 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008498:	4b40      	ldr	r3, [pc, #256]	; (800859c <pvPortMalloc+0x180>)
 800849a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800849c:	4b3f      	ldr	r3, [pc, #252]	; (800859c <pvPortMalloc+0x180>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084a2:	e004      	b.n	80084ae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80084a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80084a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d903      	bls.n	80084c0 <pvPortMalloc+0xa4>
 80084b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1f1      	bne.n	80084a4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80084c0:	4b33      	ldr	r3, [pc, #204]	; (8008590 <pvPortMalloc+0x174>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d04b      	beq.n	8008562 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2208      	movs	r2, #8
 80084d0:	4413      	add	r3, r2
 80084d2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80084d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	1ad2      	subs	r2, r2, r3
 80084e4:	2308      	movs	r3, #8
 80084e6:	005b      	lsls	r3, r3, #1
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d91f      	bls.n	800852c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80084ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4413      	add	r3, r2
 80084f2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	f003 0307 	and.w	r3, r3, #7
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00a      	beq.n	8008514 <pvPortMalloc+0xf8>
	__asm volatile
 80084fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	613b      	str	r3, [r7, #16]
}
 8008510:	bf00      	nop
 8008512:	e7fe      	b.n	8008512 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008516:	685a      	ldr	r2, [r3, #4]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	1ad2      	subs	r2, r2, r3
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008526:	69b8      	ldr	r0, [r7, #24]
 8008528:	f000 f8f8 	bl	800871c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800852c:	4b1a      	ldr	r3, [pc, #104]	; (8008598 <pvPortMalloc+0x17c>)
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	4a18      	ldr	r2, [pc, #96]	; (8008598 <pvPortMalloc+0x17c>)
 8008538:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800853a:	4b17      	ldr	r3, [pc, #92]	; (8008598 <pvPortMalloc+0x17c>)
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	4b18      	ldr	r3, [pc, #96]	; (80085a0 <pvPortMalloc+0x184>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	429a      	cmp	r2, r3
 8008544:	d203      	bcs.n	800854e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008546:	4b14      	ldr	r3, [pc, #80]	; (8008598 <pvPortMalloc+0x17c>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a15      	ldr	r2, [pc, #84]	; (80085a0 <pvPortMalloc+0x184>)
 800854c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008550:	685a      	ldr	r2, [r3, #4]
 8008552:	4b10      	ldr	r3, [pc, #64]	; (8008594 <pvPortMalloc+0x178>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	431a      	orrs	r2, r3
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855e:	2200      	movs	r2, #0
 8008560:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008562:	f7fe fda3 	bl	80070ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	f003 0307 	and.w	r3, r3, #7
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00a      	beq.n	8008586 <pvPortMalloc+0x16a>
	__asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	60fb      	str	r3, [r7, #12]
}
 8008582:	bf00      	nop
 8008584:	e7fe      	b.n	8008584 <pvPortMalloc+0x168>
	return pvReturn;
 8008586:	69fb      	ldr	r3, [r7, #28]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3728      	adds	r7, #40	; 0x28
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	200019ac 	.word	0x200019ac
 8008594:	200019b8 	.word	0x200019b8
 8008598:	200019b0 	.word	0x200019b0
 800859c:	200019a4 	.word	0x200019a4
 80085a0:	200019b4 	.word	0x200019b4

080085a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d048      	beq.n	8008648 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80085b6:	2308      	movs	r3, #8
 80085b8:	425b      	negs	r3, r3
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	4413      	add	r3, r2
 80085be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	685a      	ldr	r2, [r3, #4]
 80085c8:	4b21      	ldr	r3, [pc, #132]	; (8008650 <vPortFree+0xac>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4013      	ands	r3, r2
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10a      	bne.n	80085e8 <vPortFree+0x44>
	__asm volatile
 80085d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d6:	f383 8811 	msr	BASEPRI, r3
 80085da:	f3bf 8f6f 	isb	sy
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	60fb      	str	r3, [r7, #12]
}
 80085e4:	bf00      	nop
 80085e6:	e7fe      	b.n	80085e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00a      	beq.n	8008606 <vPortFree+0x62>
	__asm volatile
 80085f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	60bb      	str	r3, [r7, #8]
}
 8008602:	bf00      	nop
 8008604:	e7fe      	b.n	8008604 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	685a      	ldr	r2, [r3, #4]
 800860a:	4b11      	ldr	r3, [pc, #68]	; (8008650 <vPortFree+0xac>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4013      	ands	r3, r2
 8008610:	2b00      	cmp	r3, #0
 8008612:	d019      	beq.n	8008648 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d115      	bne.n	8008648 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	685a      	ldr	r2, [r3, #4]
 8008620:	4b0b      	ldr	r3, [pc, #44]	; (8008650 <vPortFree+0xac>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	43db      	mvns	r3, r3
 8008626:	401a      	ands	r2, r3
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800862c:	f7fe fd30 	bl	8007090 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	685a      	ldr	r2, [r3, #4]
 8008634:	4b07      	ldr	r3, [pc, #28]	; (8008654 <vPortFree+0xb0>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4413      	add	r3, r2
 800863a:	4a06      	ldr	r2, [pc, #24]	; (8008654 <vPortFree+0xb0>)
 800863c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800863e:	6938      	ldr	r0, [r7, #16]
 8008640:	f000 f86c 	bl	800871c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008644:	f7fe fd32 	bl	80070ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008648:	bf00      	nop
 800864a:	3718      	adds	r7, #24
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	200019b8 	.word	0x200019b8
 8008654:	200019b0 	.word	0x200019b0

08008658 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800865e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008662:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008664:	4b27      	ldr	r3, [pc, #156]	; (8008704 <prvHeapInit+0xac>)
 8008666:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f003 0307 	and.w	r3, r3, #7
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00c      	beq.n	800868c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	3307      	adds	r3, #7
 8008676:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f023 0307 	bic.w	r3, r3, #7
 800867e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	4a1f      	ldr	r2, [pc, #124]	; (8008704 <prvHeapInit+0xac>)
 8008688:	4413      	add	r3, r2
 800868a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008690:	4a1d      	ldr	r2, [pc, #116]	; (8008708 <prvHeapInit+0xb0>)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008696:	4b1c      	ldr	r3, [pc, #112]	; (8008708 <prvHeapInit+0xb0>)
 8008698:	2200      	movs	r2, #0
 800869a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	4413      	add	r3, r2
 80086a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80086a4:	2208      	movs	r2, #8
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	1a9b      	subs	r3, r3, r2
 80086aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f023 0307 	bic.w	r3, r3, #7
 80086b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	4a15      	ldr	r2, [pc, #84]	; (800870c <prvHeapInit+0xb4>)
 80086b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80086ba:	4b14      	ldr	r3, [pc, #80]	; (800870c <prvHeapInit+0xb4>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2200      	movs	r2, #0
 80086c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80086c2:	4b12      	ldr	r3, [pc, #72]	; (800870c <prvHeapInit+0xb4>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2200      	movs	r2, #0
 80086c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	1ad2      	subs	r2, r2, r3
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086d8:	4b0c      	ldr	r3, [pc, #48]	; (800870c <prvHeapInit+0xb4>)
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	4a0a      	ldr	r2, [pc, #40]	; (8008710 <prvHeapInit+0xb8>)
 80086e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	4a09      	ldr	r2, [pc, #36]	; (8008714 <prvHeapInit+0xbc>)
 80086ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80086f0:	4b09      	ldr	r3, [pc, #36]	; (8008718 <prvHeapInit+0xc0>)
 80086f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80086f6:	601a      	str	r2, [r3, #0]
}
 80086f8:	bf00      	nop
 80086fa:	3714      	adds	r7, #20
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bc80      	pop	{r7}
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	20000da4 	.word	0x20000da4
 8008708:	200019a4 	.word	0x200019a4
 800870c:	200019ac 	.word	0x200019ac
 8008710:	200019b4 	.word	0x200019b4
 8008714:	200019b0 	.word	0x200019b0
 8008718:	200019b8 	.word	0x200019b8

0800871c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008724:	4b27      	ldr	r3, [pc, #156]	; (80087c4 <prvInsertBlockIntoFreeList+0xa8>)
 8008726:	60fb      	str	r3, [r7, #12]
 8008728:	e002      	b.n	8008730 <prvInsertBlockIntoFreeList+0x14>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	429a      	cmp	r2, r3
 8008738:	d8f7      	bhi.n	800872a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	4413      	add	r3, r2
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	429a      	cmp	r2, r3
 800874a:	d108      	bne.n	800875e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	685a      	ldr	r2, [r3, #4]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	441a      	add	r2, r3
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	441a      	add	r2, r3
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	429a      	cmp	r2, r3
 8008770:	d118      	bne.n	80087a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	4b14      	ldr	r3, [pc, #80]	; (80087c8 <prvInsertBlockIntoFreeList+0xac>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	429a      	cmp	r2, r3
 800877c:	d00d      	beq.n	800879a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685a      	ldr	r2, [r3, #4]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	441a      	add	r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	e008      	b.n	80087ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800879a:	4b0b      	ldr	r3, [pc, #44]	; (80087c8 <prvInsertBlockIntoFreeList+0xac>)
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	601a      	str	r2, [r3, #0]
 80087a2:	e003      	b.n	80087ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d002      	beq.n	80087ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087ba:	bf00      	nop
 80087bc:	3714      	adds	r7, #20
 80087be:	46bd      	mov	sp, r7
 80087c0:	bc80      	pop	{r7}
 80087c2:	4770      	bx	lr
 80087c4:	200019a4 	.word	0x200019a4
 80087c8:	200019ac 	.word	0x200019ac

080087cc <__errno>:
 80087cc:	4b01      	ldr	r3, [pc, #4]	; (80087d4 <__errno+0x8>)
 80087ce:	6818      	ldr	r0, [r3, #0]
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	20000010 	.word	0x20000010

080087d8 <__libc_init_array>:
 80087d8:	b570      	push	{r4, r5, r6, lr}
 80087da:	2600      	movs	r6, #0
 80087dc:	4d0c      	ldr	r5, [pc, #48]	; (8008810 <__libc_init_array+0x38>)
 80087de:	4c0d      	ldr	r4, [pc, #52]	; (8008814 <__libc_init_array+0x3c>)
 80087e0:	1b64      	subs	r4, r4, r5
 80087e2:	10a4      	asrs	r4, r4, #2
 80087e4:	42a6      	cmp	r6, r4
 80087e6:	d109      	bne.n	80087fc <__libc_init_array+0x24>
 80087e8:	f002 f9f8 	bl	800abdc <_init>
 80087ec:	2600      	movs	r6, #0
 80087ee:	4d0a      	ldr	r5, [pc, #40]	; (8008818 <__libc_init_array+0x40>)
 80087f0:	4c0a      	ldr	r4, [pc, #40]	; (800881c <__libc_init_array+0x44>)
 80087f2:	1b64      	subs	r4, r4, r5
 80087f4:	10a4      	asrs	r4, r4, #2
 80087f6:	42a6      	cmp	r6, r4
 80087f8:	d105      	bne.n	8008806 <__libc_init_array+0x2e>
 80087fa:	bd70      	pop	{r4, r5, r6, pc}
 80087fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008800:	4798      	blx	r3
 8008802:	3601      	adds	r6, #1
 8008804:	e7ee      	b.n	80087e4 <__libc_init_array+0xc>
 8008806:	f855 3b04 	ldr.w	r3, [r5], #4
 800880a:	4798      	blx	r3
 800880c:	3601      	adds	r6, #1
 800880e:	e7f2      	b.n	80087f6 <__libc_init_array+0x1e>
 8008810:	0800ae48 	.word	0x0800ae48
 8008814:	0800ae48 	.word	0x0800ae48
 8008818:	0800ae48 	.word	0x0800ae48
 800881c:	0800ae4c 	.word	0x0800ae4c

08008820 <memcpy>:
 8008820:	440a      	add	r2, r1
 8008822:	4291      	cmp	r1, r2
 8008824:	f100 33ff 	add.w	r3, r0, #4294967295
 8008828:	d100      	bne.n	800882c <memcpy+0xc>
 800882a:	4770      	bx	lr
 800882c:	b510      	push	{r4, lr}
 800882e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008832:	4291      	cmp	r1, r2
 8008834:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008838:	d1f9      	bne.n	800882e <memcpy+0xe>
 800883a:	bd10      	pop	{r4, pc}

0800883c <memset>:
 800883c:	4603      	mov	r3, r0
 800883e:	4402      	add	r2, r0
 8008840:	4293      	cmp	r3, r2
 8008842:	d100      	bne.n	8008846 <memset+0xa>
 8008844:	4770      	bx	lr
 8008846:	f803 1b01 	strb.w	r1, [r3], #1
 800884a:	e7f9      	b.n	8008840 <memset+0x4>

0800884c <iprintf>:
 800884c:	b40f      	push	{r0, r1, r2, r3}
 800884e:	4b0a      	ldr	r3, [pc, #40]	; (8008878 <iprintf+0x2c>)
 8008850:	b513      	push	{r0, r1, r4, lr}
 8008852:	681c      	ldr	r4, [r3, #0]
 8008854:	b124      	cbz	r4, 8008860 <iprintf+0x14>
 8008856:	69a3      	ldr	r3, [r4, #24]
 8008858:	b913      	cbnz	r3, 8008860 <iprintf+0x14>
 800885a:	4620      	mov	r0, r4
 800885c:	f000 fa5e 	bl	8008d1c <__sinit>
 8008860:	ab05      	add	r3, sp, #20
 8008862:	4620      	mov	r0, r4
 8008864:	9a04      	ldr	r2, [sp, #16]
 8008866:	68a1      	ldr	r1, [r4, #8]
 8008868:	9301      	str	r3, [sp, #4]
 800886a:	f000 fc29 	bl	80090c0 <_vfiprintf_r>
 800886e:	b002      	add	sp, #8
 8008870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008874:	b004      	add	sp, #16
 8008876:	4770      	bx	lr
 8008878:	20000010 	.word	0x20000010

0800887c <_puts_r>:
 800887c:	b570      	push	{r4, r5, r6, lr}
 800887e:	460e      	mov	r6, r1
 8008880:	4605      	mov	r5, r0
 8008882:	b118      	cbz	r0, 800888c <_puts_r+0x10>
 8008884:	6983      	ldr	r3, [r0, #24]
 8008886:	b90b      	cbnz	r3, 800888c <_puts_r+0x10>
 8008888:	f000 fa48 	bl	8008d1c <__sinit>
 800888c:	69ab      	ldr	r3, [r5, #24]
 800888e:	68ac      	ldr	r4, [r5, #8]
 8008890:	b913      	cbnz	r3, 8008898 <_puts_r+0x1c>
 8008892:	4628      	mov	r0, r5
 8008894:	f000 fa42 	bl	8008d1c <__sinit>
 8008898:	4b2c      	ldr	r3, [pc, #176]	; (800894c <_puts_r+0xd0>)
 800889a:	429c      	cmp	r4, r3
 800889c:	d120      	bne.n	80088e0 <_puts_r+0x64>
 800889e:	686c      	ldr	r4, [r5, #4]
 80088a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088a2:	07db      	lsls	r3, r3, #31
 80088a4:	d405      	bmi.n	80088b2 <_puts_r+0x36>
 80088a6:	89a3      	ldrh	r3, [r4, #12]
 80088a8:	0598      	lsls	r0, r3, #22
 80088aa:	d402      	bmi.n	80088b2 <_puts_r+0x36>
 80088ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088ae:	f000 fad3 	bl	8008e58 <__retarget_lock_acquire_recursive>
 80088b2:	89a3      	ldrh	r3, [r4, #12]
 80088b4:	0719      	lsls	r1, r3, #28
 80088b6:	d51d      	bpl.n	80088f4 <_puts_r+0x78>
 80088b8:	6923      	ldr	r3, [r4, #16]
 80088ba:	b1db      	cbz	r3, 80088f4 <_puts_r+0x78>
 80088bc:	3e01      	subs	r6, #1
 80088be:	68a3      	ldr	r3, [r4, #8]
 80088c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80088c4:	3b01      	subs	r3, #1
 80088c6:	60a3      	str	r3, [r4, #8]
 80088c8:	bb39      	cbnz	r1, 800891a <_puts_r+0x9e>
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	da38      	bge.n	8008940 <_puts_r+0xc4>
 80088ce:	4622      	mov	r2, r4
 80088d0:	210a      	movs	r1, #10
 80088d2:	4628      	mov	r0, r5
 80088d4:	f000 f848 	bl	8008968 <__swbuf_r>
 80088d8:	3001      	adds	r0, #1
 80088da:	d011      	beq.n	8008900 <_puts_r+0x84>
 80088dc:	250a      	movs	r5, #10
 80088de:	e011      	b.n	8008904 <_puts_r+0x88>
 80088e0:	4b1b      	ldr	r3, [pc, #108]	; (8008950 <_puts_r+0xd4>)
 80088e2:	429c      	cmp	r4, r3
 80088e4:	d101      	bne.n	80088ea <_puts_r+0x6e>
 80088e6:	68ac      	ldr	r4, [r5, #8]
 80088e8:	e7da      	b.n	80088a0 <_puts_r+0x24>
 80088ea:	4b1a      	ldr	r3, [pc, #104]	; (8008954 <_puts_r+0xd8>)
 80088ec:	429c      	cmp	r4, r3
 80088ee:	bf08      	it	eq
 80088f0:	68ec      	ldreq	r4, [r5, #12]
 80088f2:	e7d5      	b.n	80088a0 <_puts_r+0x24>
 80088f4:	4621      	mov	r1, r4
 80088f6:	4628      	mov	r0, r5
 80088f8:	f000 f888 	bl	8008a0c <__swsetup_r>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	d0dd      	beq.n	80088bc <_puts_r+0x40>
 8008900:	f04f 35ff 	mov.w	r5, #4294967295
 8008904:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008906:	07da      	lsls	r2, r3, #31
 8008908:	d405      	bmi.n	8008916 <_puts_r+0x9a>
 800890a:	89a3      	ldrh	r3, [r4, #12]
 800890c:	059b      	lsls	r3, r3, #22
 800890e:	d402      	bmi.n	8008916 <_puts_r+0x9a>
 8008910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008912:	f000 faa2 	bl	8008e5a <__retarget_lock_release_recursive>
 8008916:	4628      	mov	r0, r5
 8008918:	bd70      	pop	{r4, r5, r6, pc}
 800891a:	2b00      	cmp	r3, #0
 800891c:	da04      	bge.n	8008928 <_puts_r+0xac>
 800891e:	69a2      	ldr	r2, [r4, #24]
 8008920:	429a      	cmp	r2, r3
 8008922:	dc06      	bgt.n	8008932 <_puts_r+0xb6>
 8008924:	290a      	cmp	r1, #10
 8008926:	d004      	beq.n	8008932 <_puts_r+0xb6>
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	1c5a      	adds	r2, r3, #1
 800892c:	6022      	str	r2, [r4, #0]
 800892e:	7019      	strb	r1, [r3, #0]
 8008930:	e7c5      	b.n	80088be <_puts_r+0x42>
 8008932:	4622      	mov	r2, r4
 8008934:	4628      	mov	r0, r5
 8008936:	f000 f817 	bl	8008968 <__swbuf_r>
 800893a:	3001      	adds	r0, #1
 800893c:	d1bf      	bne.n	80088be <_puts_r+0x42>
 800893e:	e7df      	b.n	8008900 <_puts_r+0x84>
 8008940:	250a      	movs	r5, #10
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	1c5a      	adds	r2, r3, #1
 8008946:	6022      	str	r2, [r4, #0]
 8008948:	701d      	strb	r5, [r3, #0]
 800894a:	e7db      	b.n	8008904 <_puts_r+0x88>
 800894c:	0800ad20 	.word	0x0800ad20
 8008950:	0800ad40 	.word	0x0800ad40
 8008954:	0800ad00 	.word	0x0800ad00

08008958 <puts>:
 8008958:	4b02      	ldr	r3, [pc, #8]	; (8008964 <puts+0xc>)
 800895a:	4601      	mov	r1, r0
 800895c:	6818      	ldr	r0, [r3, #0]
 800895e:	f7ff bf8d 	b.w	800887c <_puts_r>
 8008962:	bf00      	nop
 8008964:	20000010 	.word	0x20000010

08008968 <__swbuf_r>:
 8008968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896a:	460e      	mov	r6, r1
 800896c:	4614      	mov	r4, r2
 800896e:	4605      	mov	r5, r0
 8008970:	b118      	cbz	r0, 800897a <__swbuf_r+0x12>
 8008972:	6983      	ldr	r3, [r0, #24]
 8008974:	b90b      	cbnz	r3, 800897a <__swbuf_r+0x12>
 8008976:	f000 f9d1 	bl	8008d1c <__sinit>
 800897a:	4b21      	ldr	r3, [pc, #132]	; (8008a00 <__swbuf_r+0x98>)
 800897c:	429c      	cmp	r4, r3
 800897e:	d12b      	bne.n	80089d8 <__swbuf_r+0x70>
 8008980:	686c      	ldr	r4, [r5, #4]
 8008982:	69a3      	ldr	r3, [r4, #24]
 8008984:	60a3      	str	r3, [r4, #8]
 8008986:	89a3      	ldrh	r3, [r4, #12]
 8008988:	071a      	lsls	r2, r3, #28
 800898a:	d52f      	bpl.n	80089ec <__swbuf_r+0x84>
 800898c:	6923      	ldr	r3, [r4, #16]
 800898e:	b36b      	cbz	r3, 80089ec <__swbuf_r+0x84>
 8008990:	6923      	ldr	r3, [r4, #16]
 8008992:	6820      	ldr	r0, [r4, #0]
 8008994:	b2f6      	uxtb	r6, r6
 8008996:	1ac0      	subs	r0, r0, r3
 8008998:	6963      	ldr	r3, [r4, #20]
 800899a:	4637      	mov	r7, r6
 800899c:	4283      	cmp	r3, r0
 800899e:	dc04      	bgt.n	80089aa <__swbuf_r+0x42>
 80089a0:	4621      	mov	r1, r4
 80089a2:	4628      	mov	r0, r5
 80089a4:	f000 f926 	bl	8008bf4 <_fflush_r>
 80089a8:	bb30      	cbnz	r0, 80089f8 <__swbuf_r+0x90>
 80089aa:	68a3      	ldr	r3, [r4, #8]
 80089ac:	3001      	adds	r0, #1
 80089ae:	3b01      	subs	r3, #1
 80089b0:	60a3      	str	r3, [r4, #8]
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	1c5a      	adds	r2, r3, #1
 80089b6:	6022      	str	r2, [r4, #0]
 80089b8:	701e      	strb	r6, [r3, #0]
 80089ba:	6963      	ldr	r3, [r4, #20]
 80089bc:	4283      	cmp	r3, r0
 80089be:	d004      	beq.n	80089ca <__swbuf_r+0x62>
 80089c0:	89a3      	ldrh	r3, [r4, #12]
 80089c2:	07db      	lsls	r3, r3, #31
 80089c4:	d506      	bpl.n	80089d4 <__swbuf_r+0x6c>
 80089c6:	2e0a      	cmp	r6, #10
 80089c8:	d104      	bne.n	80089d4 <__swbuf_r+0x6c>
 80089ca:	4621      	mov	r1, r4
 80089cc:	4628      	mov	r0, r5
 80089ce:	f000 f911 	bl	8008bf4 <_fflush_r>
 80089d2:	b988      	cbnz	r0, 80089f8 <__swbuf_r+0x90>
 80089d4:	4638      	mov	r0, r7
 80089d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089d8:	4b0a      	ldr	r3, [pc, #40]	; (8008a04 <__swbuf_r+0x9c>)
 80089da:	429c      	cmp	r4, r3
 80089dc:	d101      	bne.n	80089e2 <__swbuf_r+0x7a>
 80089de:	68ac      	ldr	r4, [r5, #8]
 80089e0:	e7cf      	b.n	8008982 <__swbuf_r+0x1a>
 80089e2:	4b09      	ldr	r3, [pc, #36]	; (8008a08 <__swbuf_r+0xa0>)
 80089e4:	429c      	cmp	r4, r3
 80089e6:	bf08      	it	eq
 80089e8:	68ec      	ldreq	r4, [r5, #12]
 80089ea:	e7ca      	b.n	8008982 <__swbuf_r+0x1a>
 80089ec:	4621      	mov	r1, r4
 80089ee:	4628      	mov	r0, r5
 80089f0:	f000 f80c 	bl	8008a0c <__swsetup_r>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d0cb      	beq.n	8008990 <__swbuf_r+0x28>
 80089f8:	f04f 37ff 	mov.w	r7, #4294967295
 80089fc:	e7ea      	b.n	80089d4 <__swbuf_r+0x6c>
 80089fe:	bf00      	nop
 8008a00:	0800ad20 	.word	0x0800ad20
 8008a04:	0800ad40 	.word	0x0800ad40
 8008a08:	0800ad00 	.word	0x0800ad00

08008a0c <__swsetup_r>:
 8008a0c:	4b32      	ldr	r3, [pc, #200]	; (8008ad8 <__swsetup_r+0xcc>)
 8008a0e:	b570      	push	{r4, r5, r6, lr}
 8008a10:	681d      	ldr	r5, [r3, #0]
 8008a12:	4606      	mov	r6, r0
 8008a14:	460c      	mov	r4, r1
 8008a16:	b125      	cbz	r5, 8008a22 <__swsetup_r+0x16>
 8008a18:	69ab      	ldr	r3, [r5, #24]
 8008a1a:	b913      	cbnz	r3, 8008a22 <__swsetup_r+0x16>
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	f000 f97d 	bl	8008d1c <__sinit>
 8008a22:	4b2e      	ldr	r3, [pc, #184]	; (8008adc <__swsetup_r+0xd0>)
 8008a24:	429c      	cmp	r4, r3
 8008a26:	d10f      	bne.n	8008a48 <__swsetup_r+0x3c>
 8008a28:	686c      	ldr	r4, [r5, #4]
 8008a2a:	89a3      	ldrh	r3, [r4, #12]
 8008a2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a30:	0719      	lsls	r1, r3, #28
 8008a32:	d42c      	bmi.n	8008a8e <__swsetup_r+0x82>
 8008a34:	06dd      	lsls	r5, r3, #27
 8008a36:	d411      	bmi.n	8008a5c <__swsetup_r+0x50>
 8008a38:	2309      	movs	r3, #9
 8008a3a:	6033      	str	r3, [r6, #0]
 8008a3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a40:	f04f 30ff 	mov.w	r0, #4294967295
 8008a44:	81a3      	strh	r3, [r4, #12]
 8008a46:	e03e      	b.n	8008ac6 <__swsetup_r+0xba>
 8008a48:	4b25      	ldr	r3, [pc, #148]	; (8008ae0 <__swsetup_r+0xd4>)
 8008a4a:	429c      	cmp	r4, r3
 8008a4c:	d101      	bne.n	8008a52 <__swsetup_r+0x46>
 8008a4e:	68ac      	ldr	r4, [r5, #8]
 8008a50:	e7eb      	b.n	8008a2a <__swsetup_r+0x1e>
 8008a52:	4b24      	ldr	r3, [pc, #144]	; (8008ae4 <__swsetup_r+0xd8>)
 8008a54:	429c      	cmp	r4, r3
 8008a56:	bf08      	it	eq
 8008a58:	68ec      	ldreq	r4, [r5, #12]
 8008a5a:	e7e6      	b.n	8008a2a <__swsetup_r+0x1e>
 8008a5c:	0758      	lsls	r0, r3, #29
 8008a5e:	d512      	bpl.n	8008a86 <__swsetup_r+0x7a>
 8008a60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a62:	b141      	cbz	r1, 8008a76 <__swsetup_r+0x6a>
 8008a64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a68:	4299      	cmp	r1, r3
 8008a6a:	d002      	beq.n	8008a72 <__swsetup_r+0x66>
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	f000 fa59 	bl	8008f24 <_free_r>
 8008a72:	2300      	movs	r3, #0
 8008a74:	6363      	str	r3, [r4, #52]	; 0x34
 8008a76:	89a3      	ldrh	r3, [r4, #12]
 8008a78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a7c:	81a3      	strh	r3, [r4, #12]
 8008a7e:	2300      	movs	r3, #0
 8008a80:	6063      	str	r3, [r4, #4]
 8008a82:	6923      	ldr	r3, [r4, #16]
 8008a84:	6023      	str	r3, [r4, #0]
 8008a86:	89a3      	ldrh	r3, [r4, #12]
 8008a88:	f043 0308 	orr.w	r3, r3, #8
 8008a8c:	81a3      	strh	r3, [r4, #12]
 8008a8e:	6923      	ldr	r3, [r4, #16]
 8008a90:	b94b      	cbnz	r3, 8008aa6 <__swsetup_r+0x9a>
 8008a92:	89a3      	ldrh	r3, [r4, #12]
 8008a94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a9c:	d003      	beq.n	8008aa6 <__swsetup_r+0x9a>
 8008a9e:	4621      	mov	r1, r4
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	f000 f9ff 	bl	8008ea4 <__smakebuf_r>
 8008aa6:	89a0      	ldrh	r0, [r4, #12]
 8008aa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008aac:	f010 0301 	ands.w	r3, r0, #1
 8008ab0:	d00a      	beq.n	8008ac8 <__swsetup_r+0xbc>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	60a3      	str	r3, [r4, #8]
 8008ab6:	6963      	ldr	r3, [r4, #20]
 8008ab8:	425b      	negs	r3, r3
 8008aba:	61a3      	str	r3, [r4, #24]
 8008abc:	6923      	ldr	r3, [r4, #16]
 8008abe:	b943      	cbnz	r3, 8008ad2 <__swsetup_r+0xc6>
 8008ac0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ac4:	d1ba      	bne.n	8008a3c <__swsetup_r+0x30>
 8008ac6:	bd70      	pop	{r4, r5, r6, pc}
 8008ac8:	0781      	lsls	r1, r0, #30
 8008aca:	bf58      	it	pl
 8008acc:	6963      	ldrpl	r3, [r4, #20]
 8008ace:	60a3      	str	r3, [r4, #8]
 8008ad0:	e7f4      	b.n	8008abc <__swsetup_r+0xb0>
 8008ad2:	2000      	movs	r0, #0
 8008ad4:	e7f7      	b.n	8008ac6 <__swsetup_r+0xba>
 8008ad6:	bf00      	nop
 8008ad8:	20000010 	.word	0x20000010
 8008adc:	0800ad20 	.word	0x0800ad20
 8008ae0:	0800ad40 	.word	0x0800ad40
 8008ae4:	0800ad00 	.word	0x0800ad00

08008ae8 <__sflush_r>:
 8008ae8:	898a      	ldrh	r2, [r1, #12]
 8008aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aee:	4605      	mov	r5, r0
 8008af0:	0710      	lsls	r0, r2, #28
 8008af2:	460c      	mov	r4, r1
 8008af4:	d458      	bmi.n	8008ba8 <__sflush_r+0xc0>
 8008af6:	684b      	ldr	r3, [r1, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	dc05      	bgt.n	8008b08 <__sflush_r+0x20>
 8008afc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	dc02      	bgt.n	8008b08 <__sflush_r+0x20>
 8008b02:	2000      	movs	r0, #0
 8008b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b0a:	2e00      	cmp	r6, #0
 8008b0c:	d0f9      	beq.n	8008b02 <__sflush_r+0x1a>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b14:	682f      	ldr	r7, [r5, #0]
 8008b16:	602b      	str	r3, [r5, #0]
 8008b18:	d032      	beq.n	8008b80 <__sflush_r+0x98>
 8008b1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b1c:	89a3      	ldrh	r3, [r4, #12]
 8008b1e:	075a      	lsls	r2, r3, #29
 8008b20:	d505      	bpl.n	8008b2e <__sflush_r+0x46>
 8008b22:	6863      	ldr	r3, [r4, #4]
 8008b24:	1ac0      	subs	r0, r0, r3
 8008b26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b28:	b10b      	cbz	r3, 8008b2e <__sflush_r+0x46>
 8008b2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b2c:	1ac0      	subs	r0, r0, r3
 8008b2e:	2300      	movs	r3, #0
 8008b30:	4602      	mov	r2, r0
 8008b32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b34:	4628      	mov	r0, r5
 8008b36:	6a21      	ldr	r1, [r4, #32]
 8008b38:	47b0      	blx	r6
 8008b3a:	1c43      	adds	r3, r0, #1
 8008b3c:	89a3      	ldrh	r3, [r4, #12]
 8008b3e:	d106      	bne.n	8008b4e <__sflush_r+0x66>
 8008b40:	6829      	ldr	r1, [r5, #0]
 8008b42:	291d      	cmp	r1, #29
 8008b44:	d82c      	bhi.n	8008ba0 <__sflush_r+0xb8>
 8008b46:	4a2a      	ldr	r2, [pc, #168]	; (8008bf0 <__sflush_r+0x108>)
 8008b48:	40ca      	lsrs	r2, r1
 8008b4a:	07d6      	lsls	r6, r2, #31
 8008b4c:	d528      	bpl.n	8008ba0 <__sflush_r+0xb8>
 8008b4e:	2200      	movs	r2, #0
 8008b50:	6062      	str	r2, [r4, #4]
 8008b52:	6922      	ldr	r2, [r4, #16]
 8008b54:	04d9      	lsls	r1, r3, #19
 8008b56:	6022      	str	r2, [r4, #0]
 8008b58:	d504      	bpl.n	8008b64 <__sflush_r+0x7c>
 8008b5a:	1c42      	adds	r2, r0, #1
 8008b5c:	d101      	bne.n	8008b62 <__sflush_r+0x7a>
 8008b5e:	682b      	ldr	r3, [r5, #0]
 8008b60:	b903      	cbnz	r3, 8008b64 <__sflush_r+0x7c>
 8008b62:	6560      	str	r0, [r4, #84]	; 0x54
 8008b64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b66:	602f      	str	r7, [r5, #0]
 8008b68:	2900      	cmp	r1, #0
 8008b6a:	d0ca      	beq.n	8008b02 <__sflush_r+0x1a>
 8008b6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b70:	4299      	cmp	r1, r3
 8008b72:	d002      	beq.n	8008b7a <__sflush_r+0x92>
 8008b74:	4628      	mov	r0, r5
 8008b76:	f000 f9d5 	bl	8008f24 <_free_r>
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	6360      	str	r0, [r4, #52]	; 0x34
 8008b7e:	e7c1      	b.n	8008b04 <__sflush_r+0x1c>
 8008b80:	6a21      	ldr	r1, [r4, #32]
 8008b82:	2301      	movs	r3, #1
 8008b84:	4628      	mov	r0, r5
 8008b86:	47b0      	blx	r6
 8008b88:	1c41      	adds	r1, r0, #1
 8008b8a:	d1c7      	bne.n	8008b1c <__sflush_r+0x34>
 8008b8c:	682b      	ldr	r3, [r5, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d0c4      	beq.n	8008b1c <__sflush_r+0x34>
 8008b92:	2b1d      	cmp	r3, #29
 8008b94:	d001      	beq.n	8008b9a <__sflush_r+0xb2>
 8008b96:	2b16      	cmp	r3, #22
 8008b98:	d101      	bne.n	8008b9e <__sflush_r+0xb6>
 8008b9a:	602f      	str	r7, [r5, #0]
 8008b9c:	e7b1      	b.n	8008b02 <__sflush_r+0x1a>
 8008b9e:	89a3      	ldrh	r3, [r4, #12]
 8008ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ba4:	81a3      	strh	r3, [r4, #12]
 8008ba6:	e7ad      	b.n	8008b04 <__sflush_r+0x1c>
 8008ba8:	690f      	ldr	r7, [r1, #16]
 8008baa:	2f00      	cmp	r7, #0
 8008bac:	d0a9      	beq.n	8008b02 <__sflush_r+0x1a>
 8008bae:	0793      	lsls	r3, r2, #30
 8008bb0:	bf18      	it	ne
 8008bb2:	2300      	movne	r3, #0
 8008bb4:	680e      	ldr	r6, [r1, #0]
 8008bb6:	bf08      	it	eq
 8008bb8:	694b      	ldreq	r3, [r1, #20]
 8008bba:	eba6 0807 	sub.w	r8, r6, r7
 8008bbe:	600f      	str	r7, [r1, #0]
 8008bc0:	608b      	str	r3, [r1, #8]
 8008bc2:	f1b8 0f00 	cmp.w	r8, #0
 8008bc6:	dd9c      	ble.n	8008b02 <__sflush_r+0x1a>
 8008bc8:	4643      	mov	r3, r8
 8008bca:	463a      	mov	r2, r7
 8008bcc:	4628      	mov	r0, r5
 8008bce:	6a21      	ldr	r1, [r4, #32]
 8008bd0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008bd2:	47b0      	blx	r6
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	dc06      	bgt.n	8008be6 <__sflush_r+0xfe>
 8008bd8:	89a3      	ldrh	r3, [r4, #12]
 8008bda:	f04f 30ff 	mov.w	r0, #4294967295
 8008bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008be2:	81a3      	strh	r3, [r4, #12]
 8008be4:	e78e      	b.n	8008b04 <__sflush_r+0x1c>
 8008be6:	4407      	add	r7, r0
 8008be8:	eba8 0800 	sub.w	r8, r8, r0
 8008bec:	e7e9      	b.n	8008bc2 <__sflush_r+0xda>
 8008bee:	bf00      	nop
 8008bf0:	20400001 	.word	0x20400001

08008bf4 <_fflush_r>:
 8008bf4:	b538      	push	{r3, r4, r5, lr}
 8008bf6:	690b      	ldr	r3, [r1, #16]
 8008bf8:	4605      	mov	r5, r0
 8008bfa:	460c      	mov	r4, r1
 8008bfc:	b913      	cbnz	r3, 8008c04 <_fflush_r+0x10>
 8008bfe:	2500      	movs	r5, #0
 8008c00:	4628      	mov	r0, r5
 8008c02:	bd38      	pop	{r3, r4, r5, pc}
 8008c04:	b118      	cbz	r0, 8008c0e <_fflush_r+0x1a>
 8008c06:	6983      	ldr	r3, [r0, #24]
 8008c08:	b90b      	cbnz	r3, 8008c0e <_fflush_r+0x1a>
 8008c0a:	f000 f887 	bl	8008d1c <__sinit>
 8008c0e:	4b14      	ldr	r3, [pc, #80]	; (8008c60 <_fflush_r+0x6c>)
 8008c10:	429c      	cmp	r4, r3
 8008c12:	d11b      	bne.n	8008c4c <_fflush_r+0x58>
 8008c14:	686c      	ldr	r4, [r5, #4]
 8008c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d0ef      	beq.n	8008bfe <_fflush_r+0xa>
 8008c1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c20:	07d0      	lsls	r0, r2, #31
 8008c22:	d404      	bmi.n	8008c2e <_fflush_r+0x3a>
 8008c24:	0599      	lsls	r1, r3, #22
 8008c26:	d402      	bmi.n	8008c2e <_fflush_r+0x3a>
 8008c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c2a:	f000 f915 	bl	8008e58 <__retarget_lock_acquire_recursive>
 8008c2e:	4628      	mov	r0, r5
 8008c30:	4621      	mov	r1, r4
 8008c32:	f7ff ff59 	bl	8008ae8 <__sflush_r>
 8008c36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c38:	4605      	mov	r5, r0
 8008c3a:	07da      	lsls	r2, r3, #31
 8008c3c:	d4e0      	bmi.n	8008c00 <_fflush_r+0xc>
 8008c3e:	89a3      	ldrh	r3, [r4, #12]
 8008c40:	059b      	lsls	r3, r3, #22
 8008c42:	d4dd      	bmi.n	8008c00 <_fflush_r+0xc>
 8008c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c46:	f000 f908 	bl	8008e5a <__retarget_lock_release_recursive>
 8008c4a:	e7d9      	b.n	8008c00 <_fflush_r+0xc>
 8008c4c:	4b05      	ldr	r3, [pc, #20]	; (8008c64 <_fflush_r+0x70>)
 8008c4e:	429c      	cmp	r4, r3
 8008c50:	d101      	bne.n	8008c56 <_fflush_r+0x62>
 8008c52:	68ac      	ldr	r4, [r5, #8]
 8008c54:	e7df      	b.n	8008c16 <_fflush_r+0x22>
 8008c56:	4b04      	ldr	r3, [pc, #16]	; (8008c68 <_fflush_r+0x74>)
 8008c58:	429c      	cmp	r4, r3
 8008c5a:	bf08      	it	eq
 8008c5c:	68ec      	ldreq	r4, [r5, #12]
 8008c5e:	e7da      	b.n	8008c16 <_fflush_r+0x22>
 8008c60:	0800ad20 	.word	0x0800ad20
 8008c64:	0800ad40 	.word	0x0800ad40
 8008c68:	0800ad00 	.word	0x0800ad00

08008c6c <std>:
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	b510      	push	{r4, lr}
 8008c70:	4604      	mov	r4, r0
 8008c72:	e9c0 3300 	strd	r3, r3, [r0]
 8008c76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c7a:	6083      	str	r3, [r0, #8]
 8008c7c:	8181      	strh	r1, [r0, #12]
 8008c7e:	6643      	str	r3, [r0, #100]	; 0x64
 8008c80:	81c2      	strh	r2, [r0, #14]
 8008c82:	6183      	str	r3, [r0, #24]
 8008c84:	4619      	mov	r1, r3
 8008c86:	2208      	movs	r2, #8
 8008c88:	305c      	adds	r0, #92	; 0x5c
 8008c8a:	f7ff fdd7 	bl	800883c <memset>
 8008c8e:	4b05      	ldr	r3, [pc, #20]	; (8008ca4 <std+0x38>)
 8008c90:	6224      	str	r4, [r4, #32]
 8008c92:	6263      	str	r3, [r4, #36]	; 0x24
 8008c94:	4b04      	ldr	r3, [pc, #16]	; (8008ca8 <std+0x3c>)
 8008c96:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c98:	4b04      	ldr	r3, [pc, #16]	; (8008cac <std+0x40>)
 8008c9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c9c:	4b04      	ldr	r3, [pc, #16]	; (8008cb0 <std+0x44>)
 8008c9e:	6323      	str	r3, [r4, #48]	; 0x30
 8008ca0:	bd10      	pop	{r4, pc}
 8008ca2:	bf00      	nop
 8008ca4:	0800966d 	.word	0x0800966d
 8008ca8:	0800968f 	.word	0x0800968f
 8008cac:	080096c7 	.word	0x080096c7
 8008cb0:	080096eb 	.word	0x080096eb

08008cb4 <_cleanup_r>:
 8008cb4:	4901      	ldr	r1, [pc, #4]	; (8008cbc <_cleanup_r+0x8>)
 8008cb6:	f000 b8af 	b.w	8008e18 <_fwalk_reent>
 8008cba:	bf00      	nop
 8008cbc:	08008bf5 	.word	0x08008bf5

08008cc0 <__sfmoreglue>:
 8008cc0:	b570      	push	{r4, r5, r6, lr}
 8008cc2:	2568      	movs	r5, #104	; 0x68
 8008cc4:	1e4a      	subs	r2, r1, #1
 8008cc6:	4355      	muls	r5, r2
 8008cc8:	460e      	mov	r6, r1
 8008cca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008cce:	f000 f975 	bl	8008fbc <_malloc_r>
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	b140      	cbz	r0, 8008ce8 <__sfmoreglue+0x28>
 8008cd6:	2100      	movs	r1, #0
 8008cd8:	e9c0 1600 	strd	r1, r6, [r0]
 8008cdc:	300c      	adds	r0, #12
 8008cde:	60a0      	str	r0, [r4, #8]
 8008ce0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ce4:	f7ff fdaa 	bl	800883c <memset>
 8008ce8:	4620      	mov	r0, r4
 8008cea:	bd70      	pop	{r4, r5, r6, pc}

08008cec <__sfp_lock_acquire>:
 8008cec:	4801      	ldr	r0, [pc, #4]	; (8008cf4 <__sfp_lock_acquire+0x8>)
 8008cee:	f000 b8b3 	b.w	8008e58 <__retarget_lock_acquire_recursive>
 8008cf2:	bf00      	nop
 8008cf4:	20001c3c 	.word	0x20001c3c

08008cf8 <__sfp_lock_release>:
 8008cf8:	4801      	ldr	r0, [pc, #4]	; (8008d00 <__sfp_lock_release+0x8>)
 8008cfa:	f000 b8ae 	b.w	8008e5a <__retarget_lock_release_recursive>
 8008cfe:	bf00      	nop
 8008d00:	20001c3c 	.word	0x20001c3c

08008d04 <__sinit_lock_acquire>:
 8008d04:	4801      	ldr	r0, [pc, #4]	; (8008d0c <__sinit_lock_acquire+0x8>)
 8008d06:	f000 b8a7 	b.w	8008e58 <__retarget_lock_acquire_recursive>
 8008d0a:	bf00      	nop
 8008d0c:	20001c37 	.word	0x20001c37

08008d10 <__sinit_lock_release>:
 8008d10:	4801      	ldr	r0, [pc, #4]	; (8008d18 <__sinit_lock_release+0x8>)
 8008d12:	f000 b8a2 	b.w	8008e5a <__retarget_lock_release_recursive>
 8008d16:	bf00      	nop
 8008d18:	20001c37 	.word	0x20001c37

08008d1c <__sinit>:
 8008d1c:	b510      	push	{r4, lr}
 8008d1e:	4604      	mov	r4, r0
 8008d20:	f7ff fff0 	bl	8008d04 <__sinit_lock_acquire>
 8008d24:	69a3      	ldr	r3, [r4, #24]
 8008d26:	b11b      	cbz	r3, 8008d30 <__sinit+0x14>
 8008d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d2c:	f7ff bff0 	b.w	8008d10 <__sinit_lock_release>
 8008d30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d34:	6523      	str	r3, [r4, #80]	; 0x50
 8008d36:	4b13      	ldr	r3, [pc, #76]	; (8008d84 <__sinit+0x68>)
 8008d38:	4a13      	ldr	r2, [pc, #76]	; (8008d88 <__sinit+0x6c>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d3e:	42a3      	cmp	r3, r4
 8008d40:	bf08      	it	eq
 8008d42:	2301      	moveq	r3, #1
 8008d44:	4620      	mov	r0, r4
 8008d46:	bf08      	it	eq
 8008d48:	61a3      	streq	r3, [r4, #24]
 8008d4a:	f000 f81f 	bl	8008d8c <__sfp>
 8008d4e:	6060      	str	r0, [r4, #4]
 8008d50:	4620      	mov	r0, r4
 8008d52:	f000 f81b 	bl	8008d8c <__sfp>
 8008d56:	60a0      	str	r0, [r4, #8]
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f000 f817 	bl	8008d8c <__sfp>
 8008d5e:	2200      	movs	r2, #0
 8008d60:	2104      	movs	r1, #4
 8008d62:	60e0      	str	r0, [r4, #12]
 8008d64:	6860      	ldr	r0, [r4, #4]
 8008d66:	f7ff ff81 	bl	8008c6c <std>
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	2109      	movs	r1, #9
 8008d6e:	68a0      	ldr	r0, [r4, #8]
 8008d70:	f7ff ff7c 	bl	8008c6c <std>
 8008d74:	2202      	movs	r2, #2
 8008d76:	2112      	movs	r1, #18
 8008d78:	68e0      	ldr	r0, [r4, #12]
 8008d7a:	f7ff ff77 	bl	8008c6c <std>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	61a3      	str	r3, [r4, #24]
 8008d82:	e7d1      	b.n	8008d28 <__sinit+0xc>
 8008d84:	0800acfc 	.word	0x0800acfc
 8008d88:	08008cb5 	.word	0x08008cb5

08008d8c <__sfp>:
 8008d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d8e:	4607      	mov	r7, r0
 8008d90:	f7ff ffac 	bl	8008cec <__sfp_lock_acquire>
 8008d94:	4b1e      	ldr	r3, [pc, #120]	; (8008e10 <__sfp+0x84>)
 8008d96:	681e      	ldr	r6, [r3, #0]
 8008d98:	69b3      	ldr	r3, [r6, #24]
 8008d9a:	b913      	cbnz	r3, 8008da2 <__sfp+0x16>
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	f7ff ffbd 	bl	8008d1c <__sinit>
 8008da2:	3648      	adds	r6, #72	; 0x48
 8008da4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008da8:	3b01      	subs	r3, #1
 8008daa:	d503      	bpl.n	8008db4 <__sfp+0x28>
 8008dac:	6833      	ldr	r3, [r6, #0]
 8008dae:	b30b      	cbz	r3, 8008df4 <__sfp+0x68>
 8008db0:	6836      	ldr	r6, [r6, #0]
 8008db2:	e7f7      	b.n	8008da4 <__sfp+0x18>
 8008db4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008db8:	b9d5      	cbnz	r5, 8008df0 <__sfp+0x64>
 8008dba:	4b16      	ldr	r3, [pc, #88]	; (8008e14 <__sfp+0x88>)
 8008dbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008dc0:	60e3      	str	r3, [r4, #12]
 8008dc2:	6665      	str	r5, [r4, #100]	; 0x64
 8008dc4:	f000 f847 	bl	8008e56 <__retarget_lock_init_recursive>
 8008dc8:	f7ff ff96 	bl	8008cf8 <__sfp_lock_release>
 8008dcc:	2208      	movs	r2, #8
 8008dce:	4629      	mov	r1, r5
 8008dd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008dd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008dd8:	6025      	str	r5, [r4, #0]
 8008dda:	61a5      	str	r5, [r4, #24]
 8008ddc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008de0:	f7ff fd2c 	bl	800883c <memset>
 8008de4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008de8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008dec:	4620      	mov	r0, r4
 8008dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008df0:	3468      	adds	r4, #104	; 0x68
 8008df2:	e7d9      	b.n	8008da8 <__sfp+0x1c>
 8008df4:	2104      	movs	r1, #4
 8008df6:	4638      	mov	r0, r7
 8008df8:	f7ff ff62 	bl	8008cc0 <__sfmoreglue>
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	6030      	str	r0, [r6, #0]
 8008e00:	2800      	cmp	r0, #0
 8008e02:	d1d5      	bne.n	8008db0 <__sfp+0x24>
 8008e04:	f7ff ff78 	bl	8008cf8 <__sfp_lock_release>
 8008e08:	230c      	movs	r3, #12
 8008e0a:	603b      	str	r3, [r7, #0]
 8008e0c:	e7ee      	b.n	8008dec <__sfp+0x60>
 8008e0e:	bf00      	nop
 8008e10:	0800acfc 	.word	0x0800acfc
 8008e14:	ffff0001 	.word	0xffff0001

08008e18 <_fwalk_reent>:
 8008e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e1c:	4606      	mov	r6, r0
 8008e1e:	4688      	mov	r8, r1
 8008e20:	2700      	movs	r7, #0
 8008e22:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e2a:	f1b9 0901 	subs.w	r9, r9, #1
 8008e2e:	d505      	bpl.n	8008e3c <_fwalk_reent+0x24>
 8008e30:	6824      	ldr	r4, [r4, #0]
 8008e32:	2c00      	cmp	r4, #0
 8008e34:	d1f7      	bne.n	8008e26 <_fwalk_reent+0xe>
 8008e36:	4638      	mov	r0, r7
 8008e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e3c:	89ab      	ldrh	r3, [r5, #12]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d907      	bls.n	8008e52 <_fwalk_reent+0x3a>
 8008e42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e46:	3301      	adds	r3, #1
 8008e48:	d003      	beq.n	8008e52 <_fwalk_reent+0x3a>
 8008e4a:	4629      	mov	r1, r5
 8008e4c:	4630      	mov	r0, r6
 8008e4e:	47c0      	blx	r8
 8008e50:	4307      	orrs	r7, r0
 8008e52:	3568      	adds	r5, #104	; 0x68
 8008e54:	e7e9      	b.n	8008e2a <_fwalk_reent+0x12>

08008e56 <__retarget_lock_init_recursive>:
 8008e56:	4770      	bx	lr

08008e58 <__retarget_lock_acquire_recursive>:
 8008e58:	4770      	bx	lr

08008e5a <__retarget_lock_release_recursive>:
 8008e5a:	4770      	bx	lr

08008e5c <__swhatbuf_r>:
 8008e5c:	b570      	push	{r4, r5, r6, lr}
 8008e5e:	460e      	mov	r6, r1
 8008e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e64:	4614      	mov	r4, r2
 8008e66:	2900      	cmp	r1, #0
 8008e68:	461d      	mov	r5, r3
 8008e6a:	b096      	sub	sp, #88	; 0x58
 8008e6c:	da07      	bge.n	8008e7e <__swhatbuf_r+0x22>
 8008e6e:	2300      	movs	r3, #0
 8008e70:	602b      	str	r3, [r5, #0]
 8008e72:	89b3      	ldrh	r3, [r6, #12]
 8008e74:	061a      	lsls	r2, r3, #24
 8008e76:	d410      	bmi.n	8008e9a <__swhatbuf_r+0x3e>
 8008e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e7c:	e00e      	b.n	8008e9c <__swhatbuf_r+0x40>
 8008e7e:	466a      	mov	r2, sp
 8008e80:	f000 fc5a 	bl	8009738 <_fstat_r>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	dbf2      	blt.n	8008e6e <__swhatbuf_r+0x12>
 8008e88:	9a01      	ldr	r2, [sp, #4]
 8008e8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e8e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e92:	425a      	negs	r2, r3
 8008e94:	415a      	adcs	r2, r3
 8008e96:	602a      	str	r2, [r5, #0]
 8008e98:	e7ee      	b.n	8008e78 <__swhatbuf_r+0x1c>
 8008e9a:	2340      	movs	r3, #64	; 0x40
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	6023      	str	r3, [r4, #0]
 8008ea0:	b016      	add	sp, #88	; 0x58
 8008ea2:	bd70      	pop	{r4, r5, r6, pc}

08008ea4 <__smakebuf_r>:
 8008ea4:	898b      	ldrh	r3, [r1, #12]
 8008ea6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ea8:	079d      	lsls	r5, r3, #30
 8008eaa:	4606      	mov	r6, r0
 8008eac:	460c      	mov	r4, r1
 8008eae:	d507      	bpl.n	8008ec0 <__smakebuf_r+0x1c>
 8008eb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008eb4:	6023      	str	r3, [r4, #0]
 8008eb6:	6123      	str	r3, [r4, #16]
 8008eb8:	2301      	movs	r3, #1
 8008eba:	6163      	str	r3, [r4, #20]
 8008ebc:	b002      	add	sp, #8
 8008ebe:	bd70      	pop	{r4, r5, r6, pc}
 8008ec0:	466a      	mov	r2, sp
 8008ec2:	ab01      	add	r3, sp, #4
 8008ec4:	f7ff ffca 	bl	8008e5c <__swhatbuf_r>
 8008ec8:	9900      	ldr	r1, [sp, #0]
 8008eca:	4605      	mov	r5, r0
 8008ecc:	4630      	mov	r0, r6
 8008ece:	f000 f875 	bl	8008fbc <_malloc_r>
 8008ed2:	b948      	cbnz	r0, 8008ee8 <__smakebuf_r+0x44>
 8008ed4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ed8:	059a      	lsls	r2, r3, #22
 8008eda:	d4ef      	bmi.n	8008ebc <__smakebuf_r+0x18>
 8008edc:	f023 0303 	bic.w	r3, r3, #3
 8008ee0:	f043 0302 	orr.w	r3, r3, #2
 8008ee4:	81a3      	strh	r3, [r4, #12]
 8008ee6:	e7e3      	b.n	8008eb0 <__smakebuf_r+0xc>
 8008ee8:	4b0d      	ldr	r3, [pc, #52]	; (8008f20 <__smakebuf_r+0x7c>)
 8008eea:	62b3      	str	r3, [r6, #40]	; 0x28
 8008eec:	89a3      	ldrh	r3, [r4, #12]
 8008eee:	6020      	str	r0, [r4, #0]
 8008ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ef4:	81a3      	strh	r3, [r4, #12]
 8008ef6:	9b00      	ldr	r3, [sp, #0]
 8008ef8:	6120      	str	r0, [r4, #16]
 8008efa:	6163      	str	r3, [r4, #20]
 8008efc:	9b01      	ldr	r3, [sp, #4]
 8008efe:	b15b      	cbz	r3, 8008f18 <__smakebuf_r+0x74>
 8008f00:	4630      	mov	r0, r6
 8008f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f06:	f000 fc29 	bl	800975c <_isatty_r>
 8008f0a:	b128      	cbz	r0, 8008f18 <__smakebuf_r+0x74>
 8008f0c:	89a3      	ldrh	r3, [r4, #12]
 8008f0e:	f023 0303 	bic.w	r3, r3, #3
 8008f12:	f043 0301 	orr.w	r3, r3, #1
 8008f16:	81a3      	strh	r3, [r4, #12]
 8008f18:	89a0      	ldrh	r0, [r4, #12]
 8008f1a:	4305      	orrs	r5, r0
 8008f1c:	81a5      	strh	r5, [r4, #12]
 8008f1e:	e7cd      	b.n	8008ebc <__smakebuf_r+0x18>
 8008f20:	08008cb5 	.word	0x08008cb5

08008f24 <_free_r>:
 8008f24:	b538      	push	{r3, r4, r5, lr}
 8008f26:	4605      	mov	r5, r0
 8008f28:	2900      	cmp	r1, #0
 8008f2a:	d043      	beq.n	8008fb4 <_free_r+0x90>
 8008f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f30:	1f0c      	subs	r4, r1, #4
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	bfb8      	it	lt
 8008f36:	18e4      	addlt	r4, r4, r3
 8008f38:	f000 fc40 	bl	80097bc <__malloc_lock>
 8008f3c:	4a1e      	ldr	r2, [pc, #120]	; (8008fb8 <_free_r+0x94>)
 8008f3e:	6813      	ldr	r3, [r2, #0]
 8008f40:	4610      	mov	r0, r2
 8008f42:	b933      	cbnz	r3, 8008f52 <_free_r+0x2e>
 8008f44:	6063      	str	r3, [r4, #4]
 8008f46:	6014      	str	r4, [r2, #0]
 8008f48:	4628      	mov	r0, r5
 8008f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f4e:	f000 bc3b 	b.w	80097c8 <__malloc_unlock>
 8008f52:	42a3      	cmp	r3, r4
 8008f54:	d90a      	bls.n	8008f6c <_free_r+0x48>
 8008f56:	6821      	ldr	r1, [r4, #0]
 8008f58:	1862      	adds	r2, r4, r1
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	bf01      	itttt	eq
 8008f5e:	681a      	ldreq	r2, [r3, #0]
 8008f60:	685b      	ldreq	r3, [r3, #4]
 8008f62:	1852      	addeq	r2, r2, r1
 8008f64:	6022      	streq	r2, [r4, #0]
 8008f66:	6063      	str	r3, [r4, #4]
 8008f68:	6004      	str	r4, [r0, #0]
 8008f6a:	e7ed      	b.n	8008f48 <_free_r+0x24>
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	b10b      	cbz	r3, 8008f76 <_free_r+0x52>
 8008f72:	42a3      	cmp	r3, r4
 8008f74:	d9fa      	bls.n	8008f6c <_free_r+0x48>
 8008f76:	6811      	ldr	r1, [r2, #0]
 8008f78:	1850      	adds	r0, r2, r1
 8008f7a:	42a0      	cmp	r0, r4
 8008f7c:	d10b      	bne.n	8008f96 <_free_r+0x72>
 8008f7e:	6820      	ldr	r0, [r4, #0]
 8008f80:	4401      	add	r1, r0
 8008f82:	1850      	adds	r0, r2, r1
 8008f84:	4283      	cmp	r3, r0
 8008f86:	6011      	str	r1, [r2, #0]
 8008f88:	d1de      	bne.n	8008f48 <_free_r+0x24>
 8008f8a:	6818      	ldr	r0, [r3, #0]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	4401      	add	r1, r0
 8008f90:	6011      	str	r1, [r2, #0]
 8008f92:	6053      	str	r3, [r2, #4]
 8008f94:	e7d8      	b.n	8008f48 <_free_r+0x24>
 8008f96:	d902      	bls.n	8008f9e <_free_r+0x7a>
 8008f98:	230c      	movs	r3, #12
 8008f9a:	602b      	str	r3, [r5, #0]
 8008f9c:	e7d4      	b.n	8008f48 <_free_r+0x24>
 8008f9e:	6820      	ldr	r0, [r4, #0]
 8008fa0:	1821      	adds	r1, r4, r0
 8008fa2:	428b      	cmp	r3, r1
 8008fa4:	bf01      	itttt	eq
 8008fa6:	6819      	ldreq	r1, [r3, #0]
 8008fa8:	685b      	ldreq	r3, [r3, #4]
 8008faa:	1809      	addeq	r1, r1, r0
 8008fac:	6021      	streq	r1, [r4, #0]
 8008fae:	6063      	str	r3, [r4, #4]
 8008fb0:	6054      	str	r4, [r2, #4]
 8008fb2:	e7c9      	b.n	8008f48 <_free_r+0x24>
 8008fb4:	bd38      	pop	{r3, r4, r5, pc}
 8008fb6:	bf00      	nop
 8008fb8:	200019bc 	.word	0x200019bc

08008fbc <_malloc_r>:
 8008fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fbe:	1ccd      	adds	r5, r1, #3
 8008fc0:	f025 0503 	bic.w	r5, r5, #3
 8008fc4:	3508      	adds	r5, #8
 8008fc6:	2d0c      	cmp	r5, #12
 8008fc8:	bf38      	it	cc
 8008fca:	250c      	movcc	r5, #12
 8008fcc:	2d00      	cmp	r5, #0
 8008fce:	4606      	mov	r6, r0
 8008fd0:	db01      	blt.n	8008fd6 <_malloc_r+0x1a>
 8008fd2:	42a9      	cmp	r1, r5
 8008fd4:	d903      	bls.n	8008fde <_malloc_r+0x22>
 8008fd6:	230c      	movs	r3, #12
 8008fd8:	6033      	str	r3, [r6, #0]
 8008fda:	2000      	movs	r0, #0
 8008fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fde:	f000 fbed 	bl	80097bc <__malloc_lock>
 8008fe2:	4921      	ldr	r1, [pc, #132]	; (8009068 <_malloc_r+0xac>)
 8008fe4:	680a      	ldr	r2, [r1, #0]
 8008fe6:	4614      	mov	r4, r2
 8008fe8:	b99c      	cbnz	r4, 8009012 <_malloc_r+0x56>
 8008fea:	4f20      	ldr	r7, [pc, #128]	; (800906c <_malloc_r+0xb0>)
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	b923      	cbnz	r3, 8008ffa <_malloc_r+0x3e>
 8008ff0:	4621      	mov	r1, r4
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f000 fb2a 	bl	800964c <_sbrk_r>
 8008ff8:	6038      	str	r0, [r7, #0]
 8008ffa:	4629      	mov	r1, r5
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	f000 fb25 	bl	800964c <_sbrk_r>
 8009002:	1c43      	adds	r3, r0, #1
 8009004:	d123      	bne.n	800904e <_malloc_r+0x92>
 8009006:	230c      	movs	r3, #12
 8009008:	4630      	mov	r0, r6
 800900a:	6033      	str	r3, [r6, #0]
 800900c:	f000 fbdc 	bl	80097c8 <__malloc_unlock>
 8009010:	e7e3      	b.n	8008fda <_malloc_r+0x1e>
 8009012:	6823      	ldr	r3, [r4, #0]
 8009014:	1b5b      	subs	r3, r3, r5
 8009016:	d417      	bmi.n	8009048 <_malloc_r+0x8c>
 8009018:	2b0b      	cmp	r3, #11
 800901a:	d903      	bls.n	8009024 <_malloc_r+0x68>
 800901c:	6023      	str	r3, [r4, #0]
 800901e:	441c      	add	r4, r3
 8009020:	6025      	str	r5, [r4, #0]
 8009022:	e004      	b.n	800902e <_malloc_r+0x72>
 8009024:	6863      	ldr	r3, [r4, #4]
 8009026:	42a2      	cmp	r2, r4
 8009028:	bf0c      	ite	eq
 800902a:	600b      	streq	r3, [r1, #0]
 800902c:	6053      	strne	r3, [r2, #4]
 800902e:	4630      	mov	r0, r6
 8009030:	f000 fbca 	bl	80097c8 <__malloc_unlock>
 8009034:	f104 000b 	add.w	r0, r4, #11
 8009038:	1d23      	adds	r3, r4, #4
 800903a:	f020 0007 	bic.w	r0, r0, #7
 800903e:	1ac2      	subs	r2, r0, r3
 8009040:	d0cc      	beq.n	8008fdc <_malloc_r+0x20>
 8009042:	1a1b      	subs	r3, r3, r0
 8009044:	50a3      	str	r3, [r4, r2]
 8009046:	e7c9      	b.n	8008fdc <_malloc_r+0x20>
 8009048:	4622      	mov	r2, r4
 800904a:	6864      	ldr	r4, [r4, #4]
 800904c:	e7cc      	b.n	8008fe8 <_malloc_r+0x2c>
 800904e:	1cc4      	adds	r4, r0, #3
 8009050:	f024 0403 	bic.w	r4, r4, #3
 8009054:	42a0      	cmp	r0, r4
 8009056:	d0e3      	beq.n	8009020 <_malloc_r+0x64>
 8009058:	1a21      	subs	r1, r4, r0
 800905a:	4630      	mov	r0, r6
 800905c:	f000 faf6 	bl	800964c <_sbrk_r>
 8009060:	3001      	adds	r0, #1
 8009062:	d1dd      	bne.n	8009020 <_malloc_r+0x64>
 8009064:	e7cf      	b.n	8009006 <_malloc_r+0x4a>
 8009066:	bf00      	nop
 8009068:	200019bc 	.word	0x200019bc
 800906c:	200019c0 	.word	0x200019c0

08009070 <__sfputc_r>:
 8009070:	6893      	ldr	r3, [r2, #8]
 8009072:	b410      	push	{r4}
 8009074:	3b01      	subs	r3, #1
 8009076:	2b00      	cmp	r3, #0
 8009078:	6093      	str	r3, [r2, #8]
 800907a:	da07      	bge.n	800908c <__sfputc_r+0x1c>
 800907c:	6994      	ldr	r4, [r2, #24]
 800907e:	42a3      	cmp	r3, r4
 8009080:	db01      	blt.n	8009086 <__sfputc_r+0x16>
 8009082:	290a      	cmp	r1, #10
 8009084:	d102      	bne.n	800908c <__sfputc_r+0x1c>
 8009086:	bc10      	pop	{r4}
 8009088:	f7ff bc6e 	b.w	8008968 <__swbuf_r>
 800908c:	6813      	ldr	r3, [r2, #0]
 800908e:	1c58      	adds	r0, r3, #1
 8009090:	6010      	str	r0, [r2, #0]
 8009092:	7019      	strb	r1, [r3, #0]
 8009094:	4608      	mov	r0, r1
 8009096:	bc10      	pop	{r4}
 8009098:	4770      	bx	lr

0800909a <__sfputs_r>:
 800909a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909c:	4606      	mov	r6, r0
 800909e:	460f      	mov	r7, r1
 80090a0:	4614      	mov	r4, r2
 80090a2:	18d5      	adds	r5, r2, r3
 80090a4:	42ac      	cmp	r4, r5
 80090a6:	d101      	bne.n	80090ac <__sfputs_r+0x12>
 80090a8:	2000      	movs	r0, #0
 80090aa:	e007      	b.n	80090bc <__sfputs_r+0x22>
 80090ac:	463a      	mov	r2, r7
 80090ae:	4630      	mov	r0, r6
 80090b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090b4:	f7ff ffdc 	bl	8009070 <__sfputc_r>
 80090b8:	1c43      	adds	r3, r0, #1
 80090ba:	d1f3      	bne.n	80090a4 <__sfputs_r+0xa>
 80090bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080090c0 <_vfiprintf_r>:
 80090c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c4:	460d      	mov	r5, r1
 80090c6:	4614      	mov	r4, r2
 80090c8:	4698      	mov	r8, r3
 80090ca:	4606      	mov	r6, r0
 80090cc:	b09d      	sub	sp, #116	; 0x74
 80090ce:	b118      	cbz	r0, 80090d8 <_vfiprintf_r+0x18>
 80090d0:	6983      	ldr	r3, [r0, #24]
 80090d2:	b90b      	cbnz	r3, 80090d8 <_vfiprintf_r+0x18>
 80090d4:	f7ff fe22 	bl	8008d1c <__sinit>
 80090d8:	4b89      	ldr	r3, [pc, #548]	; (8009300 <_vfiprintf_r+0x240>)
 80090da:	429d      	cmp	r5, r3
 80090dc:	d11b      	bne.n	8009116 <_vfiprintf_r+0x56>
 80090de:	6875      	ldr	r5, [r6, #4]
 80090e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090e2:	07d9      	lsls	r1, r3, #31
 80090e4:	d405      	bmi.n	80090f2 <_vfiprintf_r+0x32>
 80090e6:	89ab      	ldrh	r3, [r5, #12]
 80090e8:	059a      	lsls	r2, r3, #22
 80090ea:	d402      	bmi.n	80090f2 <_vfiprintf_r+0x32>
 80090ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090ee:	f7ff feb3 	bl	8008e58 <__retarget_lock_acquire_recursive>
 80090f2:	89ab      	ldrh	r3, [r5, #12]
 80090f4:	071b      	lsls	r3, r3, #28
 80090f6:	d501      	bpl.n	80090fc <_vfiprintf_r+0x3c>
 80090f8:	692b      	ldr	r3, [r5, #16]
 80090fa:	b9eb      	cbnz	r3, 8009138 <_vfiprintf_r+0x78>
 80090fc:	4629      	mov	r1, r5
 80090fe:	4630      	mov	r0, r6
 8009100:	f7ff fc84 	bl	8008a0c <__swsetup_r>
 8009104:	b1c0      	cbz	r0, 8009138 <_vfiprintf_r+0x78>
 8009106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009108:	07dc      	lsls	r4, r3, #31
 800910a:	d50e      	bpl.n	800912a <_vfiprintf_r+0x6a>
 800910c:	f04f 30ff 	mov.w	r0, #4294967295
 8009110:	b01d      	add	sp, #116	; 0x74
 8009112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009116:	4b7b      	ldr	r3, [pc, #492]	; (8009304 <_vfiprintf_r+0x244>)
 8009118:	429d      	cmp	r5, r3
 800911a:	d101      	bne.n	8009120 <_vfiprintf_r+0x60>
 800911c:	68b5      	ldr	r5, [r6, #8]
 800911e:	e7df      	b.n	80090e0 <_vfiprintf_r+0x20>
 8009120:	4b79      	ldr	r3, [pc, #484]	; (8009308 <_vfiprintf_r+0x248>)
 8009122:	429d      	cmp	r5, r3
 8009124:	bf08      	it	eq
 8009126:	68f5      	ldreq	r5, [r6, #12]
 8009128:	e7da      	b.n	80090e0 <_vfiprintf_r+0x20>
 800912a:	89ab      	ldrh	r3, [r5, #12]
 800912c:	0598      	lsls	r0, r3, #22
 800912e:	d4ed      	bmi.n	800910c <_vfiprintf_r+0x4c>
 8009130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009132:	f7ff fe92 	bl	8008e5a <__retarget_lock_release_recursive>
 8009136:	e7e9      	b.n	800910c <_vfiprintf_r+0x4c>
 8009138:	2300      	movs	r3, #0
 800913a:	9309      	str	r3, [sp, #36]	; 0x24
 800913c:	2320      	movs	r3, #32
 800913e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009142:	2330      	movs	r3, #48	; 0x30
 8009144:	f04f 0901 	mov.w	r9, #1
 8009148:	f8cd 800c 	str.w	r8, [sp, #12]
 800914c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800930c <_vfiprintf_r+0x24c>
 8009150:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009154:	4623      	mov	r3, r4
 8009156:	469a      	mov	sl, r3
 8009158:	f813 2b01 	ldrb.w	r2, [r3], #1
 800915c:	b10a      	cbz	r2, 8009162 <_vfiprintf_r+0xa2>
 800915e:	2a25      	cmp	r2, #37	; 0x25
 8009160:	d1f9      	bne.n	8009156 <_vfiprintf_r+0x96>
 8009162:	ebba 0b04 	subs.w	fp, sl, r4
 8009166:	d00b      	beq.n	8009180 <_vfiprintf_r+0xc0>
 8009168:	465b      	mov	r3, fp
 800916a:	4622      	mov	r2, r4
 800916c:	4629      	mov	r1, r5
 800916e:	4630      	mov	r0, r6
 8009170:	f7ff ff93 	bl	800909a <__sfputs_r>
 8009174:	3001      	adds	r0, #1
 8009176:	f000 80aa 	beq.w	80092ce <_vfiprintf_r+0x20e>
 800917a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800917c:	445a      	add	r2, fp
 800917e:	9209      	str	r2, [sp, #36]	; 0x24
 8009180:	f89a 3000 	ldrb.w	r3, [sl]
 8009184:	2b00      	cmp	r3, #0
 8009186:	f000 80a2 	beq.w	80092ce <_vfiprintf_r+0x20e>
 800918a:	2300      	movs	r3, #0
 800918c:	f04f 32ff 	mov.w	r2, #4294967295
 8009190:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009194:	f10a 0a01 	add.w	sl, sl, #1
 8009198:	9304      	str	r3, [sp, #16]
 800919a:	9307      	str	r3, [sp, #28]
 800919c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091a0:	931a      	str	r3, [sp, #104]	; 0x68
 80091a2:	4654      	mov	r4, sl
 80091a4:	2205      	movs	r2, #5
 80091a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091aa:	4858      	ldr	r0, [pc, #352]	; (800930c <_vfiprintf_r+0x24c>)
 80091ac:	f000 faf8 	bl	80097a0 <memchr>
 80091b0:	9a04      	ldr	r2, [sp, #16]
 80091b2:	b9d8      	cbnz	r0, 80091ec <_vfiprintf_r+0x12c>
 80091b4:	06d1      	lsls	r1, r2, #27
 80091b6:	bf44      	itt	mi
 80091b8:	2320      	movmi	r3, #32
 80091ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091be:	0713      	lsls	r3, r2, #28
 80091c0:	bf44      	itt	mi
 80091c2:	232b      	movmi	r3, #43	; 0x2b
 80091c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091c8:	f89a 3000 	ldrb.w	r3, [sl]
 80091cc:	2b2a      	cmp	r3, #42	; 0x2a
 80091ce:	d015      	beq.n	80091fc <_vfiprintf_r+0x13c>
 80091d0:	4654      	mov	r4, sl
 80091d2:	2000      	movs	r0, #0
 80091d4:	f04f 0c0a 	mov.w	ip, #10
 80091d8:	9a07      	ldr	r2, [sp, #28]
 80091da:	4621      	mov	r1, r4
 80091dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091e0:	3b30      	subs	r3, #48	; 0x30
 80091e2:	2b09      	cmp	r3, #9
 80091e4:	d94e      	bls.n	8009284 <_vfiprintf_r+0x1c4>
 80091e6:	b1b0      	cbz	r0, 8009216 <_vfiprintf_r+0x156>
 80091e8:	9207      	str	r2, [sp, #28]
 80091ea:	e014      	b.n	8009216 <_vfiprintf_r+0x156>
 80091ec:	eba0 0308 	sub.w	r3, r0, r8
 80091f0:	fa09 f303 	lsl.w	r3, r9, r3
 80091f4:	4313      	orrs	r3, r2
 80091f6:	46a2      	mov	sl, r4
 80091f8:	9304      	str	r3, [sp, #16]
 80091fa:	e7d2      	b.n	80091a2 <_vfiprintf_r+0xe2>
 80091fc:	9b03      	ldr	r3, [sp, #12]
 80091fe:	1d19      	adds	r1, r3, #4
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	9103      	str	r1, [sp, #12]
 8009204:	2b00      	cmp	r3, #0
 8009206:	bfbb      	ittet	lt
 8009208:	425b      	neglt	r3, r3
 800920a:	f042 0202 	orrlt.w	r2, r2, #2
 800920e:	9307      	strge	r3, [sp, #28]
 8009210:	9307      	strlt	r3, [sp, #28]
 8009212:	bfb8      	it	lt
 8009214:	9204      	strlt	r2, [sp, #16]
 8009216:	7823      	ldrb	r3, [r4, #0]
 8009218:	2b2e      	cmp	r3, #46	; 0x2e
 800921a:	d10c      	bne.n	8009236 <_vfiprintf_r+0x176>
 800921c:	7863      	ldrb	r3, [r4, #1]
 800921e:	2b2a      	cmp	r3, #42	; 0x2a
 8009220:	d135      	bne.n	800928e <_vfiprintf_r+0x1ce>
 8009222:	9b03      	ldr	r3, [sp, #12]
 8009224:	3402      	adds	r4, #2
 8009226:	1d1a      	adds	r2, r3, #4
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	9203      	str	r2, [sp, #12]
 800922c:	2b00      	cmp	r3, #0
 800922e:	bfb8      	it	lt
 8009230:	f04f 33ff 	movlt.w	r3, #4294967295
 8009234:	9305      	str	r3, [sp, #20]
 8009236:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800931c <_vfiprintf_r+0x25c>
 800923a:	2203      	movs	r2, #3
 800923c:	4650      	mov	r0, sl
 800923e:	7821      	ldrb	r1, [r4, #0]
 8009240:	f000 faae 	bl	80097a0 <memchr>
 8009244:	b140      	cbz	r0, 8009258 <_vfiprintf_r+0x198>
 8009246:	2340      	movs	r3, #64	; 0x40
 8009248:	eba0 000a 	sub.w	r0, r0, sl
 800924c:	fa03 f000 	lsl.w	r0, r3, r0
 8009250:	9b04      	ldr	r3, [sp, #16]
 8009252:	3401      	adds	r4, #1
 8009254:	4303      	orrs	r3, r0
 8009256:	9304      	str	r3, [sp, #16]
 8009258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800925c:	2206      	movs	r2, #6
 800925e:	482c      	ldr	r0, [pc, #176]	; (8009310 <_vfiprintf_r+0x250>)
 8009260:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009264:	f000 fa9c 	bl	80097a0 <memchr>
 8009268:	2800      	cmp	r0, #0
 800926a:	d03f      	beq.n	80092ec <_vfiprintf_r+0x22c>
 800926c:	4b29      	ldr	r3, [pc, #164]	; (8009314 <_vfiprintf_r+0x254>)
 800926e:	bb1b      	cbnz	r3, 80092b8 <_vfiprintf_r+0x1f8>
 8009270:	9b03      	ldr	r3, [sp, #12]
 8009272:	3307      	adds	r3, #7
 8009274:	f023 0307 	bic.w	r3, r3, #7
 8009278:	3308      	adds	r3, #8
 800927a:	9303      	str	r3, [sp, #12]
 800927c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800927e:	443b      	add	r3, r7
 8009280:	9309      	str	r3, [sp, #36]	; 0x24
 8009282:	e767      	b.n	8009154 <_vfiprintf_r+0x94>
 8009284:	460c      	mov	r4, r1
 8009286:	2001      	movs	r0, #1
 8009288:	fb0c 3202 	mla	r2, ip, r2, r3
 800928c:	e7a5      	b.n	80091da <_vfiprintf_r+0x11a>
 800928e:	2300      	movs	r3, #0
 8009290:	f04f 0c0a 	mov.w	ip, #10
 8009294:	4619      	mov	r1, r3
 8009296:	3401      	adds	r4, #1
 8009298:	9305      	str	r3, [sp, #20]
 800929a:	4620      	mov	r0, r4
 800929c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092a0:	3a30      	subs	r2, #48	; 0x30
 80092a2:	2a09      	cmp	r2, #9
 80092a4:	d903      	bls.n	80092ae <_vfiprintf_r+0x1ee>
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d0c5      	beq.n	8009236 <_vfiprintf_r+0x176>
 80092aa:	9105      	str	r1, [sp, #20]
 80092ac:	e7c3      	b.n	8009236 <_vfiprintf_r+0x176>
 80092ae:	4604      	mov	r4, r0
 80092b0:	2301      	movs	r3, #1
 80092b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80092b6:	e7f0      	b.n	800929a <_vfiprintf_r+0x1da>
 80092b8:	ab03      	add	r3, sp, #12
 80092ba:	9300      	str	r3, [sp, #0]
 80092bc:	462a      	mov	r2, r5
 80092be:	4630      	mov	r0, r6
 80092c0:	4b15      	ldr	r3, [pc, #84]	; (8009318 <_vfiprintf_r+0x258>)
 80092c2:	a904      	add	r1, sp, #16
 80092c4:	f3af 8000 	nop.w
 80092c8:	4607      	mov	r7, r0
 80092ca:	1c78      	adds	r0, r7, #1
 80092cc:	d1d6      	bne.n	800927c <_vfiprintf_r+0x1bc>
 80092ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092d0:	07d9      	lsls	r1, r3, #31
 80092d2:	d405      	bmi.n	80092e0 <_vfiprintf_r+0x220>
 80092d4:	89ab      	ldrh	r3, [r5, #12]
 80092d6:	059a      	lsls	r2, r3, #22
 80092d8:	d402      	bmi.n	80092e0 <_vfiprintf_r+0x220>
 80092da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092dc:	f7ff fdbd 	bl	8008e5a <__retarget_lock_release_recursive>
 80092e0:	89ab      	ldrh	r3, [r5, #12]
 80092e2:	065b      	lsls	r3, r3, #25
 80092e4:	f53f af12 	bmi.w	800910c <_vfiprintf_r+0x4c>
 80092e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092ea:	e711      	b.n	8009110 <_vfiprintf_r+0x50>
 80092ec:	ab03      	add	r3, sp, #12
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	462a      	mov	r2, r5
 80092f2:	4630      	mov	r0, r6
 80092f4:	4b08      	ldr	r3, [pc, #32]	; (8009318 <_vfiprintf_r+0x258>)
 80092f6:	a904      	add	r1, sp, #16
 80092f8:	f000 f882 	bl	8009400 <_printf_i>
 80092fc:	e7e4      	b.n	80092c8 <_vfiprintf_r+0x208>
 80092fe:	bf00      	nop
 8009300:	0800ad20 	.word	0x0800ad20
 8009304:	0800ad40 	.word	0x0800ad40
 8009308:	0800ad00 	.word	0x0800ad00
 800930c:	0800ad60 	.word	0x0800ad60
 8009310:	0800ad6a 	.word	0x0800ad6a
 8009314:	00000000 	.word	0x00000000
 8009318:	0800909b 	.word	0x0800909b
 800931c:	0800ad66 	.word	0x0800ad66

08009320 <_printf_common>:
 8009320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009324:	4616      	mov	r6, r2
 8009326:	4699      	mov	r9, r3
 8009328:	688a      	ldr	r2, [r1, #8]
 800932a:	690b      	ldr	r3, [r1, #16]
 800932c:	4607      	mov	r7, r0
 800932e:	4293      	cmp	r3, r2
 8009330:	bfb8      	it	lt
 8009332:	4613      	movlt	r3, r2
 8009334:	6033      	str	r3, [r6, #0]
 8009336:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800933a:	460c      	mov	r4, r1
 800933c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009340:	b10a      	cbz	r2, 8009346 <_printf_common+0x26>
 8009342:	3301      	adds	r3, #1
 8009344:	6033      	str	r3, [r6, #0]
 8009346:	6823      	ldr	r3, [r4, #0]
 8009348:	0699      	lsls	r1, r3, #26
 800934a:	bf42      	ittt	mi
 800934c:	6833      	ldrmi	r3, [r6, #0]
 800934e:	3302      	addmi	r3, #2
 8009350:	6033      	strmi	r3, [r6, #0]
 8009352:	6825      	ldr	r5, [r4, #0]
 8009354:	f015 0506 	ands.w	r5, r5, #6
 8009358:	d106      	bne.n	8009368 <_printf_common+0x48>
 800935a:	f104 0a19 	add.w	sl, r4, #25
 800935e:	68e3      	ldr	r3, [r4, #12]
 8009360:	6832      	ldr	r2, [r6, #0]
 8009362:	1a9b      	subs	r3, r3, r2
 8009364:	42ab      	cmp	r3, r5
 8009366:	dc28      	bgt.n	80093ba <_printf_common+0x9a>
 8009368:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800936c:	1e13      	subs	r3, r2, #0
 800936e:	6822      	ldr	r2, [r4, #0]
 8009370:	bf18      	it	ne
 8009372:	2301      	movne	r3, #1
 8009374:	0692      	lsls	r2, r2, #26
 8009376:	d42d      	bmi.n	80093d4 <_printf_common+0xb4>
 8009378:	4649      	mov	r1, r9
 800937a:	4638      	mov	r0, r7
 800937c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009380:	47c0      	blx	r8
 8009382:	3001      	adds	r0, #1
 8009384:	d020      	beq.n	80093c8 <_printf_common+0xa8>
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	68e5      	ldr	r5, [r4, #12]
 800938a:	f003 0306 	and.w	r3, r3, #6
 800938e:	2b04      	cmp	r3, #4
 8009390:	bf18      	it	ne
 8009392:	2500      	movne	r5, #0
 8009394:	6832      	ldr	r2, [r6, #0]
 8009396:	f04f 0600 	mov.w	r6, #0
 800939a:	68a3      	ldr	r3, [r4, #8]
 800939c:	bf08      	it	eq
 800939e:	1aad      	subeq	r5, r5, r2
 80093a0:	6922      	ldr	r2, [r4, #16]
 80093a2:	bf08      	it	eq
 80093a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093a8:	4293      	cmp	r3, r2
 80093aa:	bfc4      	itt	gt
 80093ac:	1a9b      	subgt	r3, r3, r2
 80093ae:	18ed      	addgt	r5, r5, r3
 80093b0:	341a      	adds	r4, #26
 80093b2:	42b5      	cmp	r5, r6
 80093b4:	d11a      	bne.n	80093ec <_printf_common+0xcc>
 80093b6:	2000      	movs	r0, #0
 80093b8:	e008      	b.n	80093cc <_printf_common+0xac>
 80093ba:	2301      	movs	r3, #1
 80093bc:	4652      	mov	r2, sl
 80093be:	4649      	mov	r1, r9
 80093c0:	4638      	mov	r0, r7
 80093c2:	47c0      	blx	r8
 80093c4:	3001      	adds	r0, #1
 80093c6:	d103      	bne.n	80093d0 <_printf_common+0xb0>
 80093c8:	f04f 30ff 	mov.w	r0, #4294967295
 80093cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093d0:	3501      	adds	r5, #1
 80093d2:	e7c4      	b.n	800935e <_printf_common+0x3e>
 80093d4:	2030      	movs	r0, #48	; 0x30
 80093d6:	18e1      	adds	r1, r4, r3
 80093d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093dc:	1c5a      	adds	r2, r3, #1
 80093de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093e2:	4422      	add	r2, r4
 80093e4:	3302      	adds	r3, #2
 80093e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093ea:	e7c5      	b.n	8009378 <_printf_common+0x58>
 80093ec:	2301      	movs	r3, #1
 80093ee:	4622      	mov	r2, r4
 80093f0:	4649      	mov	r1, r9
 80093f2:	4638      	mov	r0, r7
 80093f4:	47c0      	blx	r8
 80093f6:	3001      	adds	r0, #1
 80093f8:	d0e6      	beq.n	80093c8 <_printf_common+0xa8>
 80093fa:	3601      	adds	r6, #1
 80093fc:	e7d9      	b.n	80093b2 <_printf_common+0x92>
	...

08009400 <_printf_i>:
 8009400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009404:	460c      	mov	r4, r1
 8009406:	7e27      	ldrb	r7, [r4, #24]
 8009408:	4691      	mov	r9, r2
 800940a:	2f78      	cmp	r7, #120	; 0x78
 800940c:	4680      	mov	r8, r0
 800940e:	469a      	mov	sl, r3
 8009410:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009412:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009416:	d807      	bhi.n	8009428 <_printf_i+0x28>
 8009418:	2f62      	cmp	r7, #98	; 0x62
 800941a:	d80a      	bhi.n	8009432 <_printf_i+0x32>
 800941c:	2f00      	cmp	r7, #0
 800941e:	f000 80d9 	beq.w	80095d4 <_printf_i+0x1d4>
 8009422:	2f58      	cmp	r7, #88	; 0x58
 8009424:	f000 80a4 	beq.w	8009570 <_printf_i+0x170>
 8009428:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800942c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009430:	e03a      	b.n	80094a8 <_printf_i+0xa8>
 8009432:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009436:	2b15      	cmp	r3, #21
 8009438:	d8f6      	bhi.n	8009428 <_printf_i+0x28>
 800943a:	a001      	add	r0, pc, #4	; (adr r0, 8009440 <_printf_i+0x40>)
 800943c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009440:	08009499 	.word	0x08009499
 8009444:	080094ad 	.word	0x080094ad
 8009448:	08009429 	.word	0x08009429
 800944c:	08009429 	.word	0x08009429
 8009450:	08009429 	.word	0x08009429
 8009454:	08009429 	.word	0x08009429
 8009458:	080094ad 	.word	0x080094ad
 800945c:	08009429 	.word	0x08009429
 8009460:	08009429 	.word	0x08009429
 8009464:	08009429 	.word	0x08009429
 8009468:	08009429 	.word	0x08009429
 800946c:	080095bb 	.word	0x080095bb
 8009470:	080094dd 	.word	0x080094dd
 8009474:	0800959d 	.word	0x0800959d
 8009478:	08009429 	.word	0x08009429
 800947c:	08009429 	.word	0x08009429
 8009480:	080095dd 	.word	0x080095dd
 8009484:	08009429 	.word	0x08009429
 8009488:	080094dd 	.word	0x080094dd
 800948c:	08009429 	.word	0x08009429
 8009490:	08009429 	.word	0x08009429
 8009494:	080095a5 	.word	0x080095a5
 8009498:	680b      	ldr	r3, [r1, #0]
 800949a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800949e:	1d1a      	adds	r2, r3, #4
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	600a      	str	r2, [r1, #0]
 80094a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094a8:	2301      	movs	r3, #1
 80094aa:	e0a4      	b.n	80095f6 <_printf_i+0x1f6>
 80094ac:	6825      	ldr	r5, [r4, #0]
 80094ae:	6808      	ldr	r0, [r1, #0]
 80094b0:	062e      	lsls	r6, r5, #24
 80094b2:	f100 0304 	add.w	r3, r0, #4
 80094b6:	d50a      	bpl.n	80094ce <_printf_i+0xce>
 80094b8:	6805      	ldr	r5, [r0, #0]
 80094ba:	600b      	str	r3, [r1, #0]
 80094bc:	2d00      	cmp	r5, #0
 80094be:	da03      	bge.n	80094c8 <_printf_i+0xc8>
 80094c0:	232d      	movs	r3, #45	; 0x2d
 80094c2:	426d      	negs	r5, r5
 80094c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094c8:	230a      	movs	r3, #10
 80094ca:	485e      	ldr	r0, [pc, #376]	; (8009644 <_printf_i+0x244>)
 80094cc:	e019      	b.n	8009502 <_printf_i+0x102>
 80094ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80094d2:	6805      	ldr	r5, [r0, #0]
 80094d4:	600b      	str	r3, [r1, #0]
 80094d6:	bf18      	it	ne
 80094d8:	b22d      	sxthne	r5, r5
 80094da:	e7ef      	b.n	80094bc <_printf_i+0xbc>
 80094dc:	680b      	ldr	r3, [r1, #0]
 80094de:	6825      	ldr	r5, [r4, #0]
 80094e0:	1d18      	adds	r0, r3, #4
 80094e2:	6008      	str	r0, [r1, #0]
 80094e4:	0628      	lsls	r0, r5, #24
 80094e6:	d501      	bpl.n	80094ec <_printf_i+0xec>
 80094e8:	681d      	ldr	r5, [r3, #0]
 80094ea:	e002      	b.n	80094f2 <_printf_i+0xf2>
 80094ec:	0669      	lsls	r1, r5, #25
 80094ee:	d5fb      	bpl.n	80094e8 <_printf_i+0xe8>
 80094f0:	881d      	ldrh	r5, [r3, #0]
 80094f2:	2f6f      	cmp	r7, #111	; 0x6f
 80094f4:	bf0c      	ite	eq
 80094f6:	2308      	moveq	r3, #8
 80094f8:	230a      	movne	r3, #10
 80094fa:	4852      	ldr	r0, [pc, #328]	; (8009644 <_printf_i+0x244>)
 80094fc:	2100      	movs	r1, #0
 80094fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009502:	6866      	ldr	r6, [r4, #4]
 8009504:	2e00      	cmp	r6, #0
 8009506:	bfa8      	it	ge
 8009508:	6821      	ldrge	r1, [r4, #0]
 800950a:	60a6      	str	r6, [r4, #8]
 800950c:	bfa4      	itt	ge
 800950e:	f021 0104 	bicge.w	r1, r1, #4
 8009512:	6021      	strge	r1, [r4, #0]
 8009514:	b90d      	cbnz	r5, 800951a <_printf_i+0x11a>
 8009516:	2e00      	cmp	r6, #0
 8009518:	d04d      	beq.n	80095b6 <_printf_i+0x1b6>
 800951a:	4616      	mov	r6, r2
 800951c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009520:	fb03 5711 	mls	r7, r3, r1, r5
 8009524:	5dc7      	ldrb	r7, [r0, r7]
 8009526:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800952a:	462f      	mov	r7, r5
 800952c:	42bb      	cmp	r3, r7
 800952e:	460d      	mov	r5, r1
 8009530:	d9f4      	bls.n	800951c <_printf_i+0x11c>
 8009532:	2b08      	cmp	r3, #8
 8009534:	d10b      	bne.n	800954e <_printf_i+0x14e>
 8009536:	6823      	ldr	r3, [r4, #0]
 8009538:	07df      	lsls	r7, r3, #31
 800953a:	d508      	bpl.n	800954e <_printf_i+0x14e>
 800953c:	6923      	ldr	r3, [r4, #16]
 800953e:	6861      	ldr	r1, [r4, #4]
 8009540:	4299      	cmp	r1, r3
 8009542:	bfde      	ittt	le
 8009544:	2330      	movle	r3, #48	; 0x30
 8009546:	f806 3c01 	strble.w	r3, [r6, #-1]
 800954a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800954e:	1b92      	subs	r2, r2, r6
 8009550:	6122      	str	r2, [r4, #16]
 8009552:	464b      	mov	r3, r9
 8009554:	4621      	mov	r1, r4
 8009556:	4640      	mov	r0, r8
 8009558:	f8cd a000 	str.w	sl, [sp]
 800955c:	aa03      	add	r2, sp, #12
 800955e:	f7ff fedf 	bl	8009320 <_printf_common>
 8009562:	3001      	adds	r0, #1
 8009564:	d14c      	bne.n	8009600 <_printf_i+0x200>
 8009566:	f04f 30ff 	mov.w	r0, #4294967295
 800956a:	b004      	add	sp, #16
 800956c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009570:	4834      	ldr	r0, [pc, #208]	; (8009644 <_printf_i+0x244>)
 8009572:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009576:	680e      	ldr	r6, [r1, #0]
 8009578:	6823      	ldr	r3, [r4, #0]
 800957a:	f856 5b04 	ldr.w	r5, [r6], #4
 800957e:	061f      	lsls	r7, r3, #24
 8009580:	600e      	str	r6, [r1, #0]
 8009582:	d514      	bpl.n	80095ae <_printf_i+0x1ae>
 8009584:	07d9      	lsls	r1, r3, #31
 8009586:	bf44      	itt	mi
 8009588:	f043 0320 	orrmi.w	r3, r3, #32
 800958c:	6023      	strmi	r3, [r4, #0]
 800958e:	b91d      	cbnz	r5, 8009598 <_printf_i+0x198>
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	f023 0320 	bic.w	r3, r3, #32
 8009596:	6023      	str	r3, [r4, #0]
 8009598:	2310      	movs	r3, #16
 800959a:	e7af      	b.n	80094fc <_printf_i+0xfc>
 800959c:	6823      	ldr	r3, [r4, #0]
 800959e:	f043 0320 	orr.w	r3, r3, #32
 80095a2:	6023      	str	r3, [r4, #0]
 80095a4:	2378      	movs	r3, #120	; 0x78
 80095a6:	4828      	ldr	r0, [pc, #160]	; (8009648 <_printf_i+0x248>)
 80095a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095ac:	e7e3      	b.n	8009576 <_printf_i+0x176>
 80095ae:	065e      	lsls	r6, r3, #25
 80095b0:	bf48      	it	mi
 80095b2:	b2ad      	uxthmi	r5, r5
 80095b4:	e7e6      	b.n	8009584 <_printf_i+0x184>
 80095b6:	4616      	mov	r6, r2
 80095b8:	e7bb      	b.n	8009532 <_printf_i+0x132>
 80095ba:	680b      	ldr	r3, [r1, #0]
 80095bc:	6826      	ldr	r6, [r4, #0]
 80095be:	1d1d      	adds	r5, r3, #4
 80095c0:	6960      	ldr	r0, [r4, #20]
 80095c2:	600d      	str	r5, [r1, #0]
 80095c4:	0635      	lsls	r5, r6, #24
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	d501      	bpl.n	80095ce <_printf_i+0x1ce>
 80095ca:	6018      	str	r0, [r3, #0]
 80095cc:	e002      	b.n	80095d4 <_printf_i+0x1d4>
 80095ce:	0671      	lsls	r1, r6, #25
 80095d0:	d5fb      	bpl.n	80095ca <_printf_i+0x1ca>
 80095d2:	8018      	strh	r0, [r3, #0]
 80095d4:	2300      	movs	r3, #0
 80095d6:	4616      	mov	r6, r2
 80095d8:	6123      	str	r3, [r4, #16]
 80095da:	e7ba      	b.n	8009552 <_printf_i+0x152>
 80095dc:	680b      	ldr	r3, [r1, #0]
 80095de:	1d1a      	adds	r2, r3, #4
 80095e0:	600a      	str	r2, [r1, #0]
 80095e2:	681e      	ldr	r6, [r3, #0]
 80095e4:	2100      	movs	r1, #0
 80095e6:	4630      	mov	r0, r6
 80095e8:	6862      	ldr	r2, [r4, #4]
 80095ea:	f000 f8d9 	bl	80097a0 <memchr>
 80095ee:	b108      	cbz	r0, 80095f4 <_printf_i+0x1f4>
 80095f0:	1b80      	subs	r0, r0, r6
 80095f2:	6060      	str	r0, [r4, #4]
 80095f4:	6863      	ldr	r3, [r4, #4]
 80095f6:	6123      	str	r3, [r4, #16]
 80095f8:	2300      	movs	r3, #0
 80095fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095fe:	e7a8      	b.n	8009552 <_printf_i+0x152>
 8009600:	4632      	mov	r2, r6
 8009602:	4649      	mov	r1, r9
 8009604:	4640      	mov	r0, r8
 8009606:	6923      	ldr	r3, [r4, #16]
 8009608:	47d0      	blx	sl
 800960a:	3001      	adds	r0, #1
 800960c:	d0ab      	beq.n	8009566 <_printf_i+0x166>
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	079b      	lsls	r3, r3, #30
 8009612:	d413      	bmi.n	800963c <_printf_i+0x23c>
 8009614:	68e0      	ldr	r0, [r4, #12]
 8009616:	9b03      	ldr	r3, [sp, #12]
 8009618:	4298      	cmp	r0, r3
 800961a:	bfb8      	it	lt
 800961c:	4618      	movlt	r0, r3
 800961e:	e7a4      	b.n	800956a <_printf_i+0x16a>
 8009620:	2301      	movs	r3, #1
 8009622:	4632      	mov	r2, r6
 8009624:	4649      	mov	r1, r9
 8009626:	4640      	mov	r0, r8
 8009628:	47d0      	blx	sl
 800962a:	3001      	adds	r0, #1
 800962c:	d09b      	beq.n	8009566 <_printf_i+0x166>
 800962e:	3501      	adds	r5, #1
 8009630:	68e3      	ldr	r3, [r4, #12]
 8009632:	9903      	ldr	r1, [sp, #12]
 8009634:	1a5b      	subs	r3, r3, r1
 8009636:	42ab      	cmp	r3, r5
 8009638:	dcf2      	bgt.n	8009620 <_printf_i+0x220>
 800963a:	e7eb      	b.n	8009614 <_printf_i+0x214>
 800963c:	2500      	movs	r5, #0
 800963e:	f104 0619 	add.w	r6, r4, #25
 8009642:	e7f5      	b.n	8009630 <_printf_i+0x230>
 8009644:	0800ad71 	.word	0x0800ad71
 8009648:	0800ad82 	.word	0x0800ad82

0800964c <_sbrk_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	2300      	movs	r3, #0
 8009650:	4d05      	ldr	r5, [pc, #20]	; (8009668 <_sbrk_r+0x1c>)
 8009652:	4604      	mov	r4, r0
 8009654:	4608      	mov	r0, r1
 8009656:	602b      	str	r3, [r5, #0]
 8009658:	f7f9 fb08 	bl	8002c6c <_sbrk>
 800965c:	1c43      	adds	r3, r0, #1
 800965e:	d102      	bne.n	8009666 <_sbrk_r+0x1a>
 8009660:	682b      	ldr	r3, [r5, #0]
 8009662:	b103      	cbz	r3, 8009666 <_sbrk_r+0x1a>
 8009664:	6023      	str	r3, [r4, #0]
 8009666:	bd38      	pop	{r3, r4, r5, pc}
 8009668:	20001c40 	.word	0x20001c40

0800966c <__sread>:
 800966c:	b510      	push	{r4, lr}
 800966e:	460c      	mov	r4, r1
 8009670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009674:	f000 f8ae 	bl	80097d4 <_read_r>
 8009678:	2800      	cmp	r0, #0
 800967a:	bfab      	itete	ge
 800967c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800967e:	89a3      	ldrhlt	r3, [r4, #12]
 8009680:	181b      	addge	r3, r3, r0
 8009682:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009686:	bfac      	ite	ge
 8009688:	6563      	strge	r3, [r4, #84]	; 0x54
 800968a:	81a3      	strhlt	r3, [r4, #12]
 800968c:	bd10      	pop	{r4, pc}

0800968e <__swrite>:
 800968e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009692:	461f      	mov	r7, r3
 8009694:	898b      	ldrh	r3, [r1, #12]
 8009696:	4605      	mov	r5, r0
 8009698:	05db      	lsls	r3, r3, #23
 800969a:	460c      	mov	r4, r1
 800969c:	4616      	mov	r6, r2
 800969e:	d505      	bpl.n	80096ac <__swrite+0x1e>
 80096a0:	2302      	movs	r3, #2
 80096a2:	2200      	movs	r2, #0
 80096a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096a8:	f000 f868 	bl	800977c <_lseek_r>
 80096ac:	89a3      	ldrh	r3, [r4, #12]
 80096ae:	4632      	mov	r2, r6
 80096b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096b4:	81a3      	strh	r3, [r4, #12]
 80096b6:	4628      	mov	r0, r5
 80096b8:	463b      	mov	r3, r7
 80096ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096c2:	f000 b817 	b.w	80096f4 <_write_r>

080096c6 <__sseek>:
 80096c6:	b510      	push	{r4, lr}
 80096c8:	460c      	mov	r4, r1
 80096ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096ce:	f000 f855 	bl	800977c <_lseek_r>
 80096d2:	1c43      	adds	r3, r0, #1
 80096d4:	89a3      	ldrh	r3, [r4, #12]
 80096d6:	bf15      	itete	ne
 80096d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80096da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80096de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80096e2:	81a3      	strheq	r3, [r4, #12]
 80096e4:	bf18      	it	ne
 80096e6:	81a3      	strhne	r3, [r4, #12]
 80096e8:	bd10      	pop	{r4, pc}

080096ea <__sclose>:
 80096ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096ee:	f000 b813 	b.w	8009718 <_close_r>
	...

080096f4 <_write_r>:
 80096f4:	b538      	push	{r3, r4, r5, lr}
 80096f6:	4604      	mov	r4, r0
 80096f8:	4608      	mov	r0, r1
 80096fa:	4611      	mov	r1, r2
 80096fc:	2200      	movs	r2, #0
 80096fe:	4d05      	ldr	r5, [pc, #20]	; (8009714 <_write_r+0x20>)
 8009700:	602a      	str	r2, [r5, #0]
 8009702:	461a      	mov	r2, r3
 8009704:	f7f9 fa65 	bl	8002bd2 <_write>
 8009708:	1c43      	adds	r3, r0, #1
 800970a:	d102      	bne.n	8009712 <_write_r+0x1e>
 800970c:	682b      	ldr	r3, [r5, #0]
 800970e:	b103      	cbz	r3, 8009712 <_write_r+0x1e>
 8009710:	6023      	str	r3, [r4, #0]
 8009712:	bd38      	pop	{r3, r4, r5, pc}
 8009714:	20001c40 	.word	0x20001c40

08009718 <_close_r>:
 8009718:	b538      	push	{r3, r4, r5, lr}
 800971a:	2300      	movs	r3, #0
 800971c:	4d05      	ldr	r5, [pc, #20]	; (8009734 <_close_r+0x1c>)
 800971e:	4604      	mov	r4, r0
 8009720:	4608      	mov	r0, r1
 8009722:	602b      	str	r3, [r5, #0]
 8009724:	f7f9 fa71 	bl	8002c0a <_close>
 8009728:	1c43      	adds	r3, r0, #1
 800972a:	d102      	bne.n	8009732 <_close_r+0x1a>
 800972c:	682b      	ldr	r3, [r5, #0]
 800972e:	b103      	cbz	r3, 8009732 <_close_r+0x1a>
 8009730:	6023      	str	r3, [r4, #0]
 8009732:	bd38      	pop	{r3, r4, r5, pc}
 8009734:	20001c40 	.word	0x20001c40

08009738 <_fstat_r>:
 8009738:	b538      	push	{r3, r4, r5, lr}
 800973a:	2300      	movs	r3, #0
 800973c:	4d06      	ldr	r5, [pc, #24]	; (8009758 <_fstat_r+0x20>)
 800973e:	4604      	mov	r4, r0
 8009740:	4608      	mov	r0, r1
 8009742:	4611      	mov	r1, r2
 8009744:	602b      	str	r3, [r5, #0]
 8009746:	f7f9 fa6b 	bl	8002c20 <_fstat>
 800974a:	1c43      	adds	r3, r0, #1
 800974c:	d102      	bne.n	8009754 <_fstat_r+0x1c>
 800974e:	682b      	ldr	r3, [r5, #0]
 8009750:	b103      	cbz	r3, 8009754 <_fstat_r+0x1c>
 8009752:	6023      	str	r3, [r4, #0]
 8009754:	bd38      	pop	{r3, r4, r5, pc}
 8009756:	bf00      	nop
 8009758:	20001c40 	.word	0x20001c40

0800975c <_isatty_r>:
 800975c:	b538      	push	{r3, r4, r5, lr}
 800975e:	2300      	movs	r3, #0
 8009760:	4d05      	ldr	r5, [pc, #20]	; (8009778 <_isatty_r+0x1c>)
 8009762:	4604      	mov	r4, r0
 8009764:	4608      	mov	r0, r1
 8009766:	602b      	str	r3, [r5, #0]
 8009768:	f7f9 fa69 	bl	8002c3e <_isatty>
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	d102      	bne.n	8009776 <_isatty_r+0x1a>
 8009770:	682b      	ldr	r3, [r5, #0]
 8009772:	b103      	cbz	r3, 8009776 <_isatty_r+0x1a>
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	bd38      	pop	{r3, r4, r5, pc}
 8009778:	20001c40 	.word	0x20001c40

0800977c <_lseek_r>:
 800977c:	b538      	push	{r3, r4, r5, lr}
 800977e:	4604      	mov	r4, r0
 8009780:	4608      	mov	r0, r1
 8009782:	4611      	mov	r1, r2
 8009784:	2200      	movs	r2, #0
 8009786:	4d05      	ldr	r5, [pc, #20]	; (800979c <_lseek_r+0x20>)
 8009788:	602a      	str	r2, [r5, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	f7f9 fa61 	bl	8002c52 <_lseek>
 8009790:	1c43      	adds	r3, r0, #1
 8009792:	d102      	bne.n	800979a <_lseek_r+0x1e>
 8009794:	682b      	ldr	r3, [r5, #0]
 8009796:	b103      	cbz	r3, 800979a <_lseek_r+0x1e>
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	bd38      	pop	{r3, r4, r5, pc}
 800979c:	20001c40 	.word	0x20001c40

080097a0 <memchr>:
 80097a0:	4603      	mov	r3, r0
 80097a2:	b510      	push	{r4, lr}
 80097a4:	b2c9      	uxtb	r1, r1
 80097a6:	4402      	add	r2, r0
 80097a8:	4293      	cmp	r3, r2
 80097aa:	4618      	mov	r0, r3
 80097ac:	d101      	bne.n	80097b2 <memchr+0x12>
 80097ae:	2000      	movs	r0, #0
 80097b0:	e003      	b.n	80097ba <memchr+0x1a>
 80097b2:	7804      	ldrb	r4, [r0, #0]
 80097b4:	3301      	adds	r3, #1
 80097b6:	428c      	cmp	r4, r1
 80097b8:	d1f6      	bne.n	80097a8 <memchr+0x8>
 80097ba:	bd10      	pop	{r4, pc}

080097bc <__malloc_lock>:
 80097bc:	4801      	ldr	r0, [pc, #4]	; (80097c4 <__malloc_lock+0x8>)
 80097be:	f7ff bb4b 	b.w	8008e58 <__retarget_lock_acquire_recursive>
 80097c2:	bf00      	nop
 80097c4:	20001c38 	.word	0x20001c38

080097c8 <__malloc_unlock>:
 80097c8:	4801      	ldr	r0, [pc, #4]	; (80097d0 <__malloc_unlock+0x8>)
 80097ca:	f7ff bb46 	b.w	8008e5a <__retarget_lock_release_recursive>
 80097ce:	bf00      	nop
 80097d0:	20001c38 	.word	0x20001c38

080097d4 <_read_r>:
 80097d4:	b538      	push	{r3, r4, r5, lr}
 80097d6:	4604      	mov	r4, r0
 80097d8:	4608      	mov	r0, r1
 80097da:	4611      	mov	r1, r2
 80097dc:	2200      	movs	r2, #0
 80097de:	4d05      	ldr	r5, [pc, #20]	; (80097f4 <_read_r+0x20>)
 80097e0:	602a      	str	r2, [r5, #0]
 80097e2:	461a      	mov	r2, r3
 80097e4:	f7f9 f9d8 	bl	8002b98 <_read>
 80097e8:	1c43      	adds	r3, r0, #1
 80097ea:	d102      	bne.n	80097f2 <_read_r+0x1e>
 80097ec:	682b      	ldr	r3, [r5, #0]
 80097ee:	b103      	cbz	r3, 80097f2 <_read_r+0x1e>
 80097f0:	6023      	str	r3, [r4, #0]
 80097f2:	bd38      	pop	{r3, r4, r5, pc}
 80097f4:	20001c40 	.word	0x20001c40

080097f8 <atan2>:
 80097f8:	f000 b8ae 	b.w	8009958 <__ieee754_atan2>

080097fc <pow>:
 80097fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009800:	461f      	mov	r7, r3
 8009802:	4680      	mov	r8, r0
 8009804:	4689      	mov	r9, r1
 8009806:	4616      	mov	r6, r2
 8009808:	f000 f97a 	bl	8009b00 <__ieee754_pow>
 800980c:	4b4d      	ldr	r3, [pc, #308]	; (8009944 <pow+0x148>)
 800980e:	4604      	mov	r4, r0
 8009810:	f993 3000 	ldrsb.w	r3, [r3]
 8009814:	460d      	mov	r5, r1
 8009816:	3301      	adds	r3, #1
 8009818:	d015      	beq.n	8009846 <pow+0x4a>
 800981a:	4632      	mov	r2, r6
 800981c:	463b      	mov	r3, r7
 800981e:	4630      	mov	r0, r6
 8009820:	4639      	mov	r1, r7
 8009822:	f7f7 f8eb 	bl	80009fc <__aeabi_dcmpun>
 8009826:	b970      	cbnz	r0, 8009846 <pow+0x4a>
 8009828:	4642      	mov	r2, r8
 800982a:	464b      	mov	r3, r9
 800982c:	4640      	mov	r0, r8
 800982e:	4649      	mov	r1, r9
 8009830:	f7f7 f8e4 	bl	80009fc <__aeabi_dcmpun>
 8009834:	2200      	movs	r2, #0
 8009836:	2300      	movs	r3, #0
 8009838:	b148      	cbz	r0, 800984e <pow+0x52>
 800983a:	4630      	mov	r0, r6
 800983c:	4639      	mov	r1, r7
 800983e:	f7f7 f8ab 	bl	8000998 <__aeabi_dcmpeq>
 8009842:	2800      	cmp	r0, #0
 8009844:	d17b      	bne.n	800993e <pow+0x142>
 8009846:	4620      	mov	r0, r4
 8009848:	4629      	mov	r1, r5
 800984a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800984e:	4640      	mov	r0, r8
 8009850:	4649      	mov	r1, r9
 8009852:	f7f7 f8a1 	bl	8000998 <__aeabi_dcmpeq>
 8009856:	b1e0      	cbz	r0, 8009892 <pow+0x96>
 8009858:	2200      	movs	r2, #0
 800985a:	2300      	movs	r3, #0
 800985c:	4630      	mov	r0, r6
 800985e:	4639      	mov	r1, r7
 8009860:	f7f7 f89a 	bl	8000998 <__aeabi_dcmpeq>
 8009864:	2800      	cmp	r0, #0
 8009866:	d16a      	bne.n	800993e <pow+0x142>
 8009868:	4630      	mov	r0, r6
 800986a:	4639      	mov	r1, r7
 800986c:	f001 f899 	bl	800a9a2 <finite>
 8009870:	2800      	cmp	r0, #0
 8009872:	d0e8      	beq.n	8009846 <pow+0x4a>
 8009874:	2200      	movs	r2, #0
 8009876:	2300      	movs	r3, #0
 8009878:	4630      	mov	r0, r6
 800987a:	4639      	mov	r1, r7
 800987c:	f7f7 f896 	bl	80009ac <__aeabi_dcmplt>
 8009880:	2800      	cmp	r0, #0
 8009882:	d0e0      	beq.n	8009846 <pow+0x4a>
 8009884:	f7fe ffa2 	bl	80087cc <__errno>
 8009888:	2321      	movs	r3, #33	; 0x21
 800988a:	2400      	movs	r4, #0
 800988c:	6003      	str	r3, [r0, #0]
 800988e:	4d2e      	ldr	r5, [pc, #184]	; (8009948 <pow+0x14c>)
 8009890:	e7d9      	b.n	8009846 <pow+0x4a>
 8009892:	4620      	mov	r0, r4
 8009894:	4629      	mov	r1, r5
 8009896:	f001 f884 	bl	800a9a2 <finite>
 800989a:	bba8      	cbnz	r0, 8009908 <pow+0x10c>
 800989c:	4640      	mov	r0, r8
 800989e:	4649      	mov	r1, r9
 80098a0:	f001 f87f 	bl	800a9a2 <finite>
 80098a4:	b380      	cbz	r0, 8009908 <pow+0x10c>
 80098a6:	4630      	mov	r0, r6
 80098a8:	4639      	mov	r1, r7
 80098aa:	f001 f87a 	bl	800a9a2 <finite>
 80098ae:	b358      	cbz	r0, 8009908 <pow+0x10c>
 80098b0:	4622      	mov	r2, r4
 80098b2:	462b      	mov	r3, r5
 80098b4:	4620      	mov	r0, r4
 80098b6:	4629      	mov	r1, r5
 80098b8:	f7f7 f8a0 	bl	80009fc <__aeabi_dcmpun>
 80098bc:	b160      	cbz	r0, 80098d8 <pow+0xdc>
 80098be:	f7fe ff85 	bl	80087cc <__errno>
 80098c2:	2321      	movs	r3, #33	; 0x21
 80098c4:	2200      	movs	r2, #0
 80098c6:	6003      	str	r3, [r0, #0]
 80098c8:	2300      	movs	r3, #0
 80098ca:	4610      	mov	r0, r2
 80098cc:	4619      	mov	r1, r3
 80098ce:	f7f6 ff25 	bl	800071c <__aeabi_ddiv>
 80098d2:	4604      	mov	r4, r0
 80098d4:	460d      	mov	r5, r1
 80098d6:	e7b6      	b.n	8009846 <pow+0x4a>
 80098d8:	f7fe ff78 	bl	80087cc <__errno>
 80098dc:	2322      	movs	r3, #34	; 0x22
 80098de:	2200      	movs	r2, #0
 80098e0:	6003      	str	r3, [r0, #0]
 80098e2:	4649      	mov	r1, r9
 80098e4:	2300      	movs	r3, #0
 80098e6:	4640      	mov	r0, r8
 80098e8:	f7f7 f860 	bl	80009ac <__aeabi_dcmplt>
 80098ec:	2400      	movs	r4, #0
 80098ee:	b148      	cbz	r0, 8009904 <pow+0x108>
 80098f0:	4630      	mov	r0, r6
 80098f2:	4639      	mov	r1, r7
 80098f4:	f001 f862 	bl	800a9bc <rint>
 80098f8:	4632      	mov	r2, r6
 80098fa:	463b      	mov	r3, r7
 80098fc:	f7f7 f84c 	bl	8000998 <__aeabi_dcmpeq>
 8009900:	2800      	cmp	r0, #0
 8009902:	d0c4      	beq.n	800988e <pow+0x92>
 8009904:	4d11      	ldr	r5, [pc, #68]	; (800994c <pow+0x150>)
 8009906:	e79e      	b.n	8009846 <pow+0x4a>
 8009908:	2200      	movs	r2, #0
 800990a:	2300      	movs	r3, #0
 800990c:	4620      	mov	r0, r4
 800990e:	4629      	mov	r1, r5
 8009910:	f7f7 f842 	bl	8000998 <__aeabi_dcmpeq>
 8009914:	2800      	cmp	r0, #0
 8009916:	d096      	beq.n	8009846 <pow+0x4a>
 8009918:	4640      	mov	r0, r8
 800991a:	4649      	mov	r1, r9
 800991c:	f001 f841 	bl	800a9a2 <finite>
 8009920:	2800      	cmp	r0, #0
 8009922:	d090      	beq.n	8009846 <pow+0x4a>
 8009924:	4630      	mov	r0, r6
 8009926:	4639      	mov	r1, r7
 8009928:	f001 f83b 	bl	800a9a2 <finite>
 800992c:	2800      	cmp	r0, #0
 800992e:	d08a      	beq.n	8009846 <pow+0x4a>
 8009930:	f7fe ff4c 	bl	80087cc <__errno>
 8009934:	2322      	movs	r3, #34	; 0x22
 8009936:	2400      	movs	r4, #0
 8009938:	2500      	movs	r5, #0
 800993a:	6003      	str	r3, [r0, #0]
 800993c:	e783      	b.n	8009846 <pow+0x4a>
 800993e:	2400      	movs	r4, #0
 8009940:	4d03      	ldr	r5, [pc, #12]	; (8009950 <pow+0x154>)
 8009942:	e780      	b.n	8009846 <pow+0x4a>
 8009944:	20000074 	.word	0x20000074
 8009948:	fff00000 	.word	0xfff00000
 800994c:	7ff00000 	.word	0x7ff00000
 8009950:	3ff00000 	.word	0x3ff00000
 8009954:	00000000 	.word	0x00000000

08009958 <__ieee754_atan2>:
 8009958:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995c:	4692      	mov	sl, r2
 800995e:	4699      	mov	r9, r3
 8009960:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009964:	461f      	mov	r7, r3
 8009966:	f1ca 0300 	rsb	r3, sl, #0
 800996a:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8009af8 <__ieee754_atan2+0x1a0>
 800996e:	ea43 030a 	orr.w	r3, r3, sl
 8009972:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009976:	4573      	cmp	r3, lr
 8009978:	4604      	mov	r4, r0
 800997a:	460d      	mov	r5, r1
 800997c:	d808      	bhi.n	8009990 <__ieee754_atan2+0x38>
 800997e:	4246      	negs	r6, r0
 8009980:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009984:	4306      	orrs	r6, r0
 8009986:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800998a:	4576      	cmp	r6, lr
 800998c:	468c      	mov	ip, r1
 800998e:	d908      	bls.n	80099a2 <__ieee754_atan2+0x4a>
 8009990:	4652      	mov	r2, sl
 8009992:	464b      	mov	r3, r9
 8009994:	4620      	mov	r0, r4
 8009996:	4629      	mov	r1, r5
 8009998:	f7f6 fbe0 	bl	800015c <__adddf3>
 800999c:	4604      	mov	r4, r0
 800999e:	460d      	mov	r5, r1
 80099a0:	e019      	b.n	80099d6 <__ieee754_atan2+0x7e>
 80099a2:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 80099a6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80099aa:	ea56 060a 	orrs.w	r6, r6, sl
 80099ae:	d103      	bne.n	80099b8 <__ieee754_atan2+0x60>
 80099b0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b4:	f000 be68 	b.w	800a688 <atan>
 80099b8:	17be      	asrs	r6, r7, #30
 80099ba:	f006 0602 	and.w	r6, r6, #2
 80099be:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80099c2:	ea53 0100 	orrs.w	r1, r3, r0
 80099c6:	d10a      	bne.n	80099de <__ieee754_atan2+0x86>
 80099c8:	2e02      	cmp	r6, #2
 80099ca:	d067      	beq.n	8009a9c <__ieee754_atan2+0x144>
 80099cc:	2e03      	cmp	r6, #3
 80099ce:	d102      	bne.n	80099d6 <__ieee754_atan2+0x7e>
 80099d0:	a53b      	add	r5, pc, #236	; (adr r5, 8009ac0 <__ieee754_atan2+0x168>)
 80099d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80099d6:	4620      	mov	r0, r4
 80099d8:	4629      	mov	r1, r5
 80099da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099de:	ea52 010a 	orrs.w	r1, r2, sl
 80099e2:	d106      	bne.n	80099f2 <__ieee754_atan2+0x9a>
 80099e4:	f1bc 0f00 	cmp.w	ip, #0
 80099e8:	da63      	bge.n	8009ab2 <__ieee754_atan2+0x15a>
 80099ea:	a537      	add	r5, pc, #220	; (adr r5, 8009ac8 <__ieee754_atan2+0x170>)
 80099ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 80099f0:	e7f1      	b.n	80099d6 <__ieee754_atan2+0x7e>
 80099f2:	4572      	cmp	r2, lr
 80099f4:	d10f      	bne.n	8009a16 <__ieee754_atan2+0xbe>
 80099f6:	4293      	cmp	r3, r2
 80099f8:	f106 36ff 	add.w	r6, r6, #4294967295
 80099fc:	d107      	bne.n	8009a0e <__ieee754_atan2+0xb6>
 80099fe:	2e02      	cmp	r6, #2
 8009a00:	d850      	bhi.n	8009aa4 <__ieee754_atan2+0x14c>
 8009a02:	4b3b      	ldr	r3, [pc, #236]	; (8009af0 <__ieee754_atan2+0x198>)
 8009a04:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009a08:	e9d6 4500 	ldrd	r4, r5, [r6]
 8009a0c:	e7e3      	b.n	80099d6 <__ieee754_atan2+0x7e>
 8009a0e:	2e02      	cmp	r6, #2
 8009a10:	d84c      	bhi.n	8009aac <__ieee754_atan2+0x154>
 8009a12:	4b38      	ldr	r3, [pc, #224]	; (8009af4 <__ieee754_atan2+0x19c>)
 8009a14:	e7f6      	b.n	8009a04 <__ieee754_atan2+0xac>
 8009a16:	4573      	cmp	r3, lr
 8009a18:	d0e4      	beq.n	80099e4 <__ieee754_atan2+0x8c>
 8009a1a:	1a9b      	subs	r3, r3, r2
 8009a1c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009a20:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009a24:	da20      	bge.n	8009a68 <__ieee754_atan2+0x110>
 8009a26:	2f00      	cmp	r7, #0
 8009a28:	da01      	bge.n	8009a2e <__ieee754_atan2+0xd6>
 8009a2a:	323c      	adds	r2, #60	; 0x3c
 8009a2c:	db20      	blt.n	8009a70 <__ieee754_atan2+0x118>
 8009a2e:	4652      	mov	r2, sl
 8009a30:	464b      	mov	r3, r9
 8009a32:	4620      	mov	r0, r4
 8009a34:	4629      	mov	r1, r5
 8009a36:	f7f6 fe71 	bl	800071c <__aeabi_ddiv>
 8009a3a:	f000 ffaf 	bl	800a99c <fabs>
 8009a3e:	f000 fe23 	bl	800a688 <atan>
 8009a42:	4604      	mov	r4, r0
 8009a44:	460d      	mov	r5, r1
 8009a46:	2e01      	cmp	r6, #1
 8009a48:	d015      	beq.n	8009a76 <__ieee754_atan2+0x11e>
 8009a4a:	2e02      	cmp	r6, #2
 8009a4c:	d017      	beq.n	8009a7e <__ieee754_atan2+0x126>
 8009a4e:	2e00      	cmp	r6, #0
 8009a50:	d0c1      	beq.n	80099d6 <__ieee754_atan2+0x7e>
 8009a52:	a31f      	add	r3, pc, #124	; (adr r3, 8009ad0 <__ieee754_atan2+0x178>)
 8009a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a58:	4620      	mov	r0, r4
 8009a5a:	4629      	mov	r1, r5
 8009a5c:	f7f6 fb7c 	bl	8000158 <__aeabi_dsub>
 8009a60:	a31d      	add	r3, pc, #116	; (adr r3, 8009ad8 <__ieee754_atan2+0x180>)
 8009a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a66:	e016      	b.n	8009a96 <__ieee754_atan2+0x13e>
 8009a68:	a51d      	add	r5, pc, #116	; (adr r5, 8009ae0 <__ieee754_atan2+0x188>)
 8009a6a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009a6e:	e7ea      	b.n	8009a46 <__ieee754_atan2+0xee>
 8009a70:	2400      	movs	r4, #0
 8009a72:	2500      	movs	r5, #0
 8009a74:	e7e7      	b.n	8009a46 <__ieee754_atan2+0xee>
 8009a76:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009a7a:	461d      	mov	r5, r3
 8009a7c:	e7ab      	b.n	80099d6 <__ieee754_atan2+0x7e>
 8009a7e:	a314      	add	r3, pc, #80	; (adr r3, 8009ad0 <__ieee754_atan2+0x178>)
 8009a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a84:	4620      	mov	r0, r4
 8009a86:	4629      	mov	r1, r5
 8009a88:	f7f6 fb66 	bl	8000158 <__aeabi_dsub>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	460b      	mov	r3, r1
 8009a90:	a111      	add	r1, pc, #68	; (adr r1, 8009ad8 <__ieee754_atan2+0x180>)
 8009a92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a96:	f7f6 fb5f 	bl	8000158 <__aeabi_dsub>
 8009a9a:	e77f      	b.n	800999c <__ieee754_atan2+0x44>
 8009a9c:	a50e      	add	r5, pc, #56	; (adr r5, 8009ad8 <__ieee754_atan2+0x180>)
 8009a9e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009aa2:	e798      	b.n	80099d6 <__ieee754_atan2+0x7e>
 8009aa4:	a510      	add	r5, pc, #64	; (adr r5, 8009ae8 <__ieee754_atan2+0x190>)
 8009aa6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009aaa:	e794      	b.n	80099d6 <__ieee754_atan2+0x7e>
 8009aac:	2400      	movs	r4, #0
 8009aae:	2500      	movs	r5, #0
 8009ab0:	e791      	b.n	80099d6 <__ieee754_atan2+0x7e>
 8009ab2:	a50b      	add	r5, pc, #44	; (adr r5, 8009ae0 <__ieee754_atan2+0x188>)
 8009ab4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009ab8:	e78d      	b.n	80099d6 <__ieee754_atan2+0x7e>
 8009aba:	bf00      	nop
 8009abc:	f3af 8000 	nop.w
 8009ac0:	54442d18 	.word	0x54442d18
 8009ac4:	c00921fb 	.word	0xc00921fb
 8009ac8:	54442d18 	.word	0x54442d18
 8009acc:	bff921fb 	.word	0xbff921fb
 8009ad0:	33145c07 	.word	0x33145c07
 8009ad4:	3ca1a626 	.word	0x3ca1a626
 8009ad8:	54442d18 	.word	0x54442d18
 8009adc:	400921fb 	.word	0x400921fb
 8009ae0:	54442d18 	.word	0x54442d18
 8009ae4:	3ff921fb 	.word	0x3ff921fb
 8009ae8:	54442d18 	.word	0x54442d18
 8009aec:	3fe921fb 	.word	0x3fe921fb
 8009af0:	0800ad98 	.word	0x0800ad98
 8009af4:	0800adb0 	.word	0x0800adb0
 8009af8:	7ff00000 	.word	0x7ff00000
 8009afc:	00000000 	.word	0x00000000

08009b00 <__ieee754_pow>:
 8009b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b04:	b093      	sub	sp, #76	; 0x4c
 8009b06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b0a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8009b0e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8009b12:	ea55 0302 	orrs.w	r3, r5, r2
 8009b16:	4607      	mov	r7, r0
 8009b18:	4688      	mov	r8, r1
 8009b1a:	f000 84bf 	beq.w	800a49c <__ieee754_pow+0x99c>
 8009b1e:	4b7e      	ldr	r3, [pc, #504]	; (8009d18 <__ieee754_pow+0x218>)
 8009b20:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8009b24:	429c      	cmp	r4, r3
 8009b26:	4689      	mov	r9, r1
 8009b28:	4682      	mov	sl, r0
 8009b2a:	dc09      	bgt.n	8009b40 <__ieee754_pow+0x40>
 8009b2c:	d103      	bne.n	8009b36 <__ieee754_pow+0x36>
 8009b2e:	b978      	cbnz	r0, 8009b50 <__ieee754_pow+0x50>
 8009b30:	42a5      	cmp	r5, r4
 8009b32:	dd02      	ble.n	8009b3a <__ieee754_pow+0x3a>
 8009b34:	e00c      	b.n	8009b50 <__ieee754_pow+0x50>
 8009b36:	429d      	cmp	r5, r3
 8009b38:	dc02      	bgt.n	8009b40 <__ieee754_pow+0x40>
 8009b3a:	429d      	cmp	r5, r3
 8009b3c:	d10e      	bne.n	8009b5c <__ieee754_pow+0x5c>
 8009b3e:	b16a      	cbz	r2, 8009b5c <__ieee754_pow+0x5c>
 8009b40:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009b44:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009b48:	ea54 030a 	orrs.w	r3, r4, sl
 8009b4c:	f000 84a6 	beq.w	800a49c <__ieee754_pow+0x99c>
 8009b50:	4872      	ldr	r0, [pc, #456]	; (8009d1c <__ieee754_pow+0x21c>)
 8009b52:	b013      	add	sp, #76	; 0x4c
 8009b54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b58:	f000 bf2a 	b.w	800a9b0 <nan>
 8009b5c:	f1b9 0f00 	cmp.w	r9, #0
 8009b60:	da39      	bge.n	8009bd6 <__ieee754_pow+0xd6>
 8009b62:	4b6f      	ldr	r3, [pc, #444]	; (8009d20 <__ieee754_pow+0x220>)
 8009b64:	429d      	cmp	r5, r3
 8009b66:	dc54      	bgt.n	8009c12 <__ieee754_pow+0x112>
 8009b68:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009b6c:	429d      	cmp	r5, r3
 8009b6e:	f340 84a6 	ble.w	800a4be <__ieee754_pow+0x9be>
 8009b72:	152b      	asrs	r3, r5, #20
 8009b74:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009b78:	2b14      	cmp	r3, #20
 8009b7a:	dd0f      	ble.n	8009b9c <__ieee754_pow+0x9c>
 8009b7c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009b80:	fa22 f103 	lsr.w	r1, r2, r3
 8009b84:	fa01 f303 	lsl.w	r3, r1, r3
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	f040 8498 	bne.w	800a4be <__ieee754_pow+0x9be>
 8009b8e:	f001 0101 	and.w	r1, r1, #1
 8009b92:	f1c1 0302 	rsb	r3, r1, #2
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	b182      	cbz	r2, 8009bbc <__ieee754_pow+0xbc>
 8009b9a:	e05e      	b.n	8009c5a <__ieee754_pow+0x15a>
 8009b9c:	2a00      	cmp	r2, #0
 8009b9e:	d15a      	bne.n	8009c56 <__ieee754_pow+0x156>
 8009ba0:	f1c3 0314 	rsb	r3, r3, #20
 8009ba4:	fa45 f103 	asr.w	r1, r5, r3
 8009ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bac:	42ab      	cmp	r3, r5
 8009bae:	f040 8483 	bne.w	800a4b8 <__ieee754_pow+0x9b8>
 8009bb2:	f001 0101 	and.w	r1, r1, #1
 8009bb6:	f1c1 0302 	rsb	r3, r1, #2
 8009bba:	9300      	str	r3, [sp, #0]
 8009bbc:	4b59      	ldr	r3, [pc, #356]	; (8009d24 <__ieee754_pow+0x224>)
 8009bbe:	429d      	cmp	r5, r3
 8009bc0:	d130      	bne.n	8009c24 <__ieee754_pow+0x124>
 8009bc2:	2e00      	cmp	r6, #0
 8009bc4:	f280 8474 	bge.w	800a4b0 <__ieee754_pow+0x9b0>
 8009bc8:	463a      	mov	r2, r7
 8009bca:	4643      	mov	r3, r8
 8009bcc:	2000      	movs	r0, #0
 8009bce:	4955      	ldr	r1, [pc, #340]	; (8009d24 <__ieee754_pow+0x224>)
 8009bd0:	f7f6 fda4 	bl	800071c <__aeabi_ddiv>
 8009bd4:	e02f      	b.n	8009c36 <__ieee754_pow+0x136>
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	2a00      	cmp	r2, #0
 8009bdc:	d13d      	bne.n	8009c5a <__ieee754_pow+0x15a>
 8009bde:	4b4e      	ldr	r3, [pc, #312]	; (8009d18 <__ieee754_pow+0x218>)
 8009be0:	429d      	cmp	r5, r3
 8009be2:	d1eb      	bne.n	8009bbc <__ieee754_pow+0xbc>
 8009be4:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009be8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009bec:	ea53 030a 	orrs.w	r3, r3, sl
 8009bf0:	f000 8454 	beq.w	800a49c <__ieee754_pow+0x99c>
 8009bf4:	4b4c      	ldr	r3, [pc, #304]	; (8009d28 <__ieee754_pow+0x228>)
 8009bf6:	429c      	cmp	r4, r3
 8009bf8:	dd0d      	ble.n	8009c16 <__ieee754_pow+0x116>
 8009bfa:	2e00      	cmp	r6, #0
 8009bfc:	f280 8454 	bge.w	800a4a8 <__ieee754_pow+0x9a8>
 8009c00:	f04f 0b00 	mov.w	fp, #0
 8009c04:	f04f 0c00 	mov.w	ip, #0
 8009c08:	4658      	mov	r0, fp
 8009c0a:	4661      	mov	r1, ip
 8009c0c:	b013      	add	sp, #76	; 0x4c
 8009c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c12:	2302      	movs	r3, #2
 8009c14:	e7e0      	b.n	8009bd8 <__ieee754_pow+0xd8>
 8009c16:	2e00      	cmp	r6, #0
 8009c18:	daf2      	bge.n	8009c00 <__ieee754_pow+0x100>
 8009c1a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8009c1e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8009c22:	e7f1      	b.n	8009c08 <__ieee754_pow+0x108>
 8009c24:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8009c28:	d108      	bne.n	8009c3c <__ieee754_pow+0x13c>
 8009c2a:	463a      	mov	r2, r7
 8009c2c:	4643      	mov	r3, r8
 8009c2e:	4638      	mov	r0, r7
 8009c30:	4641      	mov	r1, r8
 8009c32:	f7f6 fc49 	bl	80004c8 <__aeabi_dmul>
 8009c36:	4683      	mov	fp, r0
 8009c38:	468c      	mov	ip, r1
 8009c3a:	e7e5      	b.n	8009c08 <__ieee754_pow+0x108>
 8009c3c:	4b3b      	ldr	r3, [pc, #236]	; (8009d2c <__ieee754_pow+0x22c>)
 8009c3e:	429e      	cmp	r6, r3
 8009c40:	d10b      	bne.n	8009c5a <__ieee754_pow+0x15a>
 8009c42:	f1b9 0f00 	cmp.w	r9, #0
 8009c46:	db08      	blt.n	8009c5a <__ieee754_pow+0x15a>
 8009c48:	4638      	mov	r0, r7
 8009c4a:	4641      	mov	r1, r8
 8009c4c:	b013      	add	sp, #76	; 0x4c
 8009c4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c52:	f000 bc6b 	b.w	800a52c <__ieee754_sqrt>
 8009c56:	2300      	movs	r3, #0
 8009c58:	9300      	str	r3, [sp, #0]
 8009c5a:	4638      	mov	r0, r7
 8009c5c:	4641      	mov	r1, r8
 8009c5e:	f000 fe9d 	bl	800a99c <fabs>
 8009c62:	4683      	mov	fp, r0
 8009c64:	468c      	mov	ip, r1
 8009c66:	f1ba 0f00 	cmp.w	sl, #0
 8009c6a:	d129      	bne.n	8009cc0 <__ieee754_pow+0x1c0>
 8009c6c:	b124      	cbz	r4, 8009c78 <__ieee754_pow+0x178>
 8009c6e:	4b2d      	ldr	r3, [pc, #180]	; (8009d24 <__ieee754_pow+0x224>)
 8009c70:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d123      	bne.n	8009cc0 <__ieee754_pow+0x1c0>
 8009c78:	2e00      	cmp	r6, #0
 8009c7a:	da07      	bge.n	8009c8c <__ieee754_pow+0x18c>
 8009c7c:	465a      	mov	r2, fp
 8009c7e:	4663      	mov	r3, ip
 8009c80:	2000      	movs	r0, #0
 8009c82:	4928      	ldr	r1, [pc, #160]	; (8009d24 <__ieee754_pow+0x224>)
 8009c84:	f7f6 fd4a 	bl	800071c <__aeabi_ddiv>
 8009c88:	4683      	mov	fp, r0
 8009c8a:	468c      	mov	ip, r1
 8009c8c:	f1b9 0f00 	cmp.w	r9, #0
 8009c90:	daba      	bge.n	8009c08 <__ieee754_pow+0x108>
 8009c92:	9b00      	ldr	r3, [sp, #0]
 8009c94:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009c98:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009c9c:	4323      	orrs	r3, r4
 8009c9e:	d108      	bne.n	8009cb2 <__ieee754_pow+0x1b2>
 8009ca0:	465a      	mov	r2, fp
 8009ca2:	4663      	mov	r3, ip
 8009ca4:	4658      	mov	r0, fp
 8009ca6:	4661      	mov	r1, ip
 8009ca8:	f7f6 fa56 	bl	8000158 <__aeabi_dsub>
 8009cac:	4602      	mov	r2, r0
 8009cae:	460b      	mov	r3, r1
 8009cb0:	e78e      	b.n	8009bd0 <__ieee754_pow+0xd0>
 8009cb2:	9b00      	ldr	r3, [sp, #0]
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d1a7      	bne.n	8009c08 <__ieee754_pow+0x108>
 8009cb8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009cbc:	469c      	mov	ip, r3
 8009cbe:	e7a3      	b.n	8009c08 <__ieee754_pow+0x108>
 8009cc0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8009cc4:	3b01      	subs	r3, #1
 8009cc6:	930c      	str	r3, [sp, #48]	; 0x30
 8009cc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cca:	9b00      	ldr	r3, [sp, #0]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	d104      	bne.n	8009cda <__ieee754_pow+0x1da>
 8009cd0:	463a      	mov	r2, r7
 8009cd2:	4643      	mov	r3, r8
 8009cd4:	4638      	mov	r0, r7
 8009cd6:	4641      	mov	r1, r8
 8009cd8:	e7e6      	b.n	8009ca8 <__ieee754_pow+0x1a8>
 8009cda:	4b15      	ldr	r3, [pc, #84]	; (8009d30 <__ieee754_pow+0x230>)
 8009cdc:	429d      	cmp	r5, r3
 8009cde:	f340 80f9 	ble.w	8009ed4 <__ieee754_pow+0x3d4>
 8009ce2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009ce6:	429d      	cmp	r5, r3
 8009ce8:	4b0f      	ldr	r3, [pc, #60]	; (8009d28 <__ieee754_pow+0x228>)
 8009cea:	dd09      	ble.n	8009d00 <__ieee754_pow+0x200>
 8009cec:	429c      	cmp	r4, r3
 8009cee:	dc0c      	bgt.n	8009d0a <__ieee754_pow+0x20a>
 8009cf0:	2e00      	cmp	r6, #0
 8009cf2:	da85      	bge.n	8009c00 <__ieee754_pow+0x100>
 8009cf4:	a306      	add	r3, pc, #24	; (adr r3, 8009d10 <__ieee754_pow+0x210>)
 8009cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfa:	4610      	mov	r0, r2
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	e798      	b.n	8009c32 <__ieee754_pow+0x132>
 8009d00:	429c      	cmp	r4, r3
 8009d02:	dbf5      	blt.n	8009cf0 <__ieee754_pow+0x1f0>
 8009d04:	4b07      	ldr	r3, [pc, #28]	; (8009d24 <__ieee754_pow+0x224>)
 8009d06:	429c      	cmp	r4, r3
 8009d08:	dd14      	ble.n	8009d34 <__ieee754_pow+0x234>
 8009d0a:	2e00      	cmp	r6, #0
 8009d0c:	dcf2      	bgt.n	8009cf4 <__ieee754_pow+0x1f4>
 8009d0e:	e777      	b.n	8009c00 <__ieee754_pow+0x100>
 8009d10:	8800759c 	.word	0x8800759c
 8009d14:	7e37e43c 	.word	0x7e37e43c
 8009d18:	7ff00000 	.word	0x7ff00000
 8009d1c:	0800ad65 	.word	0x0800ad65
 8009d20:	433fffff 	.word	0x433fffff
 8009d24:	3ff00000 	.word	0x3ff00000
 8009d28:	3fefffff 	.word	0x3fefffff
 8009d2c:	3fe00000 	.word	0x3fe00000
 8009d30:	41e00000 	.word	0x41e00000
 8009d34:	4661      	mov	r1, ip
 8009d36:	2200      	movs	r2, #0
 8009d38:	4658      	mov	r0, fp
 8009d3a:	4b61      	ldr	r3, [pc, #388]	; (8009ec0 <__ieee754_pow+0x3c0>)
 8009d3c:	f7f6 fa0c 	bl	8000158 <__aeabi_dsub>
 8009d40:	a355      	add	r3, pc, #340	; (adr r3, 8009e98 <__ieee754_pow+0x398>)
 8009d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d46:	4604      	mov	r4, r0
 8009d48:	460d      	mov	r5, r1
 8009d4a:	f7f6 fbbd 	bl	80004c8 <__aeabi_dmul>
 8009d4e:	a354      	add	r3, pc, #336	; (adr r3, 8009ea0 <__ieee754_pow+0x3a0>)
 8009d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d54:	4606      	mov	r6, r0
 8009d56:	460f      	mov	r7, r1
 8009d58:	4620      	mov	r0, r4
 8009d5a:	4629      	mov	r1, r5
 8009d5c:	f7f6 fbb4 	bl	80004c8 <__aeabi_dmul>
 8009d60:	2200      	movs	r2, #0
 8009d62:	4682      	mov	sl, r0
 8009d64:	468b      	mov	fp, r1
 8009d66:	4620      	mov	r0, r4
 8009d68:	4629      	mov	r1, r5
 8009d6a:	4b56      	ldr	r3, [pc, #344]	; (8009ec4 <__ieee754_pow+0x3c4>)
 8009d6c:	f7f6 fbac 	bl	80004c8 <__aeabi_dmul>
 8009d70:	4602      	mov	r2, r0
 8009d72:	460b      	mov	r3, r1
 8009d74:	a14c      	add	r1, pc, #304	; (adr r1, 8009ea8 <__ieee754_pow+0x3a8>)
 8009d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d7a:	f7f6 f9ed 	bl	8000158 <__aeabi_dsub>
 8009d7e:	4622      	mov	r2, r4
 8009d80:	462b      	mov	r3, r5
 8009d82:	f7f6 fba1 	bl	80004c8 <__aeabi_dmul>
 8009d86:	4602      	mov	r2, r0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	2000      	movs	r0, #0
 8009d8c:	494e      	ldr	r1, [pc, #312]	; (8009ec8 <__ieee754_pow+0x3c8>)
 8009d8e:	f7f6 f9e3 	bl	8000158 <__aeabi_dsub>
 8009d92:	4622      	mov	r2, r4
 8009d94:	462b      	mov	r3, r5
 8009d96:	4680      	mov	r8, r0
 8009d98:	4689      	mov	r9, r1
 8009d9a:	4620      	mov	r0, r4
 8009d9c:	4629      	mov	r1, r5
 8009d9e:	f7f6 fb93 	bl	80004c8 <__aeabi_dmul>
 8009da2:	4602      	mov	r2, r0
 8009da4:	460b      	mov	r3, r1
 8009da6:	4640      	mov	r0, r8
 8009da8:	4649      	mov	r1, r9
 8009daa:	f7f6 fb8d 	bl	80004c8 <__aeabi_dmul>
 8009dae:	a340      	add	r3, pc, #256	; (adr r3, 8009eb0 <__ieee754_pow+0x3b0>)
 8009db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db4:	f7f6 fb88 	bl	80004c8 <__aeabi_dmul>
 8009db8:	4602      	mov	r2, r0
 8009dba:	460b      	mov	r3, r1
 8009dbc:	4650      	mov	r0, sl
 8009dbe:	4659      	mov	r1, fp
 8009dc0:	f7f6 f9ca 	bl	8000158 <__aeabi_dsub>
 8009dc4:	f04f 0a00 	mov.w	sl, #0
 8009dc8:	4602      	mov	r2, r0
 8009dca:	460b      	mov	r3, r1
 8009dcc:	4604      	mov	r4, r0
 8009dce:	460d      	mov	r5, r1
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	4639      	mov	r1, r7
 8009dd4:	f7f6 f9c2 	bl	800015c <__adddf3>
 8009dd8:	4632      	mov	r2, r6
 8009dda:	463b      	mov	r3, r7
 8009ddc:	4650      	mov	r0, sl
 8009dde:	468b      	mov	fp, r1
 8009de0:	f7f6 f9ba 	bl	8000158 <__aeabi_dsub>
 8009de4:	4602      	mov	r2, r0
 8009de6:	460b      	mov	r3, r1
 8009de8:	4620      	mov	r0, r4
 8009dea:	4629      	mov	r1, r5
 8009dec:	f7f6 f9b4 	bl	8000158 <__aeabi_dsub>
 8009df0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009df4:	9b00      	ldr	r3, [sp, #0]
 8009df6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	f04f 0600 	mov.w	r6, #0
 8009e00:	f04f 0200 	mov.w	r2, #0
 8009e04:	bf0c      	ite	eq
 8009e06:	4b31      	ldreq	r3, [pc, #196]	; (8009ecc <__ieee754_pow+0x3cc>)
 8009e08:	4b2d      	ldrne	r3, [pc, #180]	; (8009ec0 <__ieee754_pow+0x3c0>)
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	460d      	mov	r5, r1
 8009e0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e12:	e9cd 2300 	strd	r2, r3, [sp]
 8009e16:	4632      	mov	r2, r6
 8009e18:	463b      	mov	r3, r7
 8009e1a:	f7f6 f99d 	bl	8000158 <__aeabi_dsub>
 8009e1e:	4652      	mov	r2, sl
 8009e20:	465b      	mov	r3, fp
 8009e22:	f7f6 fb51 	bl	80004c8 <__aeabi_dmul>
 8009e26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e2a:	4680      	mov	r8, r0
 8009e2c:	4689      	mov	r9, r1
 8009e2e:	4620      	mov	r0, r4
 8009e30:	4629      	mov	r1, r5
 8009e32:	f7f6 fb49 	bl	80004c8 <__aeabi_dmul>
 8009e36:	4602      	mov	r2, r0
 8009e38:	460b      	mov	r3, r1
 8009e3a:	4640      	mov	r0, r8
 8009e3c:	4649      	mov	r1, r9
 8009e3e:	f7f6 f98d 	bl	800015c <__adddf3>
 8009e42:	4632      	mov	r2, r6
 8009e44:	463b      	mov	r3, r7
 8009e46:	4680      	mov	r8, r0
 8009e48:	4689      	mov	r9, r1
 8009e4a:	4650      	mov	r0, sl
 8009e4c:	4659      	mov	r1, fp
 8009e4e:	f7f6 fb3b 	bl	80004c8 <__aeabi_dmul>
 8009e52:	4604      	mov	r4, r0
 8009e54:	460d      	mov	r5, r1
 8009e56:	460b      	mov	r3, r1
 8009e58:	4602      	mov	r2, r0
 8009e5a:	4649      	mov	r1, r9
 8009e5c:	4640      	mov	r0, r8
 8009e5e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009e62:	f7f6 f97b 	bl	800015c <__adddf3>
 8009e66:	4b1a      	ldr	r3, [pc, #104]	; (8009ed0 <__ieee754_pow+0x3d0>)
 8009e68:	4682      	mov	sl, r0
 8009e6a:	4299      	cmp	r1, r3
 8009e6c:	460f      	mov	r7, r1
 8009e6e:	460e      	mov	r6, r1
 8009e70:	f340 82ed 	ble.w	800a44e <__ieee754_pow+0x94e>
 8009e74:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009e78:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009e7c:	4303      	orrs	r3, r0
 8009e7e:	f000 81e7 	beq.w	800a250 <__ieee754_pow+0x750>
 8009e82:	a30d      	add	r3, pc, #52	; (adr r3, 8009eb8 <__ieee754_pow+0x3b8>)
 8009e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e8c:	f7f6 fb1c 	bl	80004c8 <__aeabi_dmul>
 8009e90:	a309      	add	r3, pc, #36	; (adr r3, 8009eb8 <__ieee754_pow+0x3b8>)
 8009e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e96:	e6cc      	b.n	8009c32 <__ieee754_pow+0x132>
 8009e98:	60000000 	.word	0x60000000
 8009e9c:	3ff71547 	.word	0x3ff71547
 8009ea0:	f85ddf44 	.word	0xf85ddf44
 8009ea4:	3e54ae0b 	.word	0x3e54ae0b
 8009ea8:	55555555 	.word	0x55555555
 8009eac:	3fd55555 	.word	0x3fd55555
 8009eb0:	652b82fe 	.word	0x652b82fe
 8009eb4:	3ff71547 	.word	0x3ff71547
 8009eb8:	8800759c 	.word	0x8800759c
 8009ebc:	7e37e43c 	.word	0x7e37e43c
 8009ec0:	3ff00000 	.word	0x3ff00000
 8009ec4:	3fd00000 	.word	0x3fd00000
 8009ec8:	3fe00000 	.word	0x3fe00000
 8009ecc:	bff00000 	.word	0xbff00000
 8009ed0:	408fffff 	.word	0x408fffff
 8009ed4:	4bd4      	ldr	r3, [pc, #848]	; (800a228 <__ieee754_pow+0x728>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	ea09 0303 	and.w	r3, r9, r3
 8009edc:	b943      	cbnz	r3, 8009ef0 <__ieee754_pow+0x3f0>
 8009ede:	4658      	mov	r0, fp
 8009ee0:	4661      	mov	r1, ip
 8009ee2:	4bd2      	ldr	r3, [pc, #840]	; (800a22c <__ieee754_pow+0x72c>)
 8009ee4:	f7f6 faf0 	bl	80004c8 <__aeabi_dmul>
 8009ee8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009eec:	4683      	mov	fp, r0
 8009eee:	460c      	mov	r4, r1
 8009ef0:	1523      	asrs	r3, r4, #20
 8009ef2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009ef6:	4413      	add	r3, r2
 8009ef8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009efa:	4bcd      	ldr	r3, [pc, #820]	; (800a230 <__ieee754_pow+0x730>)
 8009efc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009f00:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009f04:	429c      	cmp	r4, r3
 8009f06:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009f0a:	dd08      	ble.n	8009f1e <__ieee754_pow+0x41e>
 8009f0c:	4bc9      	ldr	r3, [pc, #804]	; (800a234 <__ieee754_pow+0x734>)
 8009f0e:	429c      	cmp	r4, r3
 8009f10:	f340 819c 	ble.w	800a24c <__ieee754_pow+0x74c>
 8009f14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f16:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f1e:	2600      	movs	r6, #0
 8009f20:	00f3      	lsls	r3, r6, #3
 8009f22:	930d      	str	r3, [sp, #52]	; 0x34
 8009f24:	4bc4      	ldr	r3, [pc, #784]	; (800a238 <__ieee754_pow+0x738>)
 8009f26:	4658      	mov	r0, fp
 8009f28:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f30:	4629      	mov	r1, r5
 8009f32:	461a      	mov	r2, r3
 8009f34:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8009f38:	4623      	mov	r3, r4
 8009f3a:	f7f6 f90d 	bl	8000158 <__aeabi_dsub>
 8009f3e:	46da      	mov	sl, fp
 8009f40:	462b      	mov	r3, r5
 8009f42:	4652      	mov	r2, sl
 8009f44:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009f48:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f4c:	f7f6 f906 	bl	800015c <__adddf3>
 8009f50:	4602      	mov	r2, r0
 8009f52:	460b      	mov	r3, r1
 8009f54:	2000      	movs	r0, #0
 8009f56:	49b9      	ldr	r1, [pc, #740]	; (800a23c <__ieee754_pow+0x73c>)
 8009f58:	f7f6 fbe0 	bl	800071c <__aeabi_ddiv>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	460b      	mov	r3, r1
 8009f60:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009f64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009f68:	f7f6 faae 	bl	80004c8 <__aeabi_dmul>
 8009f6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009f70:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009f74:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009f78:	2300      	movs	r3, #0
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	46ab      	mov	fp, r5
 8009f7e:	106d      	asrs	r5, r5, #1
 8009f80:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009f84:	9304      	str	r3, [sp, #16]
 8009f86:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009f8a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009f8e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8009f92:	4640      	mov	r0, r8
 8009f94:	4649      	mov	r1, r9
 8009f96:	4614      	mov	r4, r2
 8009f98:	461d      	mov	r5, r3
 8009f9a:	f7f6 fa95 	bl	80004c8 <__aeabi_dmul>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009fa6:	f7f6 f8d7 	bl	8000158 <__aeabi_dsub>
 8009faa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009fae:	4606      	mov	r6, r0
 8009fb0:	460f      	mov	r7, r1
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	4629      	mov	r1, r5
 8009fb6:	f7f6 f8cf 	bl	8000158 <__aeabi_dsub>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	4650      	mov	r0, sl
 8009fc0:	4659      	mov	r1, fp
 8009fc2:	f7f6 f8c9 	bl	8000158 <__aeabi_dsub>
 8009fc6:	4642      	mov	r2, r8
 8009fc8:	464b      	mov	r3, r9
 8009fca:	f7f6 fa7d 	bl	80004c8 <__aeabi_dmul>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	4639      	mov	r1, r7
 8009fd6:	f7f6 f8bf 	bl	8000158 <__aeabi_dsub>
 8009fda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009fde:	f7f6 fa73 	bl	80004c8 <__aeabi_dmul>
 8009fe2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fe6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009fea:	4610      	mov	r0, r2
 8009fec:	4619      	mov	r1, r3
 8009fee:	f7f6 fa6b 	bl	80004c8 <__aeabi_dmul>
 8009ff2:	a37b      	add	r3, pc, #492	; (adr r3, 800a1e0 <__ieee754_pow+0x6e0>)
 8009ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	460d      	mov	r5, r1
 8009ffc:	f7f6 fa64 	bl	80004c8 <__aeabi_dmul>
 800a000:	a379      	add	r3, pc, #484	; (adr r3, 800a1e8 <__ieee754_pow+0x6e8>)
 800a002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a006:	f7f6 f8a9 	bl	800015c <__adddf3>
 800a00a:	4622      	mov	r2, r4
 800a00c:	462b      	mov	r3, r5
 800a00e:	f7f6 fa5b 	bl	80004c8 <__aeabi_dmul>
 800a012:	a377      	add	r3, pc, #476	; (adr r3, 800a1f0 <__ieee754_pow+0x6f0>)
 800a014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a018:	f7f6 f8a0 	bl	800015c <__adddf3>
 800a01c:	4622      	mov	r2, r4
 800a01e:	462b      	mov	r3, r5
 800a020:	f7f6 fa52 	bl	80004c8 <__aeabi_dmul>
 800a024:	a374      	add	r3, pc, #464	; (adr r3, 800a1f8 <__ieee754_pow+0x6f8>)
 800a026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02a:	f7f6 f897 	bl	800015c <__adddf3>
 800a02e:	4622      	mov	r2, r4
 800a030:	462b      	mov	r3, r5
 800a032:	f7f6 fa49 	bl	80004c8 <__aeabi_dmul>
 800a036:	a372      	add	r3, pc, #456	; (adr r3, 800a200 <__ieee754_pow+0x700>)
 800a038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03c:	f7f6 f88e 	bl	800015c <__adddf3>
 800a040:	4622      	mov	r2, r4
 800a042:	462b      	mov	r3, r5
 800a044:	f7f6 fa40 	bl	80004c8 <__aeabi_dmul>
 800a048:	a36f      	add	r3, pc, #444	; (adr r3, 800a208 <__ieee754_pow+0x708>)
 800a04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04e:	f7f6 f885 	bl	800015c <__adddf3>
 800a052:	4622      	mov	r2, r4
 800a054:	4606      	mov	r6, r0
 800a056:	460f      	mov	r7, r1
 800a058:	462b      	mov	r3, r5
 800a05a:	4620      	mov	r0, r4
 800a05c:	4629      	mov	r1, r5
 800a05e:	f7f6 fa33 	bl	80004c8 <__aeabi_dmul>
 800a062:	4602      	mov	r2, r0
 800a064:	460b      	mov	r3, r1
 800a066:	4630      	mov	r0, r6
 800a068:	4639      	mov	r1, r7
 800a06a:	f7f6 fa2d 	bl	80004c8 <__aeabi_dmul>
 800a06e:	4604      	mov	r4, r0
 800a070:	460d      	mov	r5, r1
 800a072:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a076:	4642      	mov	r2, r8
 800a078:	464b      	mov	r3, r9
 800a07a:	f7f6 f86f 	bl	800015c <__adddf3>
 800a07e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a082:	f7f6 fa21 	bl	80004c8 <__aeabi_dmul>
 800a086:	4622      	mov	r2, r4
 800a088:	462b      	mov	r3, r5
 800a08a:	f7f6 f867 	bl	800015c <__adddf3>
 800a08e:	4642      	mov	r2, r8
 800a090:	4606      	mov	r6, r0
 800a092:	460f      	mov	r7, r1
 800a094:	464b      	mov	r3, r9
 800a096:	4640      	mov	r0, r8
 800a098:	4649      	mov	r1, r9
 800a09a:	f7f6 fa15 	bl	80004c8 <__aeabi_dmul>
 800a09e:	2200      	movs	r2, #0
 800a0a0:	4b67      	ldr	r3, [pc, #412]	; (800a240 <__ieee754_pow+0x740>)
 800a0a2:	4682      	mov	sl, r0
 800a0a4:	468b      	mov	fp, r1
 800a0a6:	f7f6 f859 	bl	800015c <__adddf3>
 800a0aa:	4632      	mov	r2, r6
 800a0ac:	463b      	mov	r3, r7
 800a0ae:	f7f6 f855 	bl	800015c <__adddf3>
 800a0b2:	9c04      	ldr	r4, [sp, #16]
 800a0b4:	460d      	mov	r5, r1
 800a0b6:	4622      	mov	r2, r4
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	4640      	mov	r0, r8
 800a0bc:	4649      	mov	r1, r9
 800a0be:	f7f6 fa03 	bl	80004c8 <__aeabi_dmul>
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	4680      	mov	r8, r0
 800a0c6:	4689      	mov	r9, r1
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	4629      	mov	r1, r5
 800a0cc:	4b5c      	ldr	r3, [pc, #368]	; (800a240 <__ieee754_pow+0x740>)
 800a0ce:	f7f6 f843 	bl	8000158 <__aeabi_dsub>
 800a0d2:	4652      	mov	r2, sl
 800a0d4:	465b      	mov	r3, fp
 800a0d6:	f7f6 f83f 	bl	8000158 <__aeabi_dsub>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	460b      	mov	r3, r1
 800a0de:	4630      	mov	r0, r6
 800a0e0:	4639      	mov	r1, r7
 800a0e2:	f7f6 f839 	bl	8000158 <__aeabi_dsub>
 800a0e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0ea:	f7f6 f9ed 	bl	80004c8 <__aeabi_dmul>
 800a0ee:	4622      	mov	r2, r4
 800a0f0:	4606      	mov	r6, r0
 800a0f2:	460f      	mov	r7, r1
 800a0f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a0f8:	462b      	mov	r3, r5
 800a0fa:	f7f6 f9e5 	bl	80004c8 <__aeabi_dmul>
 800a0fe:	4602      	mov	r2, r0
 800a100:	460b      	mov	r3, r1
 800a102:	4630      	mov	r0, r6
 800a104:	4639      	mov	r1, r7
 800a106:	f7f6 f829 	bl	800015c <__adddf3>
 800a10a:	4606      	mov	r6, r0
 800a10c:	460f      	mov	r7, r1
 800a10e:	4602      	mov	r2, r0
 800a110:	460b      	mov	r3, r1
 800a112:	4640      	mov	r0, r8
 800a114:	4649      	mov	r1, r9
 800a116:	f7f6 f821 	bl	800015c <__adddf3>
 800a11a:	a33d      	add	r3, pc, #244	; (adr r3, 800a210 <__ieee754_pow+0x710>)
 800a11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a120:	9c04      	ldr	r4, [sp, #16]
 800a122:	460d      	mov	r5, r1
 800a124:	4620      	mov	r0, r4
 800a126:	f7f6 f9cf 	bl	80004c8 <__aeabi_dmul>
 800a12a:	4642      	mov	r2, r8
 800a12c:	464b      	mov	r3, r9
 800a12e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a132:	4620      	mov	r0, r4
 800a134:	4629      	mov	r1, r5
 800a136:	f7f6 f80f 	bl	8000158 <__aeabi_dsub>
 800a13a:	4602      	mov	r2, r0
 800a13c:	460b      	mov	r3, r1
 800a13e:	4630      	mov	r0, r6
 800a140:	4639      	mov	r1, r7
 800a142:	f7f6 f809 	bl	8000158 <__aeabi_dsub>
 800a146:	a334      	add	r3, pc, #208	; (adr r3, 800a218 <__ieee754_pow+0x718>)
 800a148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14c:	f7f6 f9bc 	bl	80004c8 <__aeabi_dmul>
 800a150:	a333      	add	r3, pc, #204	; (adr r3, 800a220 <__ieee754_pow+0x720>)
 800a152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a156:	4606      	mov	r6, r0
 800a158:	460f      	mov	r7, r1
 800a15a:	4620      	mov	r0, r4
 800a15c:	4629      	mov	r1, r5
 800a15e:	f7f6 f9b3 	bl	80004c8 <__aeabi_dmul>
 800a162:	4602      	mov	r2, r0
 800a164:	460b      	mov	r3, r1
 800a166:	4630      	mov	r0, r6
 800a168:	4639      	mov	r1, r7
 800a16a:	f7f5 fff7 	bl	800015c <__adddf3>
 800a16e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a170:	4b34      	ldr	r3, [pc, #208]	; (800a244 <__ieee754_pow+0x744>)
 800a172:	4413      	add	r3, r2
 800a174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a178:	f7f5 fff0 	bl	800015c <__adddf3>
 800a17c:	4680      	mov	r8, r0
 800a17e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a180:	4689      	mov	r9, r1
 800a182:	f7f6 f937 	bl	80003f4 <__aeabi_i2d>
 800a186:	4604      	mov	r4, r0
 800a188:	460d      	mov	r5, r1
 800a18a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a18c:	4b2e      	ldr	r3, [pc, #184]	; (800a248 <__ieee754_pow+0x748>)
 800a18e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a192:	4413      	add	r3, r2
 800a194:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a198:	4642      	mov	r2, r8
 800a19a:	464b      	mov	r3, r9
 800a19c:	f7f5 ffde 	bl	800015c <__adddf3>
 800a1a0:	4632      	mov	r2, r6
 800a1a2:	463b      	mov	r3, r7
 800a1a4:	f7f5 ffda 	bl	800015c <__adddf3>
 800a1a8:	4622      	mov	r2, r4
 800a1aa:	462b      	mov	r3, r5
 800a1ac:	f7f5 ffd6 	bl	800015c <__adddf3>
 800a1b0:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a1b4:	4622      	mov	r2, r4
 800a1b6:	462b      	mov	r3, r5
 800a1b8:	4650      	mov	r0, sl
 800a1ba:	468b      	mov	fp, r1
 800a1bc:	f7f5 ffcc 	bl	8000158 <__aeabi_dsub>
 800a1c0:	4632      	mov	r2, r6
 800a1c2:	463b      	mov	r3, r7
 800a1c4:	f7f5 ffc8 	bl	8000158 <__aeabi_dsub>
 800a1c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1cc:	f7f5 ffc4 	bl	8000158 <__aeabi_dsub>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	4640      	mov	r0, r8
 800a1d6:	4649      	mov	r1, r9
 800a1d8:	e608      	b.n	8009dec <__ieee754_pow+0x2ec>
 800a1da:	bf00      	nop
 800a1dc:	f3af 8000 	nop.w
 800a1e0:	4a454eef 	.word	0x4a454eef
 800a1e4:	3fca7e28 	.word	0x3fca7e28
 800a1e8:	93c9db65 	.word	0x93c9db65
 800a1ec:	3fcd864a 	.word	0x3fcd864a
 800a1f0:	a91d4101 	.word	0xa91d4101
 800a1f4:	3fd17460 	.word	0x3fd17460
 800a1f8:	518f264d 	.word	0x518f264d
 800a1fc:	3fd55555 	.word	0x3fd55555
 800a200:	db6fabff 	.word	0xdb6fabff
 800a204:	3fdb6db6 	.word	0x3fdb6db6
 800a208:	33333303 	.word	0x33333303
 800a20c:	3fe33333 	.word	0x3fe33333
 800a210:	e0000000 	.word	0xe0000000
 800a214:	3feec709 	.word	0x3feec709
 800a218:	dc3a03fd 	.word	0xdc3a03fd
 800a21c:	3feec709 	.word	0x3feec709
 800a220:	145b01f5 	.word	0x145b01f5
 800a224:	be3e2fe0 	.word	0xbe3e2fe0
 800a228:	7ff00000 	.word	0x7ff00000
 800a22c:	43400000 	.word	0x43400000
 800a230:	0003988e 	.word	0x0003988e
 800a234:	000bb679 	.word	0x000bb679
 800a238:	0800adc8 	.word	0x0800adc8
 800a23c:	3ff00000 	.word	0x3ff00000
 800a240:	40080000 	.word	0x40080000
 800a244:	0800ade8 	.word	0x0800ade8
 800a248:	0800add8 	.word	0x0800add8
 800a24c:	2601      	movs	r6, #1
 800a24e:	e667      	b.n	8009f20 <__ieee754_pow+0x420>
 800a250:	a39d      	add	r3, pc, #628	; (adr r3, 800a4c8 <__ieee754_pow+0x9c8>)
 800a252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a256:	4640      	mov	r0, r8
 800a258:	4649      	mov	r1, r9
 800a25a:	f7f5 ff7f 	bl	800015c <__adddf3>
 800a25e:	4622      	mov	r2, r4
 800a260:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a264:	462b      	mov	r3, r5
 800a266:	4650      	mov	r0, sl
 800a268:	4639      	mov	r1, r7
 800a26a:	f7f5 ff75 	bl	8000158 <__aeabi_dsub>
 800a26e:	4602      	mov	r2, r0
 800a270:	460b      	mov	r3, r1
 800a272:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a276:	f7f6 fbb7 	bl	80009e8 <__aeabi_dcmpgt>
 800a27a:	2800      	cmp	r0, #0
 800a27c:	f47f ae01 	bne.w	8009e82 <__ieee754_pow+0x382>
 800a280:	4aa5      	ldr	r2, [pc, #660]	; (800a518 <__ieee754_pow+0xa18>)
 800a282:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a286:	4293      	cmp	r3, r2
 800a288:	f340 8103 	ble.w	800a492 <__ieee754_pow+0x992>
 800a28c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a290:	2000      	movs	r0, #0
 800a292:	151b      	asrs	r3, r3, #20
 800a294:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a298:	fa4a f303 	asr.w	r3, sl, r3
 800a29c:	4433      	add	r3, r6
 800a29e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a2a2:	4f9e      	ldr	r7, [pc, #632]	; (800a51c <__ieee754_pow+0xa1c>)
 800a2a4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a2a8:	4117      	asrs	r7, r2
 800a2aa:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a2ae:	ea23 0107 	bic.w	r1, r3, r7
 800a2b2:	f1c2 0214 	rsb	r2, r2, #20
 800a2b6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	fa4a fa02 	asr.w	sl, sl, r2
 800a2c0:	2e00      	cmp	r6, #0
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	4629      	mov	r1, r5
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	bfb8      	it	lt
 800a2ca:	f1ca 0a00 	rsblt	sl, sl, #0
 800a2ce:	f7f5 ff43 	bl	8000158 <__aeabi_dsub>
 800a2d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2da:	2400      	movs	r4, #0
 800a2dc:	4642      	mov	r2, r8
 800a2de:	464b      	mov	r3, r9
 800a2e0:	f7f5 ff3c 	bl	800015c <__adddf3>
 800a2e4:	a37a      	add	r3, pc, #488	; (adr r3, 800a4d0 <__ieee754_pow+0x9d0>)
 800a2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	460d      	mov	r5, r1
 800a2ee:	f7f6 f8eb 	bl	80004c8 <__aeabi_dmul>
 800a2f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2f6:	4606      	mov	r6, r0
 800a2f8:	460f      	mov	r7, r1
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	4629      	mov	r1, r5
 800a2fe:	f7f5 ff2b 	bl	8000158 <__aeabi_dsub>
 800a302:	4602      	mov	r2, r0
 800a304:	460b      	mov	r3, r1
 800a306:	4640      	mov	r0, r8
 800a308:	4649      	mov	r1, r9
 800a30a:	f7f5 ff25 	bl	8000158 <__aeabi_dsub>
 800a30e:	a372      	add	r3, pc, #456	; (adr r3, 800a4d8 <__ieee754_pow+0x9d8>)
 800a310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a314:	f7f6 f8d8 	bl	80004c8 <__aeabi_dmul>
 800a318:	a371      	add	r3, pc, #452	; (adr r3, 800a4e0 <__ieee754_pow+0x9e0>)
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	4680      	mov	r8, r0
 800a320:	4689      	mov	r9, r1
 800a322:	4620      	mov	r0, r4
 800a324:	4629      	mov	r1, r5
 800a326:	f7f6 f8cf 	bl	80004c8 <__aeabi_dmul>
 800a32a:	4602      	mov	r2, r0
 800a32c:	460b      	mov	r3, r1
 800a32e:	4640      	mov	r0, r8
 800a330:	4649      	mov	r1, r9
 800a332:	f7f5 ff13 	bl	800015c <__adddf3>
 800a336:	4604      	mov	r4, r0
 800a338:	460d      	mov	r5, r1
 800a33a:	4602      	mov	r2, r0
 800a33c:	460b      	mov	r3, r1
 800a33e:	4630      	mov	r0, r6
 800a340:	4639      	mov	r1, r7
 800a342:	f7f5 ff0b 	bl	800015c <__adddf3>
 800a346:	4632      	mov	r2, r6
 800a348:	463b      	mov	r3, r7
 800a34a:	4680      	mov	r8, r0
 800a34c:	4689      	mov	r9, r1
 800a34e:	f7f5 ff03 	bl	8000158 <__aeabi_dsub>
 800a352:	4602      	mov	r2, r0
 800a354:	460b      	mov	r3, r1
 800a356:	4620      	mov	r0, r4
 800a358:	4629      	mov	r1, r5
 800a35a:	f7f5 fefd 	bl	8000158 <__aeabi_dsub>
 800a35e:	4642      	mov	r2, r8
 800a360:	4606      	mov	r6, r0
 800a362:	460f      	mov	r7, r1
 800a364:	464b      	mov	r3, r9
 800a366:	4640      	mov	r0, r8
 800a368:	4649      	mov	r1, r9
 800a36a:	f7f6 f8ad 	bl	80004c8 <__aeabi_dmul>
 800a36e:	a35e      	add	r3, pc, #376	; (adr r3, 800a4e8 <__ieee754_pow+0x9e8>)
 800a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a374:	4604      	mov	r4, r0
 800a376:	460d      	mov	r5, r1
 800a378:	f7f6 f8a6 	bl	80004c8 <__aeabi_dmul>
 800a37c:	a35c      	add	r3, pc, #368	; (adr r3, 800a4f0 <__ieee754_pow+0x9f0>)
 800a37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a382:	f7f5 fee9 	bl	8000158 <__aeabi_dsub>
 800a386:	4622      	mov	r2, r4
 800a388:	462b      	mov	r3, r5
 800a38a:	f7f6 f89d 	bl	80004c8 <__aeabi_dmul>
 800a38e:	a35a      	add	r3, pc, #360	; (adr r3, 800a4f8 <__ieee754_pow+0x9f8>)
 800a390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a394:	f7f5 fee2 	bl	800015c <__adddf3>
 800a398:	4622      	mov	r2, r4
 800a39a:	462b      	mov	r3, r5
 800a39c:	f7f6 f894 	bl	80004c8 <__aeabi_dmul>
 800a3a0:	a357      	add	r3, pc, #348	; (adr r3, 800a500 <__ieee754_pow+0xa00>)
 800a3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a6:	f7f5 fed7 	bl	8000158 <__aeabi_dsub>
 800a3aa:	4622      	mov	r2, r4
 800a3ac:	462b      	mov	r3, r5
 800a3ae:	f7f6 f88b 	bl	80004c8 <__aeabi_dmul>
 800a3b2:	a355      	add	r3, pc, #340	; (adr r3, 800a508 <__ieee754_pow+0xa08>)
 800a3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b8:	f7f5 fed0 	bl	800015c <__adddf3>
 800a3bc:	4622      	mov	r2, r4
 800a3be:	462b      	mov	r3, r5
 800a3c0:	f7f6 f882 	bl	80004c8 <__aeabi_dmul>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	4640      	mov	r0, r8
 800a3ca:	4649      	mov	r1, r9
 800a3cc:	f7f5 fec4 	bl	8000158 <__aeabi_dsub>
 800a3d0:	4604      	mov	r4, r0
 800a3d2:	460d      	mov	r5, r1
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	4640      	mov	r0, r8
 800a3da:	4649      	mov	r1, r9
 800a3dc:	f7f6 f874 	bl	80004c8 <__aeabi_dmul>
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	4629      	mov	r1, r5
 800a3ee:	f7f5 feb3 	bl	8000158 <__aeabi_dsub>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3fa:	f7f6 f98f 	bl	800071c <__aeabi_ddiv>
 800a3fe:	4632      	mov	r2, r6
 800a400:	4604      	mov	r4, r0
 800a402:	460d      	mov	r5, r1
 800a404:	463b      	mov	r3, r7
 800a406:	4640      	mov	r0, r8
 800a408:	4649      	mov	r1, r9
 800a40a:	f7f6 f85d 	bl	80004c8 <__aeabi_dmul>
 800a40e:	4632      	mov	r2, r6
 800a410:	463b      	mov	r3, r7
 800a412:	f7f5 fea3 	bl	800015c <__adddf3>
 800a416:	4602      	mov	r2, r0
 800a418:	460b      	mov	r3, r1
 800a41a:	4620      	mov	r0, r4
 800a41c:	4629      	mov	r1, r5
 800a41e:	f7f5 fe9b 	bl	8000158 <__aeabi_dsub>
 800a422:	4642      	mov	r2, r8
 800a424:	464b      	mov	r3, r9
 800a426:	f7f5 fe97 	bl	8000158 <__aeabi_dsub>
 800a42a:	4602      	mov	r2, r0
 800a42c:	460b      	mov	r3, r1
 800a42e:	2000      	movs	r0, #0
 800a430:	493b      	ldr	r1, [pc, #236]	; (800a520 <__ieee754_pow+0xa20>)
 800a432:	f7f5 fe91 	bl	8000158 <__aeabi_dsub>
 800a436:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a43a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a43e:	da2b      	bge.n	800a498 <__ieee754_pow+0x998>
 800a440:	4652      	mov	r2, sl
 800a442:	f000 fb45 	bl	800aad0 <scalbn>
 800a446:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a44a:	f7ff bbf2 	b.w	8009c32 <__ieee754_pow+0x132>
 800a44e:	4b35      	ldr	r3, [pc, #212]	; (800a524 <__ieee754_pow+0xa24>)
 800a450:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a454:	429f      	cmp	r7, r3
 800a456:	f77f af13 	ble.w	800a280 <__ieee754_pow+0x780>
 800a45a:	4b33      	ldr	r3, [pc, #204]	; (800a528 <__ieee754_pow+0xa28>)
 800a45c:	440b      	add	r3, r1
 800a45e:	4303      	orrs	r3, r0
 800a460:	d00b      	beq.n	800a47a <__ieee754_pow+0x97a>
 800a462:	a32b      	add	r3, pc, #172	; (adr r3, 800a510 <__ieee754_pow+0xa10>)
 800a464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a468:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a46c:	f7f6 f82c 	bl	80004c8 <__aeabi_dmul>
 800a470:	a327      	add	r3, pc, #156	; (adr r3, 800a510 <__ieee754_pow+0xa10>)
 800a472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a476:	f7ff bbdc 	b.w	8009c32 <__ieee754_pow+0x132>
 800a47a:	4622      	mov	r2, r4
 800a47c:	462b      	mov	r3, r5
 800a47e:	f7f5 fe6b 	bl	8000158 <__aeabi_dsub>
 800a482:	4642      	mov	r2, r8
 800a484:	464b      	mov	r3, r9
 800a486:	f7f6 faa5 	bl	80009d4 <__aeabi_dcmpge>
 800a48a:	2800      	cmp	r0, #0
 800a48c:	f43f aef8 	beq.w	800a280 <__ieee754_pow+0x780>
 800a490:	e7e7      	b.n	800a462 <__ieee754_pow+0x962>
 800a492:	f04f 0a00 	mov.w	sl, #0
 800a496:	e71e      	b.n	800a2d6 <__ieee754_pow+0x7d6>
 800a498:	4621      	mov	r1, r4
 800a49a:	e7d4      	b.n	800a446 <__ieee754_pow+0x946>
 800a49c:	f04f 0b00 	mov.w	fp, #0
 800a4a0:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a520 <__ieee754_pow+0xa20>
 800a4a4:	f7ff bbb0 	b.w	8009c08 <__ieee754_pow+0x108>
 800a4a8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800a4ac:	f7ff bbac 	b.w	8009c08 <__ieee754_pow+0x108>
 800a4b0:	4638      	mov	r0, r7
 800a4b2:	4641      	mov	r1, r8
 800a4b4:	f7ff bbbf 	b.w	8009c36 <__ieee754_pow+0x136>
 800a4b8:	9200      	str	r2, [sp, #0]
 800a4ba:	f7ff bb7f 	b.w	8009bbc <__ieee754_pow+0xbc>
 800a4be:	2300      	movs	r3, #0
 800a4c0:	f7ff bb69 	b.w	8009b96 <__ieee754_pow+0x96>
 800a4c4:	f3af 8000 	nop.w
 800a4c8:	652b82fe 	.word	0x652b82fe
 800a4cc:	3c971547 	.word	0x3c971547
 800a4d0:	00000000 	.word	0x00000000
 800a4d4:	3fe62e43 	.word	0x3fe62e43
 800a4d8:	fefa39ef 	.word	0xfefa39ef
 800a4dc:	3fe62e42 	.word	0x3fe62e42
 800a4e0:	0ca86c39 	.word	0x0ca86c39
 800a4e4:	be205c61 	.word	0xbe205c61
 800a4e8:	72bea4d0 	.word	0x72bea4d0
 800a4ec:	3e663769 	.word	0x3e663769
 800a4f0:	c5d26bf1 	.word	0xc5d26bf1
 800a4f4:	3ebbbd41 	.word	0x3ebbbd41
 800a4f8:	af25de2c 	.word	0xaf25de2c
 800a4fc:	3f11566a 	.word	0x3f11566a
 800a500:	16bebd93 	.word	0x16bebd93
 800a504:	3f66c16c 	.word	0x3f66c16c
 800a508:	5555553e 	.word	0x5555553e
 800a50c:	3fc55555 	.word	0x3fc55555
 800a510:	c2f8f359 	.word	0xc2f8f359
 800a514:	01a56e1f 	.word	0x01a56e1f
 800a518:	3fe00000 	.word	0x3fe00000
 800a51c:	000fffff 	.word	0x000fffff
 800a520:	3ff00000 	.word	0x3ff00000
 800a524:	4090cbff 	.word	0x4090cbff
 800a528:	3f6f3400 	.word	0x3f6f3400

0800a52c <__ieee754_sqrt>:
 800a52c:	f8df c150 	ldr.w	ip, [pc, #336]	; 800a680 <__ieee754_sqrt+0x154>
 800a530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a534:	ea3c 0c01 	bics.w	ip, ip, r1
 800a538:	460b      	mov	r3, r1
 800a53a:	4606      	mov	r6, r0
 800a53c:	460d      	mov	r5, r1
 800a53e:	460a      	mov	r2, r1
 800a540:	4607      	mov	r7, r0
 800a542:	4604      	mov	r4, r0
 800a544:	d10e      	bne.n	800a564 <__ieee754_sqrt+0x38>
 800a546:	4602      	mov	r2, r0
 800a548:	f7f5 ffbe 	bl	80004c8 <__aeabi_dmul>
 800a54c:	4602      	mov	r2, r0
 800a54e:	460b      	mov	r3, r1
 800a550:	4630      	mov	r0, r6
 800a552:	4629      	mov	r1, r5
 800a554:	f7f5 fe02 	bl	800015c <__adddf3>
 800a558:	4606      	mov	r6, r0
 800a55a:	460d      	mov	r5, r1
 800a55c:	4630      	mov	r0, r6
 800a55e:	4629      	mov	r1, r5
 800a560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a564:	2900      	cmp	r1, #0
 800a566:	dc0d      	bgt.n	800a584 <__ieee754_sqrt+0x58>
 800a568:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a56c:	ea5c 0707 	orrs.w	r7, ip, r7
 800a570:	d0f4      	beq.n	800a55c <__ieee754_sqrt+0x30>
 800a572:	b139      	cbz	r1, 800a584 <__ieee754_sqrt+0x58>
 800a574:	4602      	mov	r2, r0
 800a576:	f7f5 fdef 	bl	8000158 <__aeabi_dsub>
 800a57a:	4602      	mov	r2, r0
 800a57c:	460b      	mov	r3, r1
 800a57e:	f7f6 f8cd 	bl	800071c <__aeabi_ddiv>
 800a582:	e7e9      	b.n	800a558 <__ieee754_sqrt+0x2c>
 800a584:	1512      	asrs	r2, r2, #20
 800a586:	d074      	beq.n	800a672 <__ieee754_sqrt+0x146>
 800a588:	2000      	movs	r0, #0
 800a58a:	07d5      	lsls	r5, r2, #31
 800a58c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a590:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800a594:	bf5e      	ittt	pl
 800a596:	0fe3      	lsrpl	r3, r4, #31
 800a598:	0064      	lslpl	r4, r4, #1
 800a59a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800a59e:	0fe3      	lsrs	r3, r4, #31
 800a5a0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a5a4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800a5a8:	2516      	movs	r5, #22
 800a5aa:	4601      	mov	r1, r0
 800a5ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a5b0:	1076      	asrs	r6, r6, #1
 800a5b2:	0064      	lsls	r4, r4, #1
 800a5b4:	188f      	adds	r7, r1, r2
 800a5b6:	429f      	cmp	r7, r3
 800a5b8:	bfde      	ittt	le
 800a5ba:	1bdb      	suble	r3, r3, r7
 800a5bc:	18b9      	addle	r1, r7, r2
 800a5be:	1880      	addle	r0, r0, r2
 800a5c0:	005b      	lsls	r3, r3, #1
 800a5c2:	3d01      	subs	r5, #1
 800a5c4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a5c8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a5cc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a5d0:	d1f0      	bne.n	800a5b4 <__ieee754_sqrt+0x88>
 800a5d2:	462a      	mov	r2, r5
 800a5d4:	f04f 0e20 	mov.w	lr, #32
 800a5d8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800a5dc:	428b      	cmp	r3, r1
 800a5de:	eb07 0c05 	add.w	ip, r7, r5
 800a5e2:	dc02      	bgt.n	800a5ea <__ieee754_sqrt+0xbe>
 800a5e4:	d113      	bne.n	800a60e <__ieee754_sqrt+0xe2>
 800a5e6:	45a4      	cmp	ip, r4
 800a5e8:	d811      	bhi.n	800a60e <__ieee754_sqrt+0xe2>
 800a5ea:	f1bc 0f00 	cmp.w	ip, #0
 800a5ee:	eb0c 0507 	add.w	r5, ip, r7
 800a5f2:	da43      	bge.n	800a67c <__ieee754_sqrt+0x150>
 800a5f4:	2d00      	cmp	r5, #0
 800a5f6:	db41      	blt.n	800a67c <__ieee754_sqrt+0x150>
 800a5f8:	f101 0801 	add.w	r8, r1, #1
 800a5fc:	1a5b      	subs	r3, r3, r1
 800a5fe:	4641      	mov	r1, r8
 800a600:	45a4      	cmp	ip, r4
 800a602:	bf88      	it	hi
 800a604:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a608:	eba4 040c 	sub.w	r4, r4, ip
 800a60c:	443a      	add	r2, r7
 800a60e:	005b      	lsls	r3, r3, #1
 800a610:	f1be 0e01 	subs.w	lr, lr, #1
 800a614:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a618:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800a61c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a620:	d1dc      	bne.n	800a5dc <__ieee754_sqrt+0xb0>
 800a622:	4323      	orrs	r3, r4
 800a624:	d006      	beq.n	800a634 <__ieee754_sqrt+0x108>
 800a626:	1c54      	adds	r4, r2, #1
 800a628:	bf0b      	itete	eq
 800a62a:	4672      	moveq	r2, lr
 800a62c:	3201      	addne	r2, #1
 800a62e:	3001      	addeq	r0, #1
 800a630:	f022 0201 	bicne.w	r2, r2, #1
 800a634:	1043      	asrs	r3, r0, #1
 800a636:	07c1      	lsls	r1, r0, #31
 800a638:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a63c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a640:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a644:	bf48      	it	mi
 800a646:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a64a:	4610      	mov	r0, r2
 800a64c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800a650:	e782      	b.n	800a558 <__ieee754_sqrt+0x2c>
 800a652:	0ae3      	lsrs	r3, r4, #11
 800a654:	3915      	subs	r1, #21
 800a656:	0564      	lsls	r4, r4, #21
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d0fa      	beq.n	800a652 <__ieee754_sqrt+0x126>
 800a65c:	02de      	lsls	r6, r3, #11
 800a65e:	d50a      	bpl.n	800a676 <__ieee754_sqrt+0x14a>
 800a660:	f1c2 0020 	rsb	r0, r2, #32
 800a664:	fa24 f000 	lsr.w	r0, r4, r0
 800a668:	1e55      	subs	r5, r2, #1
 800a66a:	4094      	lsls	r4, r2
 800a66c:	4303      	orrs	r3, r0
 800a66e:	1b4a      	subs	r2, r1, r5
 800a670:	e78a      	b.n	800a588 <__ieee754_sqrt+0x5c>
 800a672:	4611      	mov	r1, r2
 800a674:	e7f0      	b.n	800a658 <__ieee754_sqrt+0x12c>
 800a676:	005b      	lsls	r3, r3, #1
 800a678:	3201      	adds	r2, #1
 800a67a:	e7ef      	b.n	800a65c <__ieee754_sqrt+0x130>
 800a67c:	4688      	mov	r8, r1
 800a67e:	e7bd      	b.n	800a5fc <__ieee754_sqrt+0xd0>
 800a680:	7ff00000 	.word	0x7ff00000
 800a684:	00000000 	.word	0x00000000

0800a688 <atan>:
 800a688:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68c:	4bb6      	ldr	r3, [pc, #728]	; (800a968 <atan+0x2e0>)
 800a68e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a692:	429e      	cmp	r6, r3
 800a694:	4604      	mov	r4, r0
 800a696:	460d      	mov	r5, r1
 800a698:	468b      	mov	fp, r1
 800a69a:	dd17      	ble.n	800a6cc <atan+0x44>
 800a69c:	4bb3      	ldr	r3, [pc, #716]	; (800a96c <atan+0x2e4>)
 800a69e:	429e      	cmp	r6, r3
 800a6a0:	dc01      	bgt.n	800a6a6 <atan+0x1e>
 800a6a2:	d109      	bne.n	800a6b8 <atan+0x30>
 800a6a4:	b140      	cbz	r0, 800a6b8 <atan+0x30>
 800a6a6:	4622      	mov	r2, r4
 800a6a8:	462b      	mov	r3, r5
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	4629      	mov	r1, r5
 800a6ae:	f7f5 fd55 	bl	800015c <__adddf3>
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	460d      	mov	r5, r1
 800a6b6:	e005      	b.n	800a6c4 <atan+0x3c>
 800a6b8:	f1bb 0f00 	cmp.w	fp, #0
 800a6bc:	4cac      	ldr	r4, [pc, #688]	; (800a970 <atan+0x2e8>)
 800a6be:	f300 8121 	bgt.w	800a904 <atan+0x27c>
 800a6c2:	4dac      	ldr	r5, [pc, #688]	; (800a974 <atan+0x2ec>)
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	4629      	mov	r1, r5
 800a6c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6cc:	4baa      	ldr	r3, [pc, #680]	; (800a978 <atan+0x2f0>)
 800a6ce:	429e      	cmp	r6, r3
 800a6d0:	dc11      	bgt.n	800a6f6 <atan+0x6e>
 800a6d2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a6d6:	429e      	cmp	r6, r3
 800a6d8:	dc0a      	bgt.n	800a6f0 <atan+0x68>
 800a6da:	a38b      	add	r3, pc, #556	; (adr r3, 800a908 <atan+0x280>)
 800a6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e0:	f7f5 fd3c 	bl	800015c <__adddf3>
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	4ba5      	ldr	r3, [pc, #660]	; (800a97c <atan+0x2f4>)
 800a6e8:	f7f6 f97e 	bl	80009e8 <__aeabi_dcmpgt>
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	d1e9      	bne.n	800a6c4 <atan+0x3c>
 800a6f0:	f04f 3aff 	mov.w	sl, #4294967295
 800a6f4:	e027      	b.n	800a746 <atan+0xbe>
 800a6f6:	f000 f951 	bl	800a99c <fabs>
 800a6fa:	4ba1      	ldr	r3, [pc, #644]	; (800a980 <atan+0x2f8>)
 800a6fc:	4604      	mov	r4, r0
 800a6fe:	429e      	cmp	r6, r3
 800a700:	460d      	mov	r5, r1
 800a702:	f300 80b8 	bgt.w	800a876 <atan+0x1ee>
 800a706:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a70a:	429e      	cmp	r6, r3
 800a70c:	f300 809c 	bgt.w	800a848 <atan+0x1c0>
 800a710:	4602      	mov	r2, r0
 800a712:	460b      	mov	r3, r1
 800a714:	f7f5 fd22 	bl	800015c <__adddf3>
 800a718:	2200      	movs	r2, #0
 800a71a:	4b98      	ldr	r3, [pc, #608]	; (800a97c <atan+0x2f4>)
 800a71c:	f7f5 fd1c 	bl	8000158 <__aeabi_dsub>
 800a720:	2200      	movs	r2, #0
 800a722:	4606      	mov	r6, r0
 800a724:	460f      	mov	r7, r1
 800a726:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a72a:	4620      	mov	r0, r4
 800a72c:	4629      	mov	r1, r5
 800a72e:	f7f5 fd15 	bl	800015c <__adddf3>
 800a732:	4602      	mov	r2, r0
 800a734:	460b      	mov	r3, r1
 800a736:	4630      	mov	r0, r6
 800a738:	4639      	mov	r1, r7
 800a73a:	f7f5 ffef 	bl	800071c <__aeabi_ddiv>
 800a73e:	f04f 0a00 	mov.w	sl, #0
 800a742:	4604      	mov	r4, r0
 800a744:	460d      	mov	r5, r1
 800a746:	4622      	mov	r2, r4
 800a748:	462b      	mov	r3, r5
 800a74a:	4620      	mov	r0, r4
 800a74c:	4629      	mov	r1, r5
 800a74e:	f7f5 febb 	bl	80004c8 <__aeabi_dmul>
 800a752:	4602      	mov	r2, r0
 800a754:	460b      	mov	r3, r1
 800a756:	4680      	mov	r8, r0
 800a758:	4689      	mov	r9, r1
 800a75a:	f7f5 feb5 	bl	80004c8 <__aeabi_dmul>
 800a75e:	a36c      	add	r3, pc, #432	; (adr r3, 800a910 <atan+0x288>)
 800a760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a764:	4606      	mov	r6, r0
 800a766:	460f      	mov	r7, r1
 800a768:	f7f5 feae 	bl	80004c8 <__aeabi_dmul>
 800a76c:	a36a      	add	r3, pc, #424	; (adr r3, 800a918 <atan+0x290>)
 800a76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a772:	f7f5 fcf3 	bl	800015c <__adddf3>
 800a776:	4632      	mov	r2, r6
 800a778:	463b      	mov	r3, r7
 800a77a:	f7f5 fea5 	bl	80004c8 <__aeabi_dmul>
 800a77e:	a368      	add	r3, pc, #416	; (adr r3, 800a920 <atan+0x298>)
 800a780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a784:	f7f5 fcea 	bl	800015c <__adddf3>
 800a788:	4632      	mov	r2, r6
 800a78a:	463b      	mov	r3, r7
 800a78c:	f7f5 fe9c 	bl	80004c8 <__aeabi_dmul>
 800a790:	a365      	add	r3, pc, #404	; (adr r3, 800a928 <atan+0x2a0>)
 800a792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a796:	f7f5 fce1 	bl	800015c <__adddf3>
 800a79a:	4632      	mov	r2, r6
 800a79c:	463b      	mov	r3, r7
 800a79e:	f7f5 fe93 	bl	80004c8 <__aeabi_dmul>
 800a7a2:	a363      	add	r3, pc, #396	; (adr r3, 800a930 <atan+0x2a8>)
 800a7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a8:	f7f5 fcd8 	bl	800015c <__adddf3>
 800a7ac:	4632      	mov	r2, r6
 800a7ae:	463b      	mov	r3, r7
 800a7b0:	f7f5 fe8a 	bl	80004c8 <__aeabi_dmul>
 800a7b4:	a360      	add	r3, pc, #384	; (adr r3, 800a938 <atan+0x2b0>)
 800a7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ba:	f7f5 fccf 	bl	800015c <__adddf3>
 800a7be:	4642      	mov	r2, r8
 800a7c0:	464b      	mov	r3, r9
 800a7c2:	f7f5 fe81 	bl	80004c8 <__aeabi_dmul>
 800a7c6:	a35e      	add	r3, pc, #376	; (adr r3, 800a940 <atan+0x2b8>)
 800a7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7cc:	4680      	mov	r8, r0
 800a7ce:	4689      	mov	r9, r1
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	4639      	mov	r1, r7
 800a7d4:	f7f5 fe78 	bl	80004c8 <__aeabi_dmul>
 800a7d8:	a35b      	add	r3, pc, #364	; (adr r3, 800a948 <atan+0x2c0>)
 800a7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7de:	f7f5 fcbb 	bl	8000158 <__aeabi_dsub>
 800a7e2:	4632      	mov	r2, r6
 800a7e4:	463b      	mov	r3, r7
 800a7e6:	f7f5 fe6f 	bl	80004c8 <__aeabi_dmul>
 800a7ea:	a359      	add	r3, pc, #356	; (adr r3, 800a950 <atan+0x2c8>)
 800a7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f0:	f7f5 fcb2 	bl	8000158 <__aeabi_dsub>
 800a7f4:	4632      	mov	r2, r6
 800a7f6:	463b      	mov	r3, r7
 800a7f8:	f7f5 fe66 	bl	80004c8 <__aeabi_dmul>
 800a7fc:	a356      	add	r3, pc, #344	; (adr r3, 800a958 <atan+0x2d0>)
 800a7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a802:	f7f5 fca9 	bl	8000158 <__aeabi_dsub>
 800a806:	4632      	mov	r2, r6
 800a808:	463b      	mov	r3, r7
 800a80a:	f7f5 fe5d 	bl	80004c8 <__aeabi_dmul>
 800a80e:	a354      	add	r3, pc, #336	; (adr r3, 800a960 <atan+0x2d8>)
 800a810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a814:	f7f5 fca0 	bl	8000158 <__aeabi_dsub>
 800a818:	4632      	mov	r2, r6
 800a81a:	463b      	mov	r3, r7
 800a81c:	f7f5 fe54 	bl	80004c8 <__aeabi_dmul>
 800a820:	4602      	mov	r2, r0
 800a822:	460b      	mov	r3, r1
 800a824:	4640      	mov	r0, r8
 800a826:	4649      	mov	r1, r9
 800a828:	f7f5 fc98 	bl	800015c <__adddf3>
 800a82c:	4622      	mov	r2, r4
 800a82e:	462b      	mov	r3, r5
 800a830:	f7f5 fe4a 	bl	80004c8 <__aeabi_dmul>
 800a834:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a838:	4602      	mov	r2, r0
 800a83a:	460b      	mov	r3, r1
 800a83c:	d144      	bne.n	800a8c8 <atan+0x240>
 800a83e:	4620      	mov	r0, r4
 800a840:	4629      	mov	r1, r5
 800a842:	f7f5 fc89 	bl	8000158 <__aeabi_dsub>
 800a846:	e734      	b.n	800a6b2 <atan+0x2a>
 800a848:	2200      	movs	r2, #0
 800a84a:	4b4c      	ldr	r3, [pc, #304]	; (800a97c <atan+0x2f4>)
 800a84c:	f7f5 fc84 	bl	8000158 <__aeabi_dsub>
 800a850:	2200      	movs	r2, #0
 800a852:	4606      	mov	r6, r0
 800a854:	460f      	mov	r7, r1
 800a856:	4620      	mov	r0, r4
 800a858:	4629      	mov	r1, r5
 800a85a:	4b48      	ldr	r3, [pc, #288]	; (800a97c <atan+0x2f4>)
 800a85c:	f7f5 fc7e 	bl	800015c <__adddf3>
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	4630      	mov	r0, r6
 800a866:	4639      	mov	r1, r7
 800a868:	f7f5 ff58 	bl	800071c <__aeabi_ddiv>
 800a86c:	f04f 0a01 	mov.w	sl, #1
 800a870:	4604      	mov	r4, r0
 800a872:	460d      	mov	r5, r1
 800a874:	e767      	b.n	800a746 <atan+0xbe>
 800a876:	4b43      	ldr	r3, [pc, #268]	; (800a984 <atan+0x2fc>)
 800a878:	429e      	cmp	r6, r3
 800a87a:	da1a      	bge.n	800a8b2 <atan+0x22a>
 800a87c:	2200      	movs	r2, #0
 800a87e:	4b42      	ldr	r3, [pc, #264]	; (800a988 <atan+0x300>)
 800a880:	f7f5 fc6a 	bl	8000158 <__aeabi_dsub>
 800a884:	2200      	movs	r2, #0
 800a886:	4606      	mov	r6, r0
 800a888:	460f      	mov	r7, r1
 800a88a:	4620      	mov	r0, r4
 800a88c:	4629      	mov	r1, r5
 800a88e:	4b3e      	ldr	r3, [pc, #248]	; (800a988 <atan+0x300>)
 800a890:	f7f5 fe1a 	bl	80004c8 <__aeabi_dmul>
 800a894:	2200      	movs	r2, #0
 800a896:	4b39      	ldr	r3, [pc, #228]	; (800a97c <atan+0x2f4>)
 800a898:	f7f5 fc60 	bl	800015c <__adddf3>
 800a89c:	4602      	mov	r2, r0
 800a89e:	460b      	mov	r3, r1
 800a8a0:	4630      	mov	r0, r6
 800a8a2:	4639      	mov	r1, r7
 800a8a4:	f7f5 ff3a 	bl	800071c <__aeabi_ddiv>
 800a8a8:	f04f 0a02 	mov.w	sl, #2
 800a8ac:	4604      	mov	r4, r0
 800a8ae:	460d      	mov	r5, r1
 800a8b0:	e749      	b.n	800a746 <atan+0xbe>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	2000      	movs	r0, #0
 800a8b8:	4934      	ldr	r1, [pc, #208]	; (800a98c <atan+0x304>)
 800a8ba:	f7f5 ff2f 	bl	800071c <__aeabi_ddiv>
 800a8be:	f04f 0a03 	mov.w	sl, #3
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	460d      	mov	r5, r1
 800a8c6:	e73e      	b.n	800a746 <atan+0xbe>
 800a8c8:	4b31      	ldr	r3, [pc, #196]	; (800a990 <atan+0x308>)
 800a8ca:	4e32      	ldr	r6, [pc, #200]	; (800a994 <atan+0x30c>)
 800a8cc:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a8d0:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800a8d4:	e9da 2300 	ldrd	r2, r3, [sl]
 800a8d8:	f7f5 fc3e 	bl	8000158 <__aeabi_dsub>
 800a8dc:	4622      	mov	r2, r4
 800a8de:	462b      	mov	r3, r5
 800a8e0:	f7f5 fc3a 	bl	8000158 <__aeabi_dsub>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a8ec:	f7f5 fc34 	bl	8000158 <__aeabi_dsub>
 800a8f0:	f1bb 0f00 	cmp.w	fp, #0
 800a8f4:	4604      	mov	r4, r0
 800a8f6:	460d      	mov	r5, r1
 800a8f8:	f6bf aee4 	bge.w	800a6c4 <atan+0x3c>
 800a8fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a900:	461d      	mov	r5, r3
 800a902:	e6df      	b.n	800a6c4 <atan+0x3c>
 800a904:	4d24      	ldr	r5, [pc, #144]	; (800a998 <atan+0x310>)
 800a906:	e6dd      	b.n	800a6c4 <atan+0x3c>
 800a908:	8800759c 	.word	0x8800759c
 800a90c:	7e37e43c 	.word	0x7e37e43c
 800a910:	e322da11 	.word	0xe322da11
 800a914:	3f90ad3a 	.word	0x3f90ad3a
 800a918:	24760deb 	.word	0x24760deb
 800a91c:	3fa97b4b 	.word	0x3fa97b4b
 800a920:	a0d03d51 	.word	0xa0d03d51
 800a924:	3fb10d66 	.word	0x3fb10d66
 800a928:	c54c206e 	.word	0xc54c206e
 800a92c:	3fb745cd 	.word	0x3fb745cd
 800a930:	920083ff 	.word	0x920083ff
 800a934:	3fc24924 	.word	0x3fc24924
 800a938:	5555550d 	.word	0x5555550d
 800a93c:	3fd55555 	.word	0x3fd55555
 800a940:	2c6a6c2f 	.word	0x2c6a6c2f
 800a944:	bfa2b444 	.word	0xbfa2b444
 800a948:	52defd9a 	.word	0x52defd9a
 800a94c:	3fadde2d 	.word	0x3fadde2d
 800a950:	af749a6d 	.word	0xaf749a6d
 800a954:	3fb3b0f2 	.word	0x3fb3b0f2
 800a958:	fe231671 	.word	0xfe231671
 800a95c:	3fbc71c6 	.word	0x3fbc71c6
 800a960:	9998ebc4 	.word	0x9998ebc4
 800a964:	3fc99999 	.word	0x3fc99999
 800a968:	440fffff 	.word	0x440fffff
 800a96c:	7ff00000 	.word	0x7ff00000
 800a970:	54442d18 	.word	0x54442d18
 800a974:	bff921fb 	.word	0xbff921fb
 800a978:	3fdbffff 	.word	0x3fdbffff
 800a97c:	3ff00000 	.word	0x3ff00000
 800a980:	3ff2ffff 	.word	0x3ff2ffff
 800a984:	40038000 	.word	0x40038000
 800a988:	3ff80000 	.word	0x3ff80000
 800a98c:	bff00000 	.word	0xbff00000
 800a990:	0800ae18 	.word	0x0800ae18
 800a994:	0800adf8 	.word	0x0800adf8
 800a998:	3ff921fb 	.word	0x3ff921fb

0800a99c <fabs>:
 800a99c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a9a0:	4770      	bx	lr

0800a9a2 <finite>:
 800a9a2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800a9a6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a9aa:	0fc0      	lsrs	r0, r0, #31
 800a9ac:	4770      	bx	lr
	...

0800a9b0 <nan>:
 800a9b0:	2000      	movs	r0, #0
 800a9b2:	4901      	ldr	r1, [pc, #4]	; (800a9b8 <nan+0x8>)
 800a9b4:	4770      	bx	lr
 800a9b6:	bf00      	nop
 800a9b8:	7ff80000 	.word	0x7ff80000

0800a9bc <rint>:
 800a9bc:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800a9c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9c2:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800a9c6:	2f13      	cmp	r7, #19
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	460c      	mov	r4, r1
 800a9ce:	4605      	mov	r5, r0
 800a9d0:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800a9d4:	dc59      	bgt.n	800aa8a <rint+0xce>
 800a9d6:	2f00      	cmp	r7, #0
 800a9d8:	da2a      	bge.n	800aa30 <rint+0x74>
 800a9da:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a9de:	4301      	orrs	r1, r0
 800a9e0:	d022      	beq.n	800aa28 <rint+0x6c>
 800a9e2:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800a9e6:	4301      	orrs	r1, r0
 800a9e8:	424d      	negs	r5, r1
 800a9ea:	430d      	orrs	r5, r1
 800a9ec:	4936      	ldr	r1, [pc, #216]	; (800aac8 <rint+0x10c>)
 800a9ee:	0c5c      	lsrs	r4, r3, #17
 800a9f0:	0b2d      	lsrs	r5, r5, #12
 800a9f2:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800a9f6:	0464      	lsls	r4, r4, #17
 800a9f8:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a9fc:	ea45 0304 	orr.w	r3, r5, r4
 800aa00:	e9d1 4500 	ldrd	r4, r5, [r1]
 800aa04:	4620      	mov	r0, r4
 800aa06:	4629      	mov	r1, r5
 800aa08:	f7f5 fba8 	bl	800015c <__adddf3>
 800aa0c:	e9cd 0100 	strd	r0, r1, [sp]
 800aa10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa14:	462b      	mov	r3, r5
 800aa16:	4622      	mov	r2, r4
 800aa18:	f7f5 fb9e 	bl	8000158 <__aeabi_dsub>
 800aa1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aa20:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800aa24:	4602      	mov	r2, r0
 800aa26:	460b      	mov	r3, r1
 800aa28:	4610      	mov	r0, r2
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	b003      	add	sp, #12
 800aa2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa30:	4926      	ldr	r1, [pc, #152]	; (800aacc <rint+0x110>)
 800aa32:	4139      	asrs	r1, r7
 800aa34:	ea03 0001 	and.w	r0, r3, r1
 800aa38:	4310      	orrs	r0, r2
 800aa3a:	d0f5      	beq.n	800aa28 <rint+0x6c>
 800aa3c:	084b      	lsrs	r3, r1, #1
 800aa3e:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800aa42:	ea52 0501 	orrs.w	r5, r2, r1
 800aa46:	d00c      	beq.n	800aa62 <rint+0xa6>
 800aa48:	ea24 0303 	bic.w	r3, r4, r3
 800aa4c:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800aa50:	2f13      	cmp	r7, #19
 800aa52:	bf0c      	ite	eq
 800aa54:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800aa58:	2500      	movne	r5, #0
 800aa5a:	fa44 f707 	asr.w	r7, r4, r7
 800aa5e:	ea43 0407 	orr.w	r4, r3, r7
 800aa62:	4919      	ldr	r1, [pc, #100]	; (800aac8 <rint+0x10c>)
 800aa64:	4623      	mov	r3, r4
 800aa66:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800aa6a:	462a      	mov	r2, r5
 800aa6c:	e9d6 4500 	ldrd	r4, r5, [r6]
 800aa70:	4620      	mov	r0, r4
 800aa72:	4629      	mov	r1, r5
 800aa74:	f7f5 fb72 	bl	800015c <__adddf3>
 800aa78:	e9cd 0100 	strd	r0, r1, [sp]
 800aa7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa80:	4622      	mov	r2, r4
 800aa82:	462b      	mov	r3, r5
 800aa84:	f7f5 fb68 	bl	8000158 <__aeabi_dsub>
 800aa88:	e7cc      	b.n	800aa24 <rint+0x68>
 800aa8a:	2f33      	cmp	r7, #51	; 0x33
 800aa8c:	dd05      	ble.n	800aa9a <rint+0xde>
 800aa8e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800aa92:	d1c9      	bne.n	800aa28 <rint+0x6c>
 800aa94:	f7f5 fb62 	bl	800015c <__adddf3>
 800aa98:	e7c4      	b.n	800aa24 <rint+0x68>
 800aa9a:	f04f 31ff 	mov.w	r1, #4294967295
 800aa9e:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800aaa2:	fa21 f10c 	lsr.w	r1, r1, ip
 800aaa6:	4208      	tst	r0, r1
 800aaa8:	d0be      	beq.n	800aa28 <rint+0x6c>
 800aaaa:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800aaae:	bf18      	it	ne
 800aab0:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800aab4:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800aab8:	bf1e      	ittt	ne
 800aaba:	ea20 0303 	bicne.w	r3, r0, r3
 800aabe:	fa45 fc0c 	asrne.w	ip, r5, ip
 800aac2:	ea43 050c 	orrne.w	r5, r3, ip
 800aac6:	e7cc      	b.n	800aa62 <rint+0xa6>
 800aac8:	0800ae38 	.word	0x0800ae38
 800aacc:	000fffff 	.word	0x000fffff

0800aad0 <scalbn>:
 800aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800aad6:	4604      	mov	r4, r0
 800aad8:	460d      	mov	r5, r1
 800aada:	4617      	mov	r7, r2
 800aadc:	460b      	mov	r3, r1
 800aade:	b996      	cbnz	r6, 800ab06 <scalbn+0x36>
 800aae0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aae4:	4303      	orrs	r3, r0
 800aae6:	d039      	beq.n	800ab5c <scalbn+0x8c>
 800aae8:	4b35      	ldr	r3, [pc, #212]	; (800abc0 <scalbn+0xf0>)
 800aaea:	2200      	movs	r2, #0
 800aaec:	f7f5 fcec 	bl	80004c8 <__aeabi_dmul>
 800aaf0:	4b34      	ldr	r3, [pc, #208]	; (800abc4 <scalbn+0xf4>)
 800aaf2:	4604      	mov	r4, r0
 800aaf4:	429f      	cmp	r7, r3
 800aaf6:	460d      	mov	r5, r1
 800aaf8:	da0f      	bge.n	800ab1a <scalbn+0x4a>
 800aafa:	a32d      	add	r3, pc, #180	; (adr r3, 800abb0 <scalbn+0xe0>)
 800aafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab00:	f7f5 fce2 	bl	80004c8 <__aeabi_dmul>
 800ab04:	e006      	b.n	800ab14 <scalbn+0x44>
 800ab06:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ab0a:	4296      	cmp	r6, r2
 800ab0c:	d10a      	bne.n	800ab24 <scalbn+0x54>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	f7f5 fb24 	bl	800015c <__adddf3>
 800ab14:	4604      	mov	r4, r0
 800ab16:	460d      	mov	r5, r1
 800ab18:	e020      	b.n	800ab5c <scalbn+0x8c>
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ab20:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800ab24:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800ab28:	19b9      	adds	r1, r7, r6
 800ab2a:	4291      	cmp	r1, r2
 800ab2c:	dd0e      	ble.n	800ab4c <scalbn+0x7c>
 800ab2e:	a322      	add	r3, pc, #136	; (adr r3, 800abb8 <scalbn+0xe8>)
 800ab30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab34:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ab38:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800ab3c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800ab40:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800ab44:	4820      	ldr	r0, [pc, #128]	; (800abc8 <scalbn+0xf8>)
 800ab46:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800ab4a:	e7d9      	b.n	800ab00 <scalbn+0x30>
 800ab4c:	2900      	cmp	r1, #0
 800ab4e:	dd08      	ble.n	800ab62 <scalbn+0x92>
 800ab50:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ab54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ab58:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	4629      	mov	r1, r5
 800ab60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab62:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800ab66:	da16      	bge.n	800ab96 <scalbn+0xc6>
 800ab68:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ab6c:	429f      	cmp	r7, r3
 800ab6e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800ab72:	dd08      	ble.n	800ab86 <scalbn+0xb6>
 800ab74:	4c15      	ldr	r4, [pc, #84]	; (800abcc <scalbn+0xfc>)
 800ab76:	4814      	ldr	r0, [pc, #80]	; (800abc8 <scalbn+0xf8>)
 800ab78:	f363 74df 	bfi	r4, r3, #31, #1
 800ab7c:	a30e      	add	r3, pc, #56	; (adr r3, 800abb8 <scalbn+0xe8>)
 800ab7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab82:	4621      	mov	r1, r4
 800ab84:	e7bc      	b.n	800ab00 <scalbn+0x30>
 800ab86:	4c12      	ldr	r4, [pc, #72]	; (800abd0 <scalbn+0x100>)
 800ab88:	4812      	ldr	r0, [pc, #72]	; (800abd4 <scalbn+0x104>)
 800ab8a:	f363 74df 	bfi	r4, r3, #31, #1
 800ab8e:	a308      	add	r3, pc, #32	; (adr r3, 800abb0 <scalbn+0xe0>)
 800ab90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab94:	e7f5      	b.n	800ab82 <scalbn+0xb2>
 800ab96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ab9a:	3136      	adds	r1, #54	; 0x36
 800ab9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aba0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800aba4:	4620      	mov	r0, r4
 800aba6:	4629      	mov	r1, r5
 800aba8:	2200      	movs	r2, #0
 800abaa:	4b0b      	ldr	r3, [pc, #44]	; (800abd8 <scalbn+0x108>)
 800abac:	e7a8      	b.n	800ab00 <scalbn+0x30>
 800abae:	bf00      	nop
 800abb0:	c2f8f359 	.word	0xc2f8f359
 800abb4:	01a56e1f 	.word	0x01a56e1f
 800abb8:	8800759c 	.word	0x8800759c
 800abbc:	7e37e43c 	.word	0x7e37e43c
 800abc0:	43500000 	.word	0x43500000
 800abc4:	ffff3cb0 	.word	0xffff3cb0
 800abc8:	8800759c 	.word	0x8800759c
 800abcc:	7e37e43c 	.word	0x7e37e43c
 800abd0:	01a56e1f 	.word	0x01a56e1f
 800abd4:	c2f8f359 	.word	0xc2f8f359
 800abd8:	3c900000 	.word	0x3c900000

0800abdc <_init>:
 800abdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abde:	bf00      	nop
 800abe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abe2:	bc08      	pop	{r3}
 800abe4:	469e      	mov	lr, r3
 800abe6:	4770      	bx	lr

0800abe8 <_fini>:
 800abe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abea:	bf00      	nop
 800abec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abee:	bc08      	pop	{r3}
 800abf0:	469e      	mov	lr, r3
 800abf2:	4770      	bx	lr
